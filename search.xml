<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList</title>
    <url>/2021/04/14/ArrayList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList是实现List接口的动态数组，所谓动态就是它的大小是可变的。</p>
<p>每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。默认初始容量为10。随着ArrayList中元素的增加，它的容量也会不断的自动增长。</p>
<p>在每次添加新的元素时，ArrayList都会检查是否需要进行扩容操作，扩容操作带来数据向新数组的重新拷贝，所以如果我们知道具体业务数据量，在构造ArrayList时可以给ArrayList指定一个初始容量，这样就会减少扩容时数据的拷贝问题。当然在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。</p>
<p>注意，ArrayList实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。所以为了保证同步，最好的办法是在创建时完成，以防止意外对列表进行不同步的访问：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList(...)); </span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="ArrayList的继承关系"><a href="#ArrayList的继承关系" class="headerlink" title="ArrayList的继承关系"></a>ArrayList的继承关系</h3><p>ArrayList继承AbstractList抽象父类，实现了List接口（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><p>ArrayList的底层是一个object数组，并且由trasient修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>
<p>ArrayList底层数组不会参与序列化，而是使用另外的序列化方式(transient修饰)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment"> * deserialize it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        <span class="keyword">int</span> capacity = calculateCapacity(elementData, size);</span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);</span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">     rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">     ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">     System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                      size - index);</span><br><span class="line">     elementData[index] = element;</span><br><span class="line">     size++;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     rangeCheck(index);</span><br><span class="line"></span><br><span class="line">     modCount++;</span><br><span class="line">     E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">         System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                          numMoved);</span><br><span class="line">     elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> oldValue;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">     rangeCheck(index);</span><br><span class="line"></span><br><span class="line">     E oldValue = elementData(index);</span><br><span class="line">     elementData[index] = element;</span><br><span class="line">     <span class="keyword">return</span> oldValue;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     rangeCheck(index);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> elementData(index);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ArrayList-fail-fast-机制"><a href="#ArrayList-fail-fast-机制" class="headerlink" title="ArrayList fail-fast 机制"></a>ArrayList fail-fast 机制</h3><p>fail-fast的字面意思是“快速失败”。当我们在遍历集合元素的时候，经常会使用迭代器，但在迭代器遍历元素的过程中，如果集合的结构被改变的话，就会抛出异常，防止继续遍历。这就是所谓的快速失败机制。<br><code>protected transient int modCount = 0;</code><br>modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。<br>在迭代过程中，判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 ArrayList。<br>迭代器的快速失败行为是不一定能够得到保证的，一般来说，存在非同步的并发修改时，不可能做出任何坚决的保证的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始容量和扩容方式"><a href="#初始容量和扩容方式" class="headerlink" title="初始容量和扩容方式"></a>初始容量和扩容方式</h3><p>初始容量是10</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>元素添加的时候进行扩容，扩容方式是让新容量等于旧容量的1.5倍 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当新容量大于最大数组长度，有两种情况，一种是溢出，抛异常，一种是没溢出，返回整数的最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RandomAccess"><a href="#RandomAccess" class="headerlink" title="RandomAccess"></a>RandomAccess</h3><p>RandomAccess接口是一个标志接口，List集合实现这个接口，就能支持快速随机访问，使用for循环遍历快。比如List下的ArrayList和LinkedList，其中ArrayList实现了RandomAccess，而LinkedList没有。利用instanceof来判断哪一个是实现了RandomAccess，LinkedList使用迭代器快，ArrayList使用for循环遍历快。通过RandomAccess接口标识，不同的集合使用不同的遍历方式。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>add(E e)方法<br>添加元素到末尾，平均时间复杂度为O(1)。</p>
<p>add(int index, E element)方法<br>添加元素到指定位置，平均时间复杂度为O(n)。</p>
<p>get(int index)方法<br>获取指定索引位置的元素，时间复杂度为O(1)。</p>
<p>remove(int index)方法<br>删除指定索引位置的元素，时间复杂度为O(n)。</p>
<p>remove(Object o)方法<br>删除指定元素值的元素，时间复杂度为O(n)</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Bean</title>
    <url>/2021/04/13/Bean/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>ConfigurationProperties</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;prefix&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在类名上加上 <code>@ConfigurationProperties</code> 注解，读取 <code>application.properties</code>  配置 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p>启动项目 控制台打印 <code>url</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(dataSourceBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 <code>Bean</code> 的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 打印了 <code>root</code></p>
<p><code>@Component</code> 配置 <code>Bean</code> （<code>@Repository @Service @Controller</code> 等效），定义一个接口 <code>Todo</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个实现类 <code>Foo</code>  <code>Bar</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@Autowired</code> 根据类型注入，所有类型为 <code>Todo</code> 的全部注入 <code>list</code> ( 指 <code>For</code> 和 <code>Bar</code>)<br><code>@Inject</code> 也是按类型注入，不过没有 <code>required</code> 属性<br><code>@Qualifier</code> 根据名称注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;todos&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todos</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Todo&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier(&quot;todos&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Todos todos;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        todos.getList().stream().forEach( e -&gt; e.print());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 控制台打印 <code>bar</code> 和 <code>foo</code><br>如果 <code>foo</code> 要优先打印，在 <code>Foo</code> 类上加  <code>@Order(value = 1)</code>，值越小优先级越高，<code>Foo</code> 优先加载</p>
<p>实现延迟加载 定义一个 <code>LazyDo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">todo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;lazy todo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造注入 <code>lazyDao</code>，  <code>@Resource</code> 默认按名称注入，匹配不上按类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LazyDo lazyDo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;lazyDo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLazyDo</span><span class="params">(LazyDo lazyDo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lazyDo = lazyDo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lazyDo.todo();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 <code>lazyDao</code> 加载为 <code>null</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.lazyDo = lazyDo; lazyDao: <span class="literal">null</span> lazyDo: <span class="string">&quot;com.kangpan.model.lazy@7a65a360&quot;</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问地址 <code>http://localhost:8081/test/</code> 控制台打印 <code>lazy todo</code></p>
<p><code> Bean</code> 默认是单例，在类上加注解 <code>@Scope(&quot;prototype&quot;)</code> 多例</p>
<p>看下 <code>Bean</code> 初始化 及 销毁前 执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目 打印台输出 <code>init</code> ，关闭项目 打印台输出 <code>destroy</code></p>
<p>根据当前环境配置 <code>Bean</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDev</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDev</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>application.properties</code> 配置 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test.name=testName <span class="comment">// @Value 赋值</span></span><br><span class="line">spring.profiles.active=dev <span class="comment">// 当前环境</span></span><br></pre></td></tr></table></figure>
<p>配置 <code>dev</code> 和 <code>test</code>  环境下的 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dev</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestDev <span class="title">testDev</span><span class="params">(<span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestDev(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestDev <span class="title">testTest</span><span class="params">(<span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestDev(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDev testDev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testDev.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 打印 testName</p>
<p><code>XML</code> 配置  <code>Bean</code> 简化</p>
<p>属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>,value = <span class="string">&quot;value&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>构造参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;constructor-arg type=<span class="string">&quot;java.lang.String&quot;</span> value=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">&quot;refBean&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>集合</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key=<span class="string">&quot;key&quot;</span> value=<span class="string">&quot;value&quot;</span>&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key-ref=<span class="string">&quot;keyBean&quot;</span> value-ref=<span class="string">&quot;valueBean&quot;</span>&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;name&quot;</span> ref=<span class="string">&quot;refBean&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>或者 <code>XML</code> 声明 <code>p</code> 命名空间，然后配置 <code>Bean</code> ，特殊字符 用 <code>&lt;![CDATA[]]&gt;</code> 转义</p>
<p>项目启动 <code>@SpringBootApplication</code> 注解中的  <code>@EnableAutoConfiguration</code> 会加载配置文件的 <code>Bean</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>resources/META-INF/spring.factories</code> 文件中配置</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span>.EnableAutoConfiguration=com<span class="selector-class">.kangpan</span><span class="selector-class">.model</span>.Configs</span><br></pre></td></tr></table></figure>
<p><code>Configs</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@Import(&#123;ConfigFoo.class,ConfigBar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引入的 <code>ConfigFoo ConfigBar</code>  类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ConfigBar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigFoo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ConfigFoo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 控制台打印 <code>ConfigBar ConfigFoo</code>，如果 <code>@EnableConfigurationProperties</code> 改成  <code>@Configuration</code> 不需要在 <code>resources/META-INF/spring.factories</code> 文件中配置<br>看下 <code>Configuration</code> 接口，加了 <code>@Component</code> 注解 会实例化 <code>Bean</code></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line">public <span class="variable">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@ConfigurationProperties</code>  结合 <code>@EnableConfigurationProperties</code> 配置Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span> <span class="comment">// 读取  application.properties 中的配置</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>application.properties</code> 文件中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p><code>@EnableConfigurationProperties</code> 使 <code>@ConfigurationProperties</code> 注解的类注入自身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceBean2.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBeanConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean2 dataSourceBean2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceBeanConfig</span><span class="params">(DataSourceBean2 dataSourceBean2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSourceBean2 = dataSourceBean2;</span><br><span class="line">        log.info(<span class="string">&quot;url: &#123;&#125;&quot;</span>,dataSourceBean2.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring.factories</code> 配置 或者 <code>DataSourceBeanConfig</code> 类 加上 <code>@Configuration</code> 或者 <code>@Component</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.kangpan.model.DataSourceBeanConfig</span><br></pre></td></tr></table></figure>
<p>控制台打印 <code>url</code></p>
<p>自定义 <code>XML</code> 配置 <code>Bean</code>， 在 <code>resource/bean.xml</code> 配置 <code>dataSourceBean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kangpan.model.DataSourceBean&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结合 <code>@ConfigurationProperties</code> 属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 <code>@ImportResource</code> 导入 <code>bean.xml</code> 配置的 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;dataSourceBean.getUrl():&#123;&#125;&quot;</span>,dataSourceBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>项目启动 控制台打印 <code>url</code></p>
<p>自定义 <code>properties</code> 配置 <code>Bean</code>，在 <code>resources/dataSource.properties</code> 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p><code>@PropertySource</code> 加载指定文件的属性， <code>@Value</code> 赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:dataSource.properties&quot;)</span>  </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用  <code>@ConfigurationProperties</code> 属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:dataSource.properties&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourcesBean dataSourcesBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;dataSourcesBean.getUrl():&#123;&#125;&quot;</span>,dataSourcesBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目 打印 <code>url</code></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Aui</title>
    <url>/2021/04/27/Aui/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d3eda469322886be91f9ca4d9a9fc338e71fcff8db249be1e833169e7f13bc9a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Aui</tag>
      </tags>
  </entry>
  <entry>
    <title>I bought a house</title>
    <url>/2021/04/18/Buy-home/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一个特别的日子"><a href="#一个特别的日子" class="headerlink" title="一个特别的日子"></a>一个特别的日子</h3><p>2021年4月18日，一个特别的日子。<br>    周六的时候还在加班，然后下午请假和同事去了 <code>招商一江璟城</code> 看房，总体来说教育和交通这块是没问题，但是我不喜欢那边的环境。看完之后回家，吃完饭，和老婆还有妈妈晚上去了<code>大华锦绣时代</code>，大华设计和布局是很好的，附件就是地铁五号线，对面就是众圆广场，房子南北通透，北面和东面都是隔着很宽的路，没有遮挡物，主卧是朝南。周边配置齐全，教育医疗交通都没问题。经纪人每平方米优惠了700元还送个家电，但是要先认筹，金额是10万，感觉还可以，心中打算买了。我说回家再考虑，如果想好了，明天早上过来交认筹金。<br>    <span id="more"></span><br>    回到家，跟家里人商量了，决定明天就把钱交了。入睡前，心中忐忑，觉得买房真的很累，选自己喜欢的不容易。想想房子以后是什么样子，适不适合我们住。<br>    周天一大早我就醒来了，决定去交认筹金，但是我突然想去另一个楼盘<code>融创临江府</code>看下，因为今年2月份的时候看过一次，当时还打算买那边的，因为资金不够。现在这个楼盘涨了。我看中它的原因是靠近江边，然后三面都有公园，环境很好，适合居住，教育交通资源也有。它的整体设计没有大华的好，但是阳台设计比大华的好点，又长又宽，客厅和主卧相通。去那边看了下样板房还有施工场地，算下价格，比大华便宜点。<br>    对比了大华和融创，我发现融创更适合我们，没多想，参加了他们的认筹活动，交了5万元。他们10点开盘，给参加了认筹活动的用户提供个小程序，到点抢自己喜欢的楼层。<br>    10点了，我的手机直接卡死，选择楼层的按钮根本点不动，我直接回退重新进去，发现好多楼层都抢光了，就第4层也有人抢，心中想这个不吉利的数字楼层应该没人要吧，我选择了第3层 <code>301</code>。<br>    计划买这个楼盘了，要准备 <code>身份证</code> -&gt; <code>户口本</code> -&gt; <code>结婚证</code> -&gt; <code>个人征信</code> -&gt; <code>近半年银行流水</code> -&gt; <code>收入证明</code> -&gt; <code>社保证明</code>。其实这些最好买房前准备。</p>
<ul>
<li><p>社保证明，我是武汉社保，打开<code>http://zwfw.hubei.gov.cn/index.html</code>，国家政府服务平台，区域选择 <code>武汉市</code>，其它不用选，之后选<code>特色服务</code>，选择 <code>（个人）武汉市社会保险公共服务平台</code>。我用的wifi一直进不去，切换手机热点，进去了 <code>http://221.232.64.242:7121/grws/jsp/framework/main.jsp</code>， <code>个人网上业务 -&gt; 社保证明查询打印 -&gt; 武汉市社会保险参保缴费证明（个人专用）查询打印</code>，用IE浏览器;</p>
</li>
<li><p> 近半年银行流水，携带本人二代居民身份证和银行卡到就近对应银行网点办理，待6个月流水账单打印完毕，必须要求盖银行业务公章流水账单才算生效，如果是招商银行的，手机APP可以支持打印；</p>
</li>
<li><p> 个人征信 <code>https://ipcrs.pbccrc.org.cn/</code> 用IE浏览器，如果是招商银行的，APP可以查看个人信用；</p>
</li>
<li><p>收入证明 去公司填电子流走流程审批。</p>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Home</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker run Apache</title>
    <url>/2021/04/14/Docker%20run%20Apache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下载镜像</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; docker pull httpd</span><br><span class="line">Using default <span class="keyword">ta</span><span class="variable">g:</span> latest</span><br><span class="line">lates<span class="variable">t:</span> Pulling from library/httpd</span><br><span class="line"><span class="number">75646</span>c2fb410: Pull <span class="built_in">complete</span></span><br><span class="line">a51c6e95ef2e: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">97251</span>e2deed4: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">83942</span>ffdf87<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line">fcf0f47f7ede: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:<span class="number">31</span>ee85db3ebec898ae4e3e19ceb5c19ce622ea395d7e4844a13a8b1b141b62be</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> httpd:latest</span><br><span class="line">docker.io/library/httpd:latest</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>查看镜像</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">&gt; docker images</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">httpd                              latest              d5995e280a0e       <span class="number"> 8 </span>days ago          138MB</span><br><span class="line">busybox                            latest              a9d583973f65       <span class="number"> 4 </span>weeks ago         1.23MB</span><br><span class="line">hello-world                        latest              d1165f221234       <span class="number"> 4 </span>weeks ago         13.3kB</span><br><span class="line">redis                              latest              bd571e6529f3       <span class="number"> 5 </span>months ago        104MB</span><br><span class="line">hub.c.163.com/lightingfire/nexus   2.13.0-01           95543f26ca31       <span class="number"> 4 </span>years ago         455MB</span><br></pre></td></tr></table></figure>
<p>运行容器，将C盘的<code>docker-data</code>文件 映射容器的 <code>/usr/local/apache2/htdocs/</code> 文件中</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&gt; docker run -it -d -p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> -v <span class="symbol">C:</span>/docker-data/<span class="symbol">:/usr/local/apache2/htdocs/</span> httpd</span><br><span class="line"><span class="number">796299</span>a44475b457c46e3a26b00aec389d2cdd669e0a1d525db79b70bd227903</span><br></pre></td></tr></table></figure>
<p>在本地<code>C:\docker-data</code> 新建<code> index.html</code>，打开<code> index.html</code>文件 编写 <code>hello world</code><br>查看容器<code>/usr/local/apache2/htdocs/</code> 文件，先进入容器，<code>ls</code> 查看文件，可以看到<code>index.html</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&gt; docker exec -it <span class="number">7962</span> bash</span><br><span class="line">root<span class="variable">@796299a44475</span><span class="symbol">:/usr/local/apache2</span><span class="comment"># ls</span></span><br><span class="line">bin  build  cgi-bin  conf  error  htdocs  icons  <span class="keyword">include</span>  logs  modules</span><br><span class="line">root<span class="variable">@796299a44475</span><span class="symbol">:/usr/local/apache2</span><span class="comment"># cd htdocs/</span></span><br><span class="line">root<span class="variable">@796299a44475</span><span class="symbol">:/usr/local/apache2/htdocs</span><span class="comment"># ls</span></span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <a href="http://localhost/">http://localhost:80</a> 查看结果</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2021/04/14/Docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://hub.docker.com/">docker 官方镜像</a><br><a href="https://c.163yun.com/hub#/home">网易云镜像</a></p>
<blockquote>
<p>基本命令</p>
</blockquote>
<p>搜索镜像 docker seach </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&gt; docker search <span class="keyword">busybox</span></span><br><span class="line"><span class="keyword">NAME </span>                     DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line"><span class="keyword">busybox </span>                  <span class="keyword">Busybox </span><span class="keyword">base </span>image.                             <span class="number">2168</span>                [OK]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注：BusyBox 将许多具有共性的小版本的UNIX工具结合到一个单一的可执行文件。这样的集合可以替代大部分常用工具比如的GNU fileutils ， shellutils等工具，BusyBox提供了一个比较完善的环境，可以适用于任何小的嵌入式系统</p>
<span id="more"></span>
<ul>
<li><strong>拉取镜像</strong> docker pull</li>
<li><strong>查看镜像</strong> docker images</li>
<li><strong>删除运行或停止的镜像</strong> docker rmi</li>
<li><strong>运行容器</strong> docker run </li>
<li><strong>查看运行中的容器</strong> docker ps 或者 docker container ls</li>
<li><strong>查看所有容器状态</strong> docker ps -a 或者 docker container ls -a<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">&gt; docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS                    NAMES</span><br><span class="line">dc8b9ba2efb6        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 7 </span>minutes ago       Created                                                tender_chatterjee</span><br><span class="line">cff3358881a2        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 20 </span>minutes ago      Exited (0)<span class="number"> 8 </span>minutes ago                               admiring_vaughan</span><br><span class="line">cc638be418cb        busybox             &quot;sh&quot;                    <span class="number"> 22 </span>minutes ago      Exited (127)<span class="number"> 20 </span>minutes ago                            trusting_yalow</span><br><span class="line">03cd134e1313        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 29 </span>minutes ago      Up<span class="number"> 29 </span>minutes                 0.0.0.0:6379-&gt;6379/tcp   competent_galois</span><br><span class="line">950da22b6340        95543f26ca31        &quot;/bin/sh -c &#x27;$&#123;JAVA_…&quot;  <span class="number"> 2 </span>days ago          Exited (143)<span class="number"> 2 </span>days ago                                nexus</span><br><span class="line">1c648c6719db        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 5 </span>months ago        Exited (0)<span class="number"> 5 </span>months ago                                redis</span><br></pre></td></tr></table></figure></li>
<li><strong>停止容器</strong> docker stop</li>
<li><strong>快速停止容器</strong> docker kill</li>
<li><strong>启动容器</strong> docker start</li>
<li><strong>重启容器</strong> docker restart</li>
<li><strong>暂停容器，容器不占CPU</strong>  docker pause</li>
<li><strong>暂停恢复</strong> docker unpause</li>
<li><strong>删除容器</strong> docker rm 容器短ID1，容器短ID2，可以删除多个</li>
<li><strong>批量删除所有已经退出的容器</strong> <code>docker rm -v $(docker ps -ap -f status=exited)</code></li>
</ul>
<blockquote>
<p>运行容器参数  docker run -d -p 80:8080</p>
</blockquote>
<ul>
<li>-d 后台方式启动容器</li>
<li>-p 80:8080 端口映射</li>
<li>–name 容器命名</li>
<li>–restart 因错误停止或者正常退出将自动重启，docker stop 或者 docker kill 的退出不会自动重启</li>
<li>–restart=always 无论何种原因退出立即重启</li>
<li>–restart=on-failure:3 重启3次</li>
</ul>
<blockquote>
<p>进入/退出 容器</p>
</blockquote>
<ul>
<li>attach 直接进入容器启动命令的终端，不会启动新的进程</li>
<li>exec 在容器中打开新的终端，并且启动新的进程</li>
<li>exit 退出</li>
<li>run -it 容器启动后直接进入<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&gt; docker run -d -it -p <span class="number">6379</span>:<span class="number">6379</span>  redis</span><br><span class="line"><span class="number">03</span>cd134e1313edad3304154282262daa6839bc7bc6f1bed51f3404b09eca3580</span><br><span class="line">docker exec -it <span class="number">03</span>cd bash</span><br><span class="line">root@<span class="number">03</span>cd134e1313:/<span class="comment">#</span></span><br><span class="line">&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&gt; docker run -it redis</span><br><span class="line"><span class="number">1</span>:C <span class="number">07</span> Apr <span class="number">2021</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">07.859</span> # oO0OoO0OoO0Oo Redis <span class="built_in">is</span> starting oO0OoO0OoO0Oo</span><br><span class="line"><span class="number">1</span>:C <span class="number">07</span> Apr <span class="number">2021</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">07.859</span> # Redis version=<span class="number">6.0</span><span class="number">.8</span>, bits=<span class="number">64</span>, commit=<span class="number">00000000</span>, modified=<span class="number">0</span>, pid=<span class="number">1</span>, just started</span><br><span class="line"><span class="number">1</span>:C <span class="number">07</span> Apr <span class="number">2021</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">07.859</span> # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">                <span class="symbol">_</span>.<span class="symbol">_</span></span><br><span class="line">           <span class="symbol">_</span>.-``<span class="symbol">__</span> &#x27;&#x27;-.<span class="symbol">_</span></span><br><span class="line">      <span class="symbol">_</span>.-``    `.  `<span class="symbol">_</span>.  &#x27;&#x27;-.<span class="symbol">_</span>           Redis <span class="number">6.0</span><span class="number">.8</span> (<span class="number">00000000</span>/<span class="number">0</span>) <span class="number">64</span> bit</span><br><span class="line">  .-`` .-```.  ```\/    <span class="symbol">_</span>.,<span class="symbol">_</span> &#x27;&#x27;-.<span class="symbol">_</span></span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running <span class="keyword">in</span> standalone mode</span><br><span class="line"> |`-.<span class="symbol">_</span>`-...-` <span class="symbol">__</span>...-.``-.<span class="symbol">_</span>|&#x27;` <span class="symbol">_</span>.-&#x27;|     Port: <span class="number">6379</span></span><br><span class="line"> |    `-.<span class="symbol">_</span>   `.<span class="symbol">_</span>    /     <span class="symbol">_</span>.-&#x27;    |     PID: <span class="number">1</span></span><br><span class="line">  `-.<span class="symbol">_</span>    `-.<span class="symbol">_</span>  `-./  <span class="symbol">_</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line"> |`-.<span class="symbol">_</span>`-.<span class="symbol">_</span>    `-.<span class="symbol">__</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;|</span><br><span class="line"> |    `-.<span class="symbol">_</span>`-.<span class="symbol">_</span>        <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    |           http://redis.io</span><br><span class="line">  `-.<span class="symbol">_</span>    `-.<span class="symbol">_</span>`-.<span class="symbol">__</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line"> |`-.<span class="symbol">_</span>`-.<span class="symbol">_</span>    `-.<span class="symbol">__</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;|</span><br><span class="line"> |    `-.<span class="symbol">_</span>`-.<span class="symbol">_</span>        <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    |</span><br><span class="line">  `-.<span class="symbol">_</span>    `-.<span class="symbol">_</span>`-.<span class="symbol">__</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line">      `-.<span class="symbol">_</span>    `-.<span class="symbol">__</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line">          `-.<span class="symbol">_</span>        <span class="symbol">_</span>.-&#x27;</span><br><span class="line">              `-.<span class="symbol">__</span>.-&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache Line</title>
    <url>/2021/04/14/Cache-Line/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>缓存行 <code>Cache Line</code>  <code>CPU</code> 高速缓存中分配的最小存储单位。<code>CPU</code> 缓存分为 <code>Cache L1 L2 L3</code> 一级 二级 三级 缓存，查看本机缓存<br><code>pom.xml</code> 引入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">    <span class="section">&lt;groupId&gt;</span><span class="attribute">fr</span>.ujm.tse.lt<span class="number">2</span>c.satin&lt;/groupId&gt;</span><br><span class="line">    <span class="section">&lt;artifactId&gt;</span><span class="attribute">cachesize</span>&lt;/artifactId&gt;</span><br><span class="line">    <span class="section">&lt;version&gt;</span><span class="attribute">0</span>.<span class="number">2</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同处理器的缓存行 <code>L1 L2 L3</code> 高速缓存行字节宽不一样 有 <code>32</code> 字节和 <code>64</code> 字节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CacheInfo info = CacheInfo.getInstance();</span><br><span class="line">CacheLevelInfo cacheLevelInfo = info.getCacheInformation(CacheLevel.L1, CacheType.INSTRUCTION_CACHE);</span><br><span class="line">System.out.println(<span class="string">&quot;L1 Cache info:&quot;</span> + cacheLevelInfo.toString());</span><br></pre></td></tr></table></figure>
<p>缓存行在内存中加载的地址是连续的 假如缓存行是 <code>64</code> 字节 有两个变量 <code>a</code> 和 <code>b</code> ，<code>a</code> + <code>b</code> 不足 64 字节，那么会在同一个缓存行造成伪共享，处理器修改 <code>a</code> 的时候，其他处理器读取 <code>b</code> 的时候该缓存行是失效的( <code>MESI</code> 协议)，其他处理器不得不重新从系统内存中加载。</p>
<span id="more"></span>
<p>处理伪共享 可以采取 <code>padding</code> 方式 ，当字节不足缓存行大小时进行填满  和 <code>Java8</code> 的 <code>@sum.misc.Contended</code> 使两个变量 在不同缓存行中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span> </span>&#123;</span><br><span class="line">     <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">     CounterCell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><code>ConcurrentHashMap</code> 的 <code>CounterCell</code> 上加了 <code>@Contended</code> 注解  解决了 <code>++</code> 操作产生伪共享</p>
<p>看下 <code>padding</code> 实现 , 使 <code>long</code> 变量进行填充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleProducerSequencerPad</span> <span class="keyword">extends</span> <span class="title">RingBufferProducer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// 4*7 = 28 字节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleProducerSequencerFields</span> <span class="keyword">extends</span> <span class="title">SingleProducerSequencerPad</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Set to -1 as sequence starting point */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> nextValue = RingBuffer.Sequence.INITIAL_VALUE; <span class="comment">// 28 + 4 = 32 字节</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> cachedValue = RingBuffer.Sequence.INITIAL_VALUE; <span class="comment">// 32 + 4 = 36 字节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleProducerSequencer</span> <span class="keyword">extends</span> <span class="title">SingleProducerSequencerFields</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// 36 + 28 = 64 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>volatile</code>  也会使处理器缓存回写到内存并且导致其他内存缓存无效，在 <code>64</code> 字节宽的处理器  早期<code>JDK</code>版本采取了追加字节的方式来进行性能优化</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Janor</title>
    <url>/2021/04/17/Jalor/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fa19deb1cbb171af59b8b8723aeb5dc767b314b6348e260f1eb580dce360e2d8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Janor</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 撤销</title>
    <url>/2021/05/08/Git-%E6%92%A4%E9%94%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1f0185481b10ea8060f7165855b81fb42801adf838532b360a4d935402bf85c1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8</title>
    <url>/2021/04/14/Java8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下面举个例子 <code>Java8</code> 新语法实现思路的多种解法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/<span class="strong">**</span></span><br><span class="line"><span class="strong"> <span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> 1. 计数</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Collectors.counting</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> count</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 2. 最值</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.maxBy</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 3. 求和</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.summingInt</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 4. 求平均值</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.averagingInt</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 5. 连接字符串</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.joining</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 6. 一般归约</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.reducing</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 7. 转换</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.toCollection / Collectors.collectingAndThen</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 8. 数值流</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> IntStream、DoubleStream、LongStream</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 9. 映射</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.toMap</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Function.identity()</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> 10. 数据分区</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Collectors.partitioningBy</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> 11. 分组</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Collectors.groupingBy</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Java8</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;People&gt; <span class="keyword">list</span> = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">1</span>L, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">30</span>, <span class="number">12</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">2</span>L, <span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">30</span>, <span class="number">10</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">3</span>L, <span class="string">&quot;刘亦菲&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">20</span>, <span class="number">15</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">4</span>L, <span class="string">&quot;蔡依林&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">5</span>L, <span class="string">&quot;张杰&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">30</span>, <span class="number">20</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">6</span>L, <span class="string">&quot;薛之谦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">28</span>, <span class="number">30</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求集合薪资总和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> example1() &#123;</span><br><span class="line">        <span class="keyword">list</span>.stream<span class="function"><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">reduce</span><span class="params">((s1, s2) -&gt; s1 + s2)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Optional</span>&lt;<span class="title">Double</span>&gt; <span class="title">opDouble</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">collect</span><span class="params">(Collectors.reducing((s1, s2) -&gt; s1 + s2))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">opDouble</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Number</span> <span class="title">number</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.reducing(<span class="number">0</span>,People::getSalary,(s1,s2) -&gt; s1.doubleValue() + s2.doubleValue()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(number.doubleValue())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summingDouble(People::getSalary)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summarizingDouble(People::getSalary)).getSum())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().mapToDouble(People::getSalary).sum())</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 求集合薪资最大 <span class="params">(最小)</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example2</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.maxBy(Comparator.comparing(People::getSalary)))</span>.<span class="title">ifPresent</span><span class="params">(people -&gt; System.out.println(people.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">reduce</span><span class="params">(BinaryOperator.maxBy(Double::compareTo))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">minBy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">reduce</span><span class="params">((s1,s2) -&gt; s1 &gt; s2 ? s1 : s2)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // &lt;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getSalary).reduce(<span class="number">0d</span>,Double::max))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Optional</span>&lt;<span class="title">People</span>&gt;&gt; <span class="title">mapOp</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.reducing((p1,p2) -&gt; p1.getSalary() &gt; p2.getSalary() ? p1 : p2)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">mapOp</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">ifPresent</span><span class="params">(people -&gt; System.out.println(people.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">collect</span><span class="params">(Collectors.reducing((s1,s2) -&gt; s1 &gt; s2 ? s1 : s2))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">max</span><span class="params">(Comparator.comparing(People::getSalary,Double::compare))</span>.<span class="title">ifPresent</span><span class="params">(p -&gt; System.out.println(p.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">max</span><span class="params">(Comparator.comparing(People::getSalary))</span>.<span class="title">ifPresent</span><span class="params">(p -&gt; System.out.println(p.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">max</span><span class="params">(Double::compareTo)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">min</span></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summarizingDouble(People::getSalary)).getMax())</span>; //<span class="title">getMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.comparing(People::getSalary).reversed())</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">reversed</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">sorted</span><span class="params">(Comparator.reverseOrder())</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">Comparator</span>.<span class="title">naturalOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">sorted</span><span class="params">(Comparator.comparingDouble(Double::doubleValue).reversed())</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">List</span>&lt;<span class="title">Double</span>&gt; <span class="title">doubles</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">(Objects::nonNull)</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">collect</span><span class="params">(Collectors.toList())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Collections</span>.<span class="title">sort</span><span class="params">(doubles, Double::compareTo)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(doubles.get(doubles.size() - <span class="number">1</span>))</span>; // <span class="title">get</span><span class="params">(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">Collections</span>.<span class="title">reverse</span><span class="params">(doubles)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">doubles</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">People</span>&gt; <span class="title">map</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.comparing(People::getSalary, Double::compareTo))</span></span></span><br><span class="line"><span class="function">                .<span class="title">collect</span><span class="params">(Collectors.toMap(People::getSex, <span class="built_in">Function</span>.identity(), (p1, p2) -&gt; p2))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">double</span> <span class="title">d</span> = <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span> &gt;  <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;女&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span> ? <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span> : <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;女&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(d)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">mapToDouble</span><span class="params">(People::getSalary)</span>.<span class="title">max</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().mapToDouble(People::getSalary).max().getAsDouble())</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Optional</span>&lt;<span class="title">Integer</span>&gt;&gt; <span class="title">collect</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.mapping(People::getAge, Collectors.maxBy(Comparator.comparing(<span class="built_in">Function</span>.identity())))))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">collect</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 男生数量 女生数量</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example3</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.counting()))</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).count())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).collect(Collectors.counting()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).collect(Collectors.reducing(<span class="number">0</span>L, e -&gt; <span class="number">1</span>L, Long::sum)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).collect(Collectors.toList()).size())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().collect(Collectors.groupingBy(People::getSex)).get(<span class="string">&quot;男&quot;</span>).size())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">long</span> <span class="title">count</span>= <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.collectingAndThen(Collectors.groupingBy(People::getSex),<span class="keyword">map</span> -&gt; <span class="keyword">map</span>.get(<span class="string">&quot;男&quot;</span>).stream().count()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(count)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 平均</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example4</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">double</span> <span class="title">avg</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.averagingDouble(People::getSalary))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(avg)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summarizingDouble(People::getSalary)).getAverage())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getSalary).reduce((s1,s2) -&gt; s1 + s2).flatMap(sum -&gt; Optional.<span class="keyword">of</span>(sum / <span class="keyword">list</span>.size())).get())</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 排序处理<span class="title">null</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example5</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">add</span><span class="params">(<span class="literal">null</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">sort</span><span class="params">(Comparator.nullsFirst(Comparator.comparing(People::getSalary)))</span>; // <span class="title">null</span> 数据排前面</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">sort</span><span class="params">(Comparator.nullsLast(Comparator.comparing(People::getSalary)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">CopyOnWriteArrayList</span> <span class="title">list2</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.nullsLast(Comparator.comparing(People::getSalary)))</span>.<span class="title">collect</span><span class="params">(Collectors.toCollection(CopyOnWriteArrayList::<span class="keyword">new</span>))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list2</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Collections</span>.<span class="title">sort</span><span class="params">(<span class="keyword">list</span>,Comparator.nullsFirst(Comparator.comparing(People::getSalary)))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 分组</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example6</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">Map</span>&lt;<span class="title">Integer</span>, <span class="title">List</span>&lt;<span class="title">People</span>&gt;&gt;&gt; <span class="title">map</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.partitioningBy(p -&gt; p.getSex().equals(<span class="string">&quot;男&quot;</span>), Collectors.groupingBy(People::getAge)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="literal">true</span>)</span>.<span class="title">get</span><span class="params">(<span class="number">30</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 30岁男生集合</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="literal">false</span>)</span>.<span class="title">get</span><span class="params">(<span class="number">20</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 20岁女生集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Map</span>&lt;<span class="title">Integer</span>, <span class="title">List</span>&lt;<span class="title">People</span>&gt;&gt;&gt; <span class="title">map1</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.groupingBy(People::getSex, Collectors.groupingBy(People::getAge)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map1</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">get</span><span class="params">(<span class="number">30</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 30岁男生集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">People</span>&gt; <span class="title">map2</span> =</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.collectingAndThen(Collectors.maxBy(Comparator.comparing(People::getSalary)),Optional::get)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(map2.get(<span class="string">&quot;男&quot;</span>))</span>; // 按照性别筛选工资最高的男生</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 按照性别筛选工资最高的男生</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().sorted(Comparator.comparing(People::getSalary)).collect(Collectors.toMap(People::getSex,<span class="built_in">Function</span>.identity(),(p1,p2) -&gt; p2)).get(<span class="string">&quot;男&quot;</span>))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Set</span>&lt;<span class="title">Integer</span>&gt;&gt; <span class="title">map3</span> =</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.mapping(People::getAge,Collectors.toSet())))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map3</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 按照性别筛选有哪些年龄</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>))</span>.<span class="title">map</span><span class="params">(People::getAge)</span>.<span class="title">collect</span><span class="params">(Collectors.toSet())</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 按照性别筛选有哪些年龄</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 按照年龄筛选分别对应有哪些人</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.toMap(People::getAge,People::getName,<span class="built_in">String</span>::concat))</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.toMap(People::getAge,People::getName,(name1,name2) -&gt; name1 + <span class="string">&quot;,&quot;</span> + name2))</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">Integer</span>,<span class="title">String</span>&gt; <span class="title">map4</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getAge,</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.reducing(<span class="string">&quot;&quot;</span>,People::getName,(name1, name2) -&gt; name1.length() == <span class="number">0</span> ? name2 : name1 + <span class="string">&quot;,&quot;</span> + name2)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(map4.get(<span class="number">30</span>))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 集合名字最长</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(p -&gt; p.getName().length()).reduce(<span class="number">0</span>,Integer::max))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getName)</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(<span class="built_in">String</span>::length,Collectors.counting()))</span>.<span class="title">forEach</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                (k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v)</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span>; // 根据名字长度分组</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * <span class="title">flatMap</span><span class="params">(Optional/Stream)</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example7</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getName)</span>.<span class="title">flatMap</span><span class="params">(str -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;<span class="built_in">String</span>&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="built_in">String</span> temp = <span class="built_in">String</span>.valueOf(str.charAt(i));</span></span></span><br><span class="line"><span class="function"><span class="params">                stringList.add(temp);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> stringList.stream();</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;)</span>.<span class="title">distinct</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.toList())</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">double</span> <span class="title">d</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">(people -&gt; people.getName().equals(<span class="string">&quot;张杰&quot;</span>))</span>.<span class="title">mapToDouble</span><span class="params">(People::getSalary)</span>.<span class="title">sum</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(Optional.ofNullable(d).flatMap(e -&gt; Optional.<span class="keyword">of</span>(e + <span class="number">5</span>)).flatMap(e -&gt; Optional.<span class="keyword">of</span>(e - <span class="number">2</span>)).get())</span>; // 张杰的薪资涨5后又减2</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 字符串处理</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example8</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">       // <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.comparing(People::getAge).reversed().thenComparing(People::getSalary))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Collector</span>&lt;<span class="title">People</span>,<span class="title">StringJoiner</span>,<span class="title">String</span>&gt; <span class="title">collector</span> = <span class="title">Collector</span>.<span class="title">of</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                () -&gt; <span class="keyword">new</span> StringJoiner(<span class="string">&quot;,&quot;</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">                (stringJoiner,people) -&gt; stringJoiner.add(people.getName()),</span></span></span><br><span class="line"><span class="function"><span class="params">                StringJoiner::merge,</span></span></span><br><span class="line"><span class="function"><span class="params">                StringJoiner::toString</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(collector))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">StringJoiner</span> <span class="title">field</span> = <span class="title">new</span> <span class="title">StringJoiner</span><span class="params">(<span class="string">&quot;,&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getName)</span>.<span class="title">forEach</span><span class="params">(field::add)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(field.toString())</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getName).reduce((name1,name2) -&gt; name1.concat(<span class="string">&quot;,&quot;</span>).concat(name2)).orElse(<span class="string">&quot;&quot;</span>))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>List-String-Map</title>
    <url>/2021/04/24/List-String-Map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>日常工作中经常和 集合、数组、Map、字符串互相转换 打交道，这里记录一些  <a href="https://github.com/google/guava/wiki">Guava</a> 的用法。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1331819951&auto=1&height=66"></iframe>

<span id="more"></span>
<p>使用 <code>StringBuilder</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * listToStringByStringBuilder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分隔的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delimiter 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToStringByStringBuilder</span><span class="params">(List&lt;String&gt; list, String delimiter)</span> </span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    list.forEach(element -&gt; stringBuilder.append(element).append(delimiter));</span><br><span class="line">    stringBuilder.delete(stringBuilder.length()- delimiter.length(),stringBuilder.length()); <span class="comment">// delete(start, end);</span></span><br><span class="line">    <span class="keyword">return</span>  stringBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Collectors.joining</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * listToStringByCollectorsJoining</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分隔的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delimiter 分隔符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 前缀符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> suffix 后缀符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToStringByCollectorsJoining</span><span class="params">(List&lt;String&gt; list, String delimiter, String prefix, String suffix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream().collect(Collectors.joining(delimiter, prefix, suffix ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>StringJoiner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * listToStringByStringJoiner</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> list 分隔的集合</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> prefix 前缀符号</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> suffix 后缀符号</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToStringByStringJoiner</span><span class="params">(List&lt;String&gt; list, String separator, String prefix, String suffix)</span> </span>&#123;</span><br><span class="line">     StringJoiner stringJoiner = <span class="keyword">new</span> StringJoiner(separator,prefix,suffix);</span><br><span class="line">     list.forEach(element -&gt; stringJoiner.add(element));</span><br><span class="line">     <span class="keyword">return</span>  stringJoiner.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Joiner</code> ， <code>String.join()</code> 方法 也可以对集合或者数组进行分隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arrayToString</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parts 分隔的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> skipNull 是否跳过NULL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> useForNull 是否替换NULL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nullText 替换NULL的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(Object[] parts,String separator,<span class="keyword">boolean</span> skipNull,<span class="keyword">boolean</span> useForNull,String nullText)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (skipNull) &#123;</span><br><span class="line">        <span class="keyword">return</span> Joiner.on(separator).skipNulls().join(parts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (useForNull) &#123;</span><br><span class="line">        <span class="keyword">return</span> Joiner.on(separator).useForNull(nullText).join(parts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Joiner.on(separator).join(parts); <span class="comment">//   String.join() 也可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>keyValueSeparator</code> 为 <code>map</code> 中 <code>key</code> 和 <code>value</code> 的分隔符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mapToString</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 分隔的map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyValueSeparator 键值对分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mapToString</span><span class="params">(Map map, String separator, String keyValueSeparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Joiner.on(separator).withKeyValueSeparator(keyValueSeparator).join(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>aabbcc</code> ，按照长度为2，会分隔元素为 <code>[aa] [bb] [cc]</code> 的集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * stringToFixedLengthList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串 String 实现 CharSequence 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 分隔的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt; 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">stringToFixedLengthList</span><span class="params">(CharSequence sequence, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    Iterable&lt;String&gt; iterable =  Splitter.fixedLength(length).split(sequence);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;String&gt; iterator = iterable.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">        list.add(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串转集合，方法有很多种。这里举两个，说明： <code>trimResults()</code> 去掉元素左右空字符串，<code>omitEmptyStrings</code> 去掉分隔符号之间的空元素。举个例子：<br><code>&quot; k ;;p&quot;</code> ，<code>trimResults</code>之后得到 <code>[k] [空] [p]</code> 三个元素，加上 <code>omitEmptyStrings </code> 会去除空元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * stringSplitToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt; 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">stringSplitToList</span><span class="params">(String separator,CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    Iterable&lt;String&gt; iterable = Splitter.on(separator).trimResults().omitEmptyStrings().split(sequence);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Iterator&lt;String&gt; iterator = iterable.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        list.add(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Splitter.on(separator).trimResults().omitEmptyStrings().splitToList(sequence);</span><br><span class="line">    <span class="comment">// return list;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>java8</code> 新特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">StringToList</span><span class="params">(String separator, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(str.split(separator)).filter(e -&gt; !e.isEmpty()).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// return Splitter.on(separator).trimResults().splitToList(str);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>a,b,c,d,e,f,g</code> 限制长度为3，得到集合元素为 <code>[a] [b] [c,d,e,f,g]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * limitSplitToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分割符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 限制长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt; 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">limitSplitToList</span><span class="params">(String separator, <span class="keyword">int</span> length, CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Splitter.on(separator).limit(length).splitToList(sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>a,b:c,d;e</code> 有不同分隔符， 逗号、 冒号、 分号等，利用正则表达式 <code>[,|:|;]</code> 分隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * multiLimitSplitToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separatorPattern 多个分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">multiLimitSplitToList</span><span class="params">(String separatorPattern, CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Splitter.onPattern(separatorPattern).splitToList(sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>name=kangPan;age=10;six=boy</code> 最后不能带分隔符，否则报错。分隔符是分号，键值对分隔符是等号，会拆分<br><code>key是name,value是kangPan</code>等键值对的<code>map</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringToMap</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> withKeyValueSeparator 键值对分割符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Map 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">StringToMap</span><span class="params">(String separator,String withKeyValueSeparator, CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Splitter.on(separator).withKeyValueSeparator(withKeyValueSeparator).split(sequence);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/2021/04/14/Lombok/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Data</td>
<td align="left">用在类上，提供<code>Getter、Setter、equals、hasCode、toString</code> 、构造方法（参数：<code>@NonNull和final字段</code>）</td>
</tr>
<tr>
<td align="left">@AllArgsConstructor</td>
<td align="left">用在类上，提供全参数构造方法</td>
</tr>
<tr>
<td align="left">@NoArgsConstructor</td>
<td align="left">用在类上，提供无参构造方法</td>
</tr>
<tr>
<td align="left">@RequiredArgsConstructor</td>
<td align="left">用在类上，提供构造方法（参数：<code>@NonNull和final字段</code>）</td>
</tr>
<tr>
<td align="left">@Value</td>
<td align="left">用在类上，提供 <code>get、equals、hashCode、toString</code>、全参数构造方法</td>
</tr>
<tr>
<td align="left">@EqualsAndHashCode</td>
<td align="left">用在类上，提供<code>equals、hasCode</code>方法，继承父类使用 <code>@EqualsAndHashCode(callSuper = true)</code></td>
</tr>
<tr>
<td align="left">@NonNull</td>
<td align="left">用在字段上，提供无参构造方法，为空则抛出<code>NullPointerException</code></td>
</tr>
<tr>
<td align="left">@Cleanup</td>
<td align="left">用在字段上，释放资源，<code>try&#123;&#125;finally&#123;&#125;</code></td>
</tr>
<tr>
<td align="left">@SneakyThrows</td>
<td align="left">用在类上，捕获异常，指定异常<code>@SneakyThrows(Exception.class)</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<blockquote>
<p>注解 <code>@Getter @Setter</code>，<code>@Getter</code> 支持懒加载 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Getter &#123;</span><br><span class="line">	lombok.<span class="function">AccessLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> lombok.AccessLevel.PUBLIC</span>;</span><br><span class="line">	AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">lazy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Setter &#123;</span><br><span class="line">	lombok.<span class="function">AccessLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> lombok.AccessLevel.PUBLIC</span>;</span><br><span class="line">	AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	AnyAnnotation[] onParam() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">AccessLevel</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PUBLIC</td>
<td align="left">生成 <code>public</code> 修饰的 <code>getter    setter</code> 方法</td>
</tr>
<tr>
<td align="left">MODULE</td>
<td align="left">生成没有修饰符修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PROTECTED</td>
<td align="left">生成 <code>protected</code> 修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PACKAGE</td>
<td align="left">生成没有修饰符修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PRIVATE</td>
<td align="left">生成 <code>private</code> 修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">NONE</td>
<td align="left">不生成 <code>getter  setter</code> 方法</td>
</tr>
</tbody></table>
<blockquote>
<p>注解  <code>@EqualsAndHashCode</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EqualsAndHashCode &#123;</span><br><span class="line">	String[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	String[] of() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">callSuper</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">doNotUseGetters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">exclude</td>
<td align="left">在生成的 <code>equals</code> 和 <code>hashCode</code> 方法中排除的字段</td>
</tr>
<tr>
<td align="left">of</td>
<td align="left">在生成的 <code>equals</code> 和 <code>hashCode</code> 方法中列出的字段</td>
</tr>
<tr>
<td align="left">callSuper</td>
<td align="left">属性设置为 <code>true</code>，表示父类的 <code>equals</code> 和 <code>hashCode</code> 参与计算，默认为 <code>false</code></td>
</tr>
<tr>
<td align="left">doNotUseGetters</td>
<td align="left">通常都是通过字段的 <code>getter</code> 方法获取字段值，设置为 <code>true</code>，表示不通过 <code>getter</code> 方法获取，而是直接访问字段值，默认为 <code>false</code></td>
</tr>
</tbody></table>
<blockquote>
<p>注解 <code>@Accessors</code> ，配合 <code>@Setter、@Getter 、@Data </code>注解，用在类上和字段上</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fluent</td>
<td align="left">默认为 <code>false</code>，如果为 <code>true</code> 则生成的 <code>getter/setter</code> 方法没有 <code>set/get</code> 前缀，如果为 <code>true</code>, <code>chain</code> 未设置，则 <code>chain</code> 会被设置为 <code>true</code></td>
</tr>
<tr>
<td align="left">chain</td>
<td align="left">默认为 <code>false</code>， <code>setter</code> 方法返回是 <code>void</code>，如果为 <code>true</code> 则返回<code> this</code>，当 <code>fluent</code> 为 <code>true</code> 时，<code>chain</code> 会设置为 <code>true</code></td>
</tr>
<tr>
<td align="left">prefix</td>
<td align="left"><code>getter    setter </code>方法时会去掉指定的前缀</td>
</tr>
</tbody></table>
<blockquote>
<p>注解 <code>Log</code></p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@CommonsLog</td>
<td align="left"><code>org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@JBossLog</td>
<td align="left"><code>org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Log</td>
<td align="left"><code>java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName())</code></td>
</tr>
<tr>
<td align="left">@Log4j</td>
<td align="left"><code>org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Log4j2</td>
<td align="left"><code>org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Slf4j</td>
<td align="left"><code>org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@XSlf4j</td>
<td align="left"><code>org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class)</code></td>
</tr>
</tbody></table>
<p>详情见 <a href="https://blog.csdn.net/wb1046329430/article/details/106105767/">使用 Lombok 进行 Java 开发</a><br>使用 <code>@Data</code> 会遇到什么坑，看下 <code>Mybatis</code> 的 <code>PropertyNamer</code> 类 ，<code>methodToProperty</code> 方法转属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">methodToProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// is开头的一般是bool类型，直接从第二个(索引)开始截取</span></span><br><span class="line">  <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;is&quot;</span>)) &#123;</span><br><span class="line">    name = name.substring(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// set get的就从第三个(索引)开始截取</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;get&quot;</span>) || name.startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">    name = name.substring(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isTrue;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line">    <span class="keyword">private</span> Boolean isFalse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.getMName(); <span class="comment">// mName 属性的 get 方法</span></span><br><span class="line">        test.isTrue(); <span class="comment">// isTrue 属性的  get 方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;getMName&quot;</span>)); <span class="comment">// 打印 MName 属性 (错误)</span></span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;isTrue&quot;</span>)); <span class="comment">// 打印 true 属性 (错误)</span></span><br><span class="line"></span><br><span class="line">        test.getIsFalse();</span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;getIsFalse&quot;</span>)); <span class="comment">// 打印 isFalse 属性  (正确)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出 <code>Mybatis</code> 把 <code>@Data</code> 生成的方法转属性之后，跟原属性对不上，所以使用的时候， <code>boolean</code> 类型 不要 <code>is加大写字母</code>命名，其它基本类型属性不要 <code>第一个字母小写 第二个字母大写</code> 命名<br>如果类实现 <code>Serializable</code>接口，  <code>boolean</code> 类型的字段命令为  <code>isTrue</code> 的会有问题 ，字段序列号后是 <code>true</code></p>
<p>如果要 <code>Builder</code> 链式调用父类的字段 ，父类和子类都要加 <code>@SuperBuilder</code><br> <code>Coffee.builder().name(&quot;name&quot;).id(100L).build();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;name can not be null&quot;)</span> <span class="comment">//只能作用在 String 上,不能为null, 而且调用trim()后, 长度必须大于0</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua limit</title>
    <url>/2021/04/14/Lua-limit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Lua 是一种轻量小巧的脚本语言，定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Limit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名为key</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间，单位秒</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">period</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限制访问次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>限流切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LimitAspect</span><span class="params">(RedisTemplate&lt;Object, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置String key 和value序列化模式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.kangpan.annotation.Limit)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line">        Limit limit = method.getAnnotation(Limit.class);</span><br><span class="line">        String key = limit.key();</span><br><span class="line">        ImmutableList&lt;Object&gt; keys = ImmutableList.of(key);</span><br><span class="line">        String lua = <span class="string">&quot;local num&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n local key_local = redis.call(&#x27;setnx&#x27;,KEYS[1],0)&quot;</span> <span class="comment">// KEY存在不做任何事情 不存在赋值为0</span></span><br><span class="line">                + <span class="string">&quot;\n if (tonumber(key_local) == 1)&quot;</span> <span class="comment">// ==0 表示KEY存在 没有赋值  ==1 表示KEY不存在 赋值0了</span></span><br><span class="line">                + <span class="string">&quot;\n then&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n redis.call(&#x27;incr&#x27;,KEYS[1])&quot;</span> <span class="comment">// 存储在key中的数字值加1 如果key不存在 key的值先被设置为0 然后再执行加1操作</span></span><br><span class="line">                    + <span class="string">&quot;\n num = redis.call(&#x27;get&#x27;,KEYS[1])&quot;</span> <span class="comment">// 得到Key的值</span></span><br><span class="line">                        + <span class="string">&quot;\n if (tonumber(num) == 1)&quot;</span> <span class="comment">// 第一次赋值</span></span><br><span class="line">                        + <span class="string">&quot;\n then&quot;</span></span><br><span class="line">                            + <span class="string">&quot;\n redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2])&quot;</span> <span class="comment">// 设置有效时间</span></span><br><span class="line">                        + <span class="string">&quot;\n end&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n return tonumber(num);&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n else&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n redis.call(&#x27;incr&#x27;,KEYS[1])&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n num = redis.call(&#x27;get&#x27;,KEYS[1])&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n return tonumber(num);&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n end&quot;</span>;</span><br><span class="line"></span><br><span class="line">        RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(lua, Number.class);</span><br><span class="line">        Number number = redisTemplate.execute(redisScript, keys, limit.count(), limit.period());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != number &amp;&amp; number.intValue() &lt;= limit.count()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;方法&#123;&#125;: 第&#123;&#125;次访问 有效时间为 &#123;&#125;&quot;</span>, limit.key(), number, redisTemplate.getExpire(limit.key()));</span><br><span class="line">            <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&quot;访问次数受限制&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BadRequestException</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadRequestException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( message );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( message, cause );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( cause );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>捕获 <code>BadRequestException</code> 处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.kangpan.controller&quot;)</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ValidationException.class, BadRequestException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.builder().time(LocalDateTime.now()).message(e.getMessage()).status(HttpStatus.BAD_REQUEST.value()).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义 <code>ResponseEntity</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy:MM:dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用 <code>controller</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/limitBuy&quot;)</span></span><br><span class="line"><span class="meta">@Limit(key = &quot;limitBuy&quot;, count = 10, period = 60)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;限次数购买&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">limitBuy</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">    orderService.save(order);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.builder().message(<span class="string">&quot;buy success&quot;</span>).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MultiValueMap</title>
    <url>/2021/04/14/MultiValueMap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>org.springframework.util</code> 包下的 <code>MultiValueMap</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, <span class="meta">@Nullable</span> V value)</span></span>;</span><br></pre></td></tr></table></figure>

<p>看下 <code>LinkedMultiValueMap</code> 实现</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, <span class="meta">@Nullable</span> V value)</span> </span>&#123;</span><br><span class="line">	List&lt;V&gt; values = <span class="keyword">this</span>.targetMap.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">	values.add(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>targetMap</code> 在 <code>LinkedMultiValueMap</code> 构造方法的时候初始化了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, List&lt;V&gt;&gt; targetMap;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedMultiValueMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.targetMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>介绍下 <code>computeIfAbsent</code>  当<code>get(key)</code> 是 <code>null</code> 的时候 我们 <code>put</code> 新的 <code>value</code>  如果不是 那么直接返回 <code>get(key)</code> 也就是 <code>LinkedList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">computeIfAbsent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">         Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>&#123;</span><br><span class="line">     Objects.requireNonNull(mappingFunction);</span><br><span class="line">     V v;</span><br><span class="line">     <span class="keyword">if</span> ((v = get(key)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">         V newValue;</span><br><span class="line">         <span class="keyword">if</span> ((newValue = mappingFunction.apply(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             put(key, newValue);</span><br><span class="line">             <span class="keyword">return</span> newValue;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MultiValueMap&lt;String,String&gt; map = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">map.add(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.add(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>map</code> 对应的 <code>key</code> 是 <code>k</code>，  对应的 <code>value</code> 是一个 <code>LinkedList</code> ，里面元素有 <code>1</code> 和 <code>2</code></p>
<p><code>MultiValueMap</code> 应用在 <code>SpringFactoriesLoader</code> 这个类检索 <code>META-INF/spring.factories</code> 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">	MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">	<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">				classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">				ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">		result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">		<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">			URL url = urls.nextElement();</span><br><span class="line">			UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">			Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">			<span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">				String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line">				<span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">					result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cache.put(classLoader, result);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">				FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Qualifier之Bean的名称首字母大写还是小写？</title>
    <url>/2021/05/06/Qualifier/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Thus “FooBah” becomes “fooBah” and “X” becomes “x”, but “URL” stays  as “URL”.<br>如果一个类名是以两个大写字母开头的，则首字母不变，其它情况下默认首字母变成小写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Utility method to take a string and convert it to normal Java variable</span></span><br><span class="line"><span class="comment"> * name capitalization.  This normally means converting the first</span></span><br><span class="line"><span class="comment"> * character from upper case to lower case, but in the (unusual) special</span></span><br><span class="line"><span class="comment"> * case when there is more than one character and both the first and</span></span><br><span class="line"><span class="comment"> * second characters are upper case, we leave it alone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Thus &quot;FooBah&quot; becomes &quot;fooBah&quot; and &quot;X&quot; becomes &quot;x&quot;, but &quot;URL&quot; stays</span></span><br><span class="line"><span class="comment"> * as &quot;URL&quot;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  name The string to be decapitalized.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The decapitalized version of the string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decapitalize</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name.length() &gt; <span class="number">1</span> &amp;&amp; Character.isUpperCase(name.charAt(<span class="number">1</span>)) &amp;&amp;</span><br><span class="line">                    Character.isUpperCase(name.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> chars[] = name.toCharArray();</span><br><span class="line">    chars[<span class="number">0</span>] = Character.toLowerCase(chars[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis + Lua</title>
    <url>/2021/04/14/Redis-+-Lua/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建一个 <code>springboot</code> 的项目，引入  <code>spring-boot-starter-parent</code>父组件，<code> spring-boot-starter-web</code>组件， <code>lombok</code>组件，<code>jedis</code>客户端组件   ，谷歌的<code>guava</code> 组件</p>
<span id="more"></span>
<p>创建 <code>Runners</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runners</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        String lua = <span class="string">&quot;return ARGV[1]&quot;</span>; <span class="comment">// lua 脚本</span></span><br><span class="line">        String result = (String)jedis.eval(lua,<span class="number">0</span>,<span class="string">&quot;100&quot;</span>); <span class="comment">// 0个key 值100</span></span><br><span class="line">        log.info(<span class="string">&quot;result:&#123;&#125;&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 <code>result</code> 打印 <code>100</code><br>命令格式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">EVAL lua脚本 numkeys key <span class="selector-attr">[key ...]</span> arg <span class="selector-attr">[arg ...]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>numkeys</code> 指 key 的数量</li>
<li><code>key [key ...]</code>，键，多个，在<code>lua</code>脚本中通过<code>KEYS[1], KEYS[2]</code>获取</li>
<li><code>arg [arg ...]</code>，值，多个，在<code>lua</code>脚本中通过<code>ARGV[1], ARGV[2]</code>获取</li>
</ul>
<p><code>ScriptingCommands</code> 类 <code>jedis</code> 对 <code>lua</code> 命令的支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScriptingCommands</span> </span>&#123;</span><br><span class="line">  <span class="function">Object <span class="title">eval</span><span class="params">(String script, <span class="keyword">int</span> keyCount, String... params)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">eval</span><span class="params">(String script, List&lt;String&gt; keys, List&lt;String&gt; args)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">eval</span><span class="params">(String script)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1, List&lt;String&gt; keys, List&lt;String&gt; args)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1, <span class="keyword">int</span> keyCount, String... params)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Boolean <span class="title">scriptExists</span><span class="params">(String sha1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Boolean&gt; <span class="title">scriptExists</span><span class="params">(String... sha1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">scriptLoad</span><span class="params">(String script)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Runners</code> 类改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">String lua = <span class="string">&quot;redis.call(&#x27;set&#x27;, KEYS[1], ARGV[1])&quot;</span>;</span><br><span class="line">List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">keys.add(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">values.add(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">jedis.eval(lua,keys,values);</span><br></pre></td></tr></table></figure>
<p>打开 <code>redis</code> 客户端 </p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>
<p>或者 修改</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> lua = <span class="string">&quot;local str = redis.call(&#x27;get&#x27;, KEYS[1]);return str&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">String</span> result = (<span class="built_in">String</span>) jedis.<span class="built_in">eval</span>(lua,keys,values)<span class="comment">;</span></span><br><span class="line"><span class="built_in">log</span>.info(result)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>控制台打印 <code>100</code><br>使用 <code>Spring Data Redis</code> 组件，支持的客户端 <code>Jedis / Lettuce</code>，配置 <code>RedisTemplate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(RedisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认情况下的模板只能支持RedisTemplate&lt;String, String&gt;，也就是只能存入字符串，因此支持序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runners</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String lua = <span class="string">&quot;redis.call(&#x27;EXPIRE&#x27;, KEYS[1], ARGV[2]);&quot;</span>; <span class="comment">// 这里使用的是第二个参数30， 101未用到</span></span><br><span class="line">        ImmutableList&lt;Object&gt; keys = ImmutableList.of(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(lua, Number.class);</span><br><span class="line">        redisTemplate.execute(redisScript,keys,<span class="string">&quot;101&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>key</code> 有效时间为 <code>30</code> 秒，<code>30</code> 秒之后查询 <code>nil</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<p>redis 可视化客户端 <code>https://github.com/qishibo/AnotherRedisDesktopManager</code>，查看有效时间<code>30</code>秒递减<br>更改 <code>Runners</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String lua = <span class="string">&quot; redis.call(&#x27;INCR&#x27;,KEYS[1]);&quot;</span>;</span><br><span class="line">ImmutableList&lt;Object&gt; keys = ImmutableList.of(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(lua, Number.class);</span><br><span class="line">redisTemplate.execute(redisScript,keys,<span class="string">&quot;100&quot;</span>,<span class="number">120</span>);</span><br></pre></td></tr></table></figure>
<p>执行命令，值增加 <code>1</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;101&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt;</span><br></pre></td></tr></table></figure>
<p>以上例子涉及 <code>redis</code> 四个命令 <code>SET</code>，<code>GET</code>， <code>EXPIRE</code>， <code>INCR</code></p>
<blockquote>
<p><code>INCR</code>    对存储在指定 <code>key</code>的数值执行原子的加<code>1</code>操作<br>如果指定的<code>key</code>不存在，那么在执行<code>incr</code>操作之前，会先将它的值设定为<code>0</code></p>
</blockquote>
<blockquote>
<p><code>EXPIRE</code> 设置<code>key</code>的过期时间，超过时间后，将会自动删除该<code>key</code></p>
</blockquote>
<p>查看其它命令 <code>http://www.redis.cn/commands.html</code><br>详细<code>lua</code>学习 <code>https://github.com/52fhy/lua-book</code></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus</title>
    <url>/2021/04/14/Nexus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>nexus repository manager</code> ，<code>nexus </code>的 仓库管理<br><a href="https://repo.eclipse.org/#welcome">图片链接</a></p>
<p>使用 <code>nexus </code> 构建 <code>Maven</code> 私服，可以代理远程仓库和部署自己或第三方构件<br>gitHub 地址 <a href="https://github.com/sonatype/nexus/releases">https://github.com/sonatype/nexus/releases</a><br>官方地址 <a href="https://www.sonatype.com/">https://www.sonatype.com/</a></p>
<p>选择 <code>nexus repository</code> 查看 <code>repository</code> 构建架构<br>填写基本信息，邮件会收到验证信息，点击邮件内容的链接验证</p>
<span id="more"></span>
<p>点击 <code>Download: Nexus Repository</code> 下载，下载之后解压，有两个文件夹，<code>nexus-3.30.0-01</code>文件夹 是 <code>web</code> 服务器 ，<code> sonatype-work</code> 文件夹是私有仓库的目录，新建一个文件夹 <code>nexus </code> ，把这两个文件夹移动里面，进入  <code>\nexus\nexus-3.30.0-01\bin</code> 打开 <code>CMD</code> 窗口，运行 <code>nexus /run</code></p>
<p>运行完后 打开 <code>http://localhost:8081/</code></p>
<p><code>Browse</code> 默认生成的仓库，</p>
<table>
<thead>
<tr>
<th>type</th>
<th>介绍</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>proxy</td>
<td>代理仓库</td>
<td>中央仓库的私有仓库</td>
</tr>
<tr>
<td>hosted</td>
<td>本地开发的项目</td>
<td>releases 稳定版本仓库，snapshots 快照版本仓库</td>
</tr>
</tbody></table>
<p>点击右上角登录，复制 <code>admin.password</code> 的默认密码，默认账号是 <code>admin</code>，登录之后创建代理仓库<br>选择 <code>maven2 （proxy）</code></p>
<p><code>Version policy</code> 有三个选项 </p>
<table>
<thead>
<tr>
<th>type</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Mixed</td>
<td>混合</td>
</tr>
<tr>
<td>Release</td>
<td>发布</td>
</tr>
<tr>
<td>Snapshot</td>
<td>快照</td>
</tr>
</tbody></table>
<p><code>Layout policy</code> 有二个选项 </p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Strict</td>
<td>严格模式</td>
</tr>
<tr>
<td>Permissive</td>
<td>授权模式</td>
</tr>
</tbody></table>
<p><code>Remote storage</code> 填写 远程镜像仓库，<code>https://maven.aliyun.com/nexus/content/groups/public/</code>，<a href="https://maven.aliyun.com/mvn/guide">阿里云Maven</a><br>创建成功看到状态为在线等待连接<br>接下来创建发布仓库和快照仓库<br><code>Deployment policy</code> 有三个选项 </p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Allow redeploy</td>
<td>允许重复发布</td>
</tr>
<tr>
<td>Disabled redeploy</td>
<td>禁止发布</td>
</tr>
<tr>
<td>Read-only</td>
<td>只读</td>
</tr>
</tbody></table>
<p>配置代理仓库、快照仓库、发布仓库后，打开<code>maven</code>配置文件 <code>settings.xml</code>文件配置连接仓库的账号和密码，发布稳定版本和快照版本是需要连接<code>Nexus</code>，配置的是授权模式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyReleaseRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>MySnapshotsRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建一个 <code>maven</code>工程，配置 <code>pom.xml</code>，<code>url</code> <code>copy</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyNexus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置代理仓库   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyProxyRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MyProxyRepositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/MyProxyRepositories/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   设置稳定版本发布仓库    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyReleaseRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MyReleaseRepositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/MyReleaseRepositories/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   设置快照版本发布仓库    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>MySnapshotsRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MySnapshotsRepositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/MySnapshotsRepositories/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>pom </code>文件 的<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code> 改成<br>  <code>&lt;version&gt;1.0-RELEASE&lt;/version&gt;</code>，执行命令 <code>mvn deploy</code><br>查看<code>Browse</code>，稳定版本已经发布上去了<br><code>Maven &amp; Nexus</code> 使用参考 <a href="https://www.sonatype.com/resources/ebooks">https://www.sonatype.com/resources/ebooks</a><br>参考 <a href="https://galaxyyao.github.io/2019/09/18/Maven-%E7%BB%84%E7%BB%87%E5%86%85%E9%83%A8%E9%A1%B9%E7%9B%AE%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AEDistributionManagement/">Maven-组织内部项目统一配置DistributionManagement</a><br><a href="https://cloud.tencent.com/developer/article/1799571">聊聊项目打包发布到maven私仓常见的几种方式</a><br><a href="https://juejin.cn/post/6844904104032993293#heading-3">nexus私服 和 settings.xml</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate</title>
    <url>/2021/04/14/RestTemplate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Spring Cloud</code> 提供了一个接口 <code>DiscoveryClient</code> ， 为 <code>Eureka</code> 或者 <code>consul</code> 等注册中心去实现，  <code>getInstances</code> 方法获取注册的实例，一个实例对应一个工程</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;ServiceInstance&gt; <span class="title">getInstances</span><span class="params">(<span class="keyword">String</span> serviceId)</span></span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>看下接口 <code>ServiceInstance</code> 下面两个方法 获取 主机名（IP）/  端口</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">String</span> <span class="title">getHost</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>注册了实例之后，使用  阻塞式同步<code>RestTemplate</code> 调用 或者 异步非阻塞 <code>WebClient</code> 调用，<code>RestTemplate</code> 为每个HTTP请求创建一个线程，在响应之前一直是阻塞状态，占用系统内存资源。</p>
<p>多个实例  <code>@LoadBalaced</code> 为 <code>RestTemplate</code>  或者 <code>WebClient</code> 做负载均衡的支持，<code>LoadBalancerInterceptor</code> 实现 <code>ClientHttpRequestInterceptor</code> 接口 (<code>intercept</code> 方法)</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">ClientHttpResponse intercept(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution <span class="keyword">execution</span>)</span><br><span class="line">		<span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>
<p>通过请求 <code>URL</code> 获取 <code>host</code>  然后使用 <code>LoadBalancerClient</code> 进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> LoadBalancerClient loadBalancer; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> URI originalUri = request.getURI();</span><br><span class="line">		String serviceName = originalUri.getHost();</span><br><span class="line">		Assert.state(serviceName != <span class="keyword">null</span>,</span><br><span class="line">				<span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer.execute(serviceName,</span><br><span class="line">				<span class="keyword">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>看下 <code>execute</code> 方法 默认引用的是 <code>RibbonLoadBalancerClient</code>  通过 <code>serviceId</code>  和 调用的实例 <code>ribbonServer</code>  及 请求<code>request</code> 做服务调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request, Object hint)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	ILoadBalancer loadBalancer = getLoadBalancer(serviceId);</span><br><span class="line">	Server server = getServer(loadBalancer, hint);</span><br><span class="line">	<span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No instances available for &quot;</span> + serviceId);</span><br><span class="line">	&#125;</span><br><span class="line">	RibbonServer ribbonServer = <span class="keyword">new</span> RibbonServer(serviceId, server,</span><br><span class="line">			isSecure(server, serviceId),</span><br><span class="line">			serverIntrospector(serviceId).getMetadata(server));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> execute(serviceId, ribbonServer, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 <code>RestTemplate </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .setConnectTimeout(Duration.ofMillis(<span class="number">100</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofMillis(<span class="number">500</span>))</span><br><span class="line">                .requestFactory(<span class="keyword">this</span>::requestFactory)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Problem About Spring</title>
    <url>/2021/04/26/Some-Problem-About-Spring/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看下 <code>org.springframework.util</code> 包下的 <code>ClassUtils</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> PACKAGE_SEPARATOR = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPackageName</span><span class="params">(String fqClassName)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(fqClassName, <span class="string">&quot;Class name must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);</span><br><span class="line">    <span class="keyword">return</span> (lastDotIndex != -<span class="number">1</span> ? fqClassName.substring(<span class="number">0</span>, lastDotIndex) : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果 <code>fqClassName</code> 参数是 <code>com.java</code> 那么返回结果为 <code>com</code> ，这里解答了我一个疑问，比如 <code>Spring</code> 启动类所在的包 和 <code>Controller</code>包 不在同一个包下，导致找不到 <code>Controller</code> 类。这里写下正常的包结构</p>
<ul>
<li>com<ul>
<li>controller</li>
<li>model</li>
<li>service</li>
<li>mapper</li>
<li>Application 启动类</li>
</ul>
</li>
</ul>
<p>如果 <code>Application</code> 启动类 在其它包下，例如放在 <code>app</code> 包下，那么启动会报错，找不到对应的 <code>Bean</code></p>
<ul>
<li>com<ul>
<li>controller</li>
<li>model</li>
<li>service</li>
<li>mapper</li>
</ul>
</li>
<li>app<ul>
<li>Application 启动类</li>
</ul>
</li>
</ul>
<p>那为啥在同一个包下就可以找到呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看下 <code>@SpringBootApplication</code> 注解，这里省略了其它代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">public @interface SpringBootApplication &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>@SpringBootApplication</code> 开启了很多功能，其中一个关键功能就是 <code>@ComponentScan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">	<span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里 <code>basePackages</code> 默认是 <code>&#123;&#125;</code>，那么默认是什么包呢，先看下 <code>ConfigurationClassParser</code> 类的其中一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ComponentScanAnnotationParser componentScanParser;</span><br><span class="line"><span class="comment">// 拿到该类上面所有的@ComponentScan注解</span></span><br><span class="line">Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">				sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">                </span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">            <span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line"></span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>
<p>看下  <code>this.componentScanParser.parse()</code>, 这里涉及 <code>ComponentScanAnnotationParser</code> 类，以下省略了其它代码，看下它的 <code>parse</code> 方法，<code>declaringClass</code> 默认传的 <code>sourceClass.getMetadata().getClassName()</code> 也就是所在的包名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentScanAnnotationParser</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">parse</span><span class="params">(AnnotationAttributes componentScan, <span class="keyword">final</span> String declaringClass)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; basePackages = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">		String[] basePackagesArray = componentScan.getStringArray(<span class="string">&quot;basePackages&quot;</span>);</span><br><span class="line">        	<span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">			basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这应该明白了。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>json 处理</title>
    <url>/2021/05/10/json-%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cb08544bb19904a01ec34cabc5d9e85f58e108628640f0b82dabb47f3961ecdd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>docsify</title>
    <url>/2021/05/02/docsify/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://up.enterdesk.com/edpic/7c/b7/25/7cb7255d3a70c8b54723edb3263f8458.jpg"></p>
<h3 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h3><p>一个神奇的文档网站生成器。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>docsify</code> 可以快速帮你生成文档网站。不同于 <code>GitBook</code>、<code>Hexo</code> 的地方是它不会生成静态的 <code>.html</code> 文件，所有转换工作都是在运行时。如果你想要开始使用它，只需要创建一个 <code>index.html</code> 就可以开始编写文档并直接部署在 <code>GitHub Pages</code>。</p>
<p>查看快速开始了解详情:<a href="https://docsify.js.org/#/zh-cn/">https://docsify.js.org/#/zh-cn/</a></p>
<span id="more"></span>
<h3 id="安装-docsify-cli"><a href="#安装-docsify-cli" class="headerlink" title="安装 docsify-cli"></a>安装 docsify-cli</h3><p>建一个文件夹 <code>cloud-doc</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">C:\Users\cloud-doc (master)</span><br><span class="line">输入命令：npm i docsify-cli -g</span><br><span class="line">&gt; Thank you <span class="keyword">for</span> using docsify!</span><br><span class="line">If you rely on <span class="keyword">this</span> <span class="keyword">package</span>, please consider supporting our <span class="keyword">open</span> collective:</span><br><span class="line">&gt; https:<span class="comment">//opencollective.com/docsify/donate</span></span><br><span class="line"></span><br><span class="line">npm WARN <span class="symbol">ws@</span><span class="number">7.4</span><span class="number">.5</span> requires a peer of <span class="symbol">bufferutil@</span>^<span class="number">4.0</span><span class="number">.1</span> but none <span class="keyword">is</span> installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN <span class="symbol">ws@</span><span class="number">7.4</span><span class="number">.5</span> requires a peer of utf-<span class="number">8</span>-<span class="symbol">validate@</span>^<span class="number">5.0</span><span class="number">.2</span> but none <span class="keyword">is</span> installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <span class="symbol">fsevents@</span><span class="number">2.3</span><span class="number">.2</span> (node_modules\docsify-cli\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> <span class="symbol">fsevents@</span><span class="number">2.3</span><span class="number">.2</span>: wanted &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;darwin&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;any&quot;</span>&#125; (current: &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;win32&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;x64&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ docsify-<span class="symbol">cli@</span><span class="number">4.4</span><span class="number">.3</span></span><br><span class="line">added <span class="number">208</span> packages from <span class="number">91</span> contributors <span class="keyword">in</span> <span class="number">13.</span>718s</span><br></pre></td></tr></table></figure>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">docsify <span class="keyword">init</span> ./docs</span><br></pre></td></tr></table></figure>
<h3 id="开始写文档"><a href="#开始写文档" class="headerlink" title="开始写文档"></a>开始写文档</h3><p>初始化成功后，可以看到 <code>./docs</code> 目录下创建的几个文件</p>
<ul>
<li>index.html 入口文件</li>
<li>README.md 会做为主页内容渲染</li>
<li>nojekyll 用于阻止 GitHub Pages 忽略掉下划线开头的文件<br>直接编辑 <code>docs/README.md</code> 就能更新文档内容，当然也可以添加更多页面。</li>
</ul>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>通过运行 <code>docsify serve</code> 启动一个本地服务器，可以方便地实时预览效果。默认访问地址 <code>http://localhost:3000</code> 。</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>参考 <a href="https://docsify.js.org/#/zh-cn/themes">https://docsify.js.org/#/zh-cn/themes</a></p>
<p><a href="https://jhildenbiddle.github.io/docsify-themeable/#/">docsify-themeable</a> 一个用于docsify的，简单到令人愉悦的主题系统，参考<a href="https://codesandbox.io/s/xv36w4695o?file=/sidebar.md:0-167">https://codesandbox.io/s/xv36w4695o?file=/sidebar.md:0-167</a><br>直接粘贴复制它的文件，然后用 <code>vscode</code> 打开，浏览器可以实时查看到效果</p>
<h3 id="部署-Github"><a href="#部署-Github" class="headerlink" title="部署 Github"></a>部署 Github</h3><p>接下来自己修修改改改，然后上传到 <code>github</code>，访问 <a href="https://javakangpan.github.io/Blog/#/">https://javakangpan.github.io/Blog/#/</a><br>这里简单的介绍了如何使用，了解更多需要自己去探索。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>SourceTree</title>
    <url>/2021/04/14/SourceTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.sourcetreeapp.com/">SourceTree</a>SourceTree集成了Git Flow功能，能简单方便的操作和实现常规的工作流程。支持OSX和Windows平台。<a href="https://support.atlassian.com/sourcetree/">操作文档</a><br>在 <code>gitHub</code> 创建一个仓库 <code>javaBook</code><br>克隆到本地</p>
<span id="more"></span>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"> &gt; git clone git@github.com:javakangpan/javaBook.git</span><br><span class="line">Cloning <span class="keyword">into</span> <span class="string">&#x27;javaBook&#x27;</span>...</span><br><span class="line">warning: You appear <span class="built_in">to</span> have cloned <span class="keyword">an</span> <span class="literal">empty</span> repository.</span><br></pre></td></tr></table></figure>
<p>添加文件</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        Bean.md</span><br><span class="line">        CacheLine.md</span><br><span class="line">        Docker.md</span><br><span class="line">        Java8.md</span><br><span class="line"></span><br><span class="line">        &quot;<span class="symbol">\3</span>45<span class="symbol">\2</span>34<span class="symbol">\2</span>50<span class="symbol">\3</span>45<span class="symbol">\2</span>56<span class="symbol">\2</span>71<span class="symbol">\3</span>45<span class="symbol">\2</span>31<span class="symbol">\2</span>50<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>55<span class="symbol">\3</span>50<span class="symbol">\2</span>77<span class="symbol">\2</span>20<span class="symbol">\3</span>50<span class="symbol">\2</span>41<span class="symbol">\2</span>14Apache<span class="symbol">\3</span>46<span class="symbol">\2</span>34<span class="symbol">\2</span>15<span class="symbol">\3</span>45<span class="symbol">\2</span>12<span class="symbol">\2</span>41<span class="symbol">\3</span>45<span class="symbol">\2</span>31<span class="symbol">\2</span>50.md&quot;</span><br></pre></td></tr></table></figure>
<p>添加到暂存区</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; git <span class="built_in">add</span> .</span><br><span class="line">warning: LF will be replaced <span class="keyword">by</span> <span class="literal">CRLF</span> <span class="keyword">in</span> Docker.md.</span><br><span class="line">The <span class="built_in">file</span> will have its original <span class="built_in">line</span> endings <span class="keyword">in</span> your working <span class="built_in">directory</span></span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">&gt; git commit -m <span class="string">&quot;add&quot;</span></span><br><span class="line">[<span class="keyword">master</span> <span class="title">(root-commit</span>) d46fbcc] add</span><br><span class="line"> <span class="number">47</span> files changed, <span class="number">3182</span> insertions(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>推送到远程分支</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; git push</span><br><span class="line">Enumerating object<span class="variable">s:</span> <span class="number">50</span>, done.</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">50</span>/<span class="number">50</span>), done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">50</span>/<span class="number">50</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">50</span>/<span class="number">50</span>), <span class="number">1.92</span> MiB | <span class="number">431.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">50</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving delta<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">To github.<span class="keyword">com</span>:javakangpan/javaBook.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; master</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>SourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Application is finished, How to open the browser?</title>
    <url>/2021/04/15/When-the-Spring-Boot-Application-is-finished,-then-How-to-open-the-browser-/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterRun</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment environment;</span><br><span class="line">    <span class="meta">@EventListener(&#123;ApplicationReadyEvent.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String port = environment.getProperty(<span class="string">&quot;local.server.port&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;http://localhost:&quot;</span> + port;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;rundll32 url.dll,FileProtocolHandler &quot;</span> + url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p><code>Environment</code>即环境，也可以叫做上下文。<code>Environment</code>在容器中是一个抽象的集合，是指应用环境的2个方面：<code>profiles</code>和<code>properties</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Environment</span> <span class="keyword">extends</span> <span class="title">PropertyResolver</span> </span>&#123;</span><br><span class="line">    String[] getActiveProfiles();</span><br><span class="line"></span><br><span class="line">    String[] getDefaultProfiles();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">acceptsProfiles</span><span class="params">(String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">acceptsProfiles</span><span class="params">(Profiles var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>environment</code> 获取当前端口拼接 <code>URL</code></p>
<h3 id="EventListener"><a href="#EventListener" class="headerlink" title="@EventListener"></a>@EventListener</h3><p><code>Spring</code>提供的一个事件监听、订阅的实现，内部实现原理是观察者设计模式；为的就是业务系统逻辑的解耦,提高可扩展性以及可维护性。事件发布者并不需要考虑谁去监听，监听具体的实现内容是什么，发布者的工作只是为了发布事件而已。<br>如下例子，控制台打印 <code>发布的消息:hello</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(App.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>,<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source,String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDemoEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发布的消息:&#123;&#125;&quot;</span>, event.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ApplicationReadyEvent"><a href="#ApplicationReadyEvent" class="headerlink" title="ApplicationReadyEvent"></a>ApplicationReadyEvent</h3><p><code>spring boot</code>中支持的事件类型如下</p>
<ul>
<li><p>ApplicationFailedEvent：该事件为spring boot启动失败时的操作</p>
</li>
<li><p>ApplicationPreparedEvent：上下文context准备时触发</p>
</li>
<li><p>ApplicationReadyEvent：上下文已经准备完毕的时候触发</p>
</li>
<li><p>ApplicationStartedEvent：spring boot 启动监听类</p>
</li>
<li><p>SpringApplicationEvent：获取SpringApplication</p>
</li>
<li><p>ApplicationEnvironmentPreparedEvent：环境事先准备</p>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>curl 和 httpie</title>
    <url>/2021/05/01/curl-+-pip/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://th.bing.com/th/id/Rff497327687b3beefc1a899f5977af36?rik=fR6l3SLlCPEIpQ&riu=http://img02.tooopen.com/images/20160404/tooopen_sy_158232324333.jpg&ehk=AepGEizBMnTz/LkAqnXuFe8qpxMqUvKCTQe8IG0OQSg=&risl=&pid=ImgRaw"></p>
<h3 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a><code>CURL</code></h3><p>详情参考 <a href="https://catonmat.net/cookbooks/curl">curl</a><br><code>get</code>请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//</span>catonmat.net</span><br></pre></td></tr></table></figure>
<p>请求之后保存响应信息到文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -o response.txt https:<span class="regexp">//</span>catonmat.net</span><br></pre></td></tr></table></figure>
<p>发送一个空参数的 <code>post</code> 请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -X POST https:<span class="regexp">//</span>catonmat.net</span><br></pre></td></tr></table></figure>
<p> <code>Form</code> 表单数据的 <code>POST</code> 请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;login=emma&amp;password=123&#x27;</span> -X POST https:<span class="regexp">//g</span>oogle.com/login</span><br></pre></td></tr></table></figure>
<p><code>JSON</code> 数据的 <code>POST</code> 请求</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;&#123;&quot;</span>login<span class="string">&quot;: &quot;</span>emma<span class="string">&quot;, &quot;</span>pass<span class="string">&quot;: &quot;</span><span class="number">123</span><span class="string">&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> https:<span class="comment">//google.com/login</span></span><br></pre></td></tr></table></figure>
<p>自己搭建了一个 <code>SpringBoot</code> 项目，尝试用 curl 发送 POST 请求，但是调不通，报 <code>SEC_E_INVALID_TOKEN</code> 。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"> <span class="attribute">url</span> -H &#x27;Content-type:application/json&#x27; -d &#x27;&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;kangpan&quot;</span>&#125;&#x27; https://localhost:<span class="number">8080</span>/</span><br><span class="line"><span class="attribute">curl</span>: (<span class="number">35</span>) schannel: next InitializeSecurityContext failed: SEC_E_INVALID_TOKEN (<span class="number">0</span>x<span class="number">80090308</span>) - 给函数提供的标志无效</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>查看本机 <code>curl</code>,猜想是不是使用了某种协议，需要权限才能访问</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span> -V</span><br><span class="line"><span class="attribute">curl</span> <span class="number">7</span>.<span class="number">55</span>.<span class="number">1</span> (Windows) libcurl/<span class="number">7</span>.<span class="number">55</span>.<span class="number">1</span> WinSSL</span><br><span class="line"><span class="attribute">Release</span>-Date:<span class="meta"> [unreleased]</span></span><br><span class="line"><span class="attribute">Protocols</span>: dict file ftp ftps http https imap imaps pop<span class="number">3</span> pop<span class="number">3</span>s smtp smtps telnet tftp</span><br><span class="line"><span class="attribute">Features</span>: AsynchDNS IPv<span class="number">6</span> Largefile SSPI Kerberos SPNEGO NTLM SSL</span><br></pre></td></tr></table></figure>
<h3 id="HTTPie-安装步骤"><a href="#HTTPie-安装步骤" class="headerlink" title="HTTPie 安装步骤"></a><code>HTTPie</code> 安装步骤</h3><p>没有找到解决办法，那么就换一个工具吧 <code>httpie</code> <a href="https://github.com/jkbr/httpie">https://github.com/jkbr/httpie</a><br>查看文档 <a href="https://httpie.io/docs#installation">https://httpie.io/docs#installation</a></p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Windows, etc.</span><br><span class="line">A universal installation <span class="function"><span class="keyword">method</span> <span class="params">(that works <span class="keyword">on</span> Windows, Mac OS X, Linux, …, <span class="keyword">and</span> always provides the latest version)</span> <span class="title">is</span> <span class="title">to</span> <span class="title">use</span> <span class="title">pip</span>:</span></span><br><span class="line"></span><br><span class="line"># Make sure we have an up-<span class="keyword">to</span>-date version <span class="keyword">of</span> pip <span class="keyword">and</span> setuptools:</span><br><span class="line">python -m pip install --upgrade pip setuptools</span><br><span class="line"></span><br><span class="line">python -m pip install --upgrade httpie</span><br><span class="line">(<span class="keyword">If</span> pip installation fails <span class="keyword">for</span> some reason, you can <span class="keyword">try</span> easy_install httpie <span class="keyword">as</span> a fallback.)</span><br><span class="line"></span><br><span class="line">Python version</span><br><span class="line">Python version <span class="number">3.6</span> <span class="keyword">or</span> greater <span class="keyword">is</span> required.</span><br></pre></td></tr></table></figure>
<p>大致是说，需要安装 <code>Python</code>，配置<code>Python</code>环境变量，再使用 <code>Python</code> 安装 <code>pip</code>，设置 <code>pip</code>环境变量，再使用 <code>pip</code> 安装 <code>httpie</code><br>进入 <code>Python</code> 官方下载地址 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a><br>选择安装的文件 <code>Windows installer (64-bit)</code></p>
<h3 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a><code>Python</code> 安装</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Files</span></span><br><span class="line"><span class="attribute">Version</span>	Operating System	Description	MD<span class="number">5</span> Sum	File Size	GPG</span><br><span class="line"><span class="attribute">Gzipped</span> source tarball	Source release		cc<span class="number">8507</span>b<span class="number">3799</span>ed<span class="number">4</span>d<span class="number">8</span>baa<span class="number">7534</span>cd<span class="number">8</span>d<span class="number">5</span>b<span class="number">35</span>f	<span class="number">25411523</span>	SIG</span><br><span class="line"><span class="attribute">XZ</span> compressed source tarball	Source release		<span class="number">2</span>a<span class="number">3</span>dba<span class="number">5</span>fc<span class="number">75</span>b<span class="number">695</span>c<span class="number">45</span>cf<span class="number">1806156</span>e<span class="number">1</span>a<span class="number">97</span>	<span class="number">18900304</span>	SIG</span><br><span class="line"><span class="attribute">macOS</span> <span class="number">64</span>-bit Intel installer	Mac OS X	for macOS <span class="number">10</span>.<span class="number">9</span> and later	<span class="number">2</span>b<span class="number">974</span>bfd<span class="number">787</span>f<span class="number">941</span>fb<span class="number">8</span>f<span class="number">80</span>b<span class="number">5</span>b<span class="number">8084</span>e<span class="number">569</span>	<span class="number">29866341</span>	SIG</span><br><span class="line"><span class="attribute">macOS</span> <span class="number">64</span>-bit universal<span class="number">2</span> installer	Mac OS X	for macOS <span class="number">10</span>.<span class="number">9</span> and later, including macOS <span class="number">11</span> Big Sur <span class="literal">on</span> Apple Silicon (experimental)	<span class="number">9</span>aa<span class="number">68872</span>b<span class="number">9582</span>c<span class="number">6</span>c<span class="number">71151</span>d<span class="number">5</span>dd<span class="number">4</span>f<span class="number">5</span>ebca	<span class="number">37648771</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> embeddable package (<span class="number">32</span>-bit)	Windows		b<span class="number">4</span>bd<span class="number">8</span>ec<span class="number">0891891158000</span>c<span class="number">6844222014</span>d	<span class="number">7580762</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> embeddable package (<span class="number">64</span>-bit)	Windows		<span class="number">5</span>c<span class="number">34</span>eb<span class="number">7</span>e<span class="number">79</span>cfe<span class="number">8</span>a<span class="number">92</span>bf<span class="number">56</span>b<span class="number">5168</span>a<span class="number">459</span>f<span class="number">4</span>	<span class="number">8419530</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> help file	Windows		aaacfe<span class="number">224768</span>b<span class="number">5</span>e<span class="number">4</span>aa<span class="number">7583</span>c<span class="number">12</span>af<span class="number">68</span>fb<span class="number">0</span>	<span class="number">8859759</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> installer (<span class="number">32</span>-bit)	Windows		b<span class="number">790</span>fdaff<span class="number">648</span>f<span class="number">757</span>bf<span class="number">0</span>f<span class="number">233</span>e<span class="number">4</span>d<span class="number">05</span>c<span class="number">053</span>	<span class="number">27222976</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> installer (<span class="number">64</span>-bit)	Windows	Recommended	ebc<span class="number">65</span>aaa<span class="number">142</span>b<span class="number">1</span>d<span class="number">6</span>de<span class="number">450</span>ce<span class="number">241</span>c<span class="number">50</span>e<span class="number">61</span>c	<span class="number">28323440</span>	SIG</span><br></pre></td></tr></table></figure>
<p>安装之后设置环境变量 打开<code>CMD</code>窗口，输入命令，<code>C:\Python\Python39</code> 安装的路径</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">path</span>=%path%<span class="comment">;C:\Python\Python39</span></span><br></pre></td></tr></table></figure>
<p>查看环境变量是否设置成功，<code>CMD</code> 输入 <code>python</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Python</span> <span class="number">3</span>.<span class="number">9</span>.<span class="number">4</span> (tags/v<span class="number">3</span>.<span class="number">9</span>.<span class="number">4</span>:<span class="number">1</span>f<span class="number">2</span>e<span class="number">308</span>, Apr  <span class="number">6</span> <span class="number">2021</span>, <span class="number">13</span>:<span class="number">40</span>:<span class="number">21</span>)<span class="meta"> [MSC v.1928 64 bit (AMD64)] on win32</span></span><br><span class="line"><span class="meta">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a><code>pip</code> 安装</h3><p>接下来使用 <code>python</code> 安装 <code>pip</code>，安装详情参考 <a href="https://pip.pypa.io/en/stable/installing/">https://pip.pypa.io/en/stable/installing/</a></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Do I need to install pip?</span><br><span class="line">pip is already installed<span class="built_in"> if </span>you are using Python 2 &gt;=2.7.9<span class="built_in"> or </span>Python 3 &gt;=3.4 downloaded from python.org<span class="built_in"> or </span>if you are working in a Virtual Environment created by virtualenv<span class="built_in"> or </span>venv. Just make sure to upgrade pip.</span><br><span class="line"></span><br><span class="line">Use the following command to<span class="built_in"> check </span>whether pip is installed:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Unix/macOS</span><br><span class="line"></span><br><span class="line">Windows</span><br><span class="line">C:\&gt; py -m pip --version</span><br><span class="line">pip X.Y.Z from ...\site-packages\pip (python X.Y)</span><br></pre></td></tr></table></figure>
<p>找到 <code>C:\Python39\Scripts</code> 路径，设置 <code>pip</code> 环境变量</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">py</span> -m pip --version</span><br><span class="line"><span class="attribute">pip</span> <span class="number">20</span>.<span class="number">2</span>.<span class="number">3</span> from C:\Python\Python<span class="number">39</span>\lib\site-packages\pip (python <span class="number">3</span>.<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> -V</span><br><span class="line"><span class="attribute">pip</span> <span class="number">20</span>.<span class="number">2</span>.<span class="number">3</span> from c:\python\python<span class="number">39</span>\lib\site-packages\pip (python <span class="number">3</span>.<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p><code>pip</code> 使用详解</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">pip安装包 <span class="symbol">:pip</span> install 所需安装包名字</span><br><span class="line">pip查看已安装的包: pip show --files 安装包名字</span><br><span class="line">pip检查哪些包需要更新<span class="symbol">:pip</span> list --outdate</span><br><span class="line">pip升级包<span class="symbol">:pip</span> install --upgrade 安装包名字</span><br><span class="line">pip卸载安装包<span class="symbol">:pip</span> uninstall  安装包名字</span><br></pre></td></tr></table></figure>
<h3 id="httpie-安装"><a href="#httpie-安装" class="headerlink" title="httpie 安装"></a><code>httpie</code> 安装</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">pip install <span class="comment">--upgrade httpie</span></span><br><span class="line">Collecting httpie</span><br><span class="line">  Downloading httpie<span class="number">-2.4</span><span class="number">.0</span>-py3-<span class="keyword">none</span>-<span class="keyword">any</span>.whl (<span class="number">74</span> kB)</span><br><span class="line">     |████████████████████████████████| <span class="number">74</span> kB <span class="number">297</span> kB/s</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">WARNING</span>: You are <span class="keyword">using</span> pip <span class="keyword">version</span> <span class="number">20.2</span><span class="number">.3</span>; however, <span class="keyword">version</span> <span class="number">21.1</span><span class="number">.1</span> <span class="keyword">is</span> available.</span><br><span class="line">You should consider upgrading via the <span class="string">&#x27;c:\python\python39\python.exe -m pip install --upgrade p</span></span><br><span class="line"><span class="string">ip&#x27;</span> command.</span><br></pre></td></tr></table></figure>
<p>这里警告，用 <code>python -m pip install --upgrade httpie</code>，不过这样也安装成功了<br>使用 <code>httpie</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span> http://localhost:<span class="number">8080</span>/test/</span><br><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span></span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">44</span></span><br><span class="line"><span class="attribute">Content</span>-Type: text/plain;charset=UTF-<span class="number">8</span></span><br><span class="line"><span class="attribute">Date</span>: Sat, <span class="number">01</span> May <span class="number">2021</span> <span class="number">09</span>:<span class="number">57</span>:<span class="number">25</span> GMT</span><br><span class="line"></span><br><span class="line"><span class="attribute">service</span>: demo.generator.ServiceImpl@<span class="number">5</span>ada<span class="number">344</span>b</span><br></pre></td></tr></table></figure>
<p>跟 <code>curl</code> 对比</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span>  http://localhost:<span class="number">8080</span>/test/</span><br><span class="line"><span class="attribute">service</span>: demo.generator.ServiceImpl@<span class="number">7</span>a<span class="number">2</span>e<span class="number">4</span>ad</span><br></pre></td></tr></table></figure>
<p><code>post</code> 请求，<code>1.txt</code> 为 入参的 <code>json</code> 格式文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span> http://localhost:<span class="number">8080</span>/ &lt; C:<span class="number">1</span>.txt</span><br><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span></span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">6</span></span><br><span class="line"><span class="attribute">Content</span>-Type: application/json;charset=UTF-<span class="number">8</span></span><br><span class="line"><span class="attribute">Date</span>: Sat, <span class="number">01</span> May <span class="number">2021</span> <span class="number">22</span>:<span class="number">03</span>:<span class="number">05</span> GMT</span><br><span class="line"></span><br><span class="line"><span class="attribute">kangan</span></span><br></pre></td></tr></table></figure>
<h3 id="HTTPie-使用详解"><a href="#HTTPie-使用详解" class="headerlink" title="HTTPie 使用详解"></a>HTTPie 使用详解</h3><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>httpie</code> 是一个命令形式的<code>http</code>客户端，它提供了简单的<code>http</code>命令，返回带高亮的结果信息，可以很方便的在<code>http</code>交互场景下进行测试、调试等。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">http [<span class="keyword">flags</span>] [<span class="function"><span class="keyword">METHOD</span>] <span class="title">URL</span> [<span class="title">ITEM</span> [<span class="title">ITEM</span>]]</span></span><br><span class="line"><span class="function"><span class="title">METHOD</span>没有指定时，默认为 <span class="title">get</span></span></span><br><span class="line"><span class="function"><span class="title">URL</span>协议没有指定时，默认为 <span class="title">http</span>:</span><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a><code>GET</code></h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">http</span> <span class="built_in">get</span> 请求url</span><br><span class="line">请求 `url`带参数 :<span class="keyword">http</span> 请求url <span class="built_in">param</span>==<span class="built_in">value</span></span><br></pre></td></tr></table></figure>
<h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">post</span>请求时表单用 = ，默认为<span class="built_in">post</span>：<span class="keyword">http</span> 请求url <span class="built_in">param</span>=<span class="built_in">value</span></span><br><span class="line"><span class="number">2.</span>传递json: 可以直接传一个json类型文件，用 =@ 和 :=G，<span class="keyword">http</span> 请求url <span class="built_in">param</span>=@C:\<span class="number">1.</span>txt</span><br><span class="line"><span class="number">3.</span>重定向传json：<span class="keyword">http</span> 请求url &lt; C:\<span class="number">1.</span>txt</span><br></pre></td></tr></table></figure>
<h3 id="更多参考-https-github-com-httpie-httpie"><a href="#更多参考-https-github-com-httpie-httpie" class="headerlink" title="更多参考 https://github.com/httpie/httpie"></a>更多参考 <a href="https://github.com/httpie/httpie">https://github.com/httpie/httpie</a></h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Custom HTTP method, HTTP headers <span class="keyword">and</span> JSON data:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> PUT pie.dev/<span class="built_in">put</span> X-API-Token:<span class="number">123</span> name=John</span><br><span class="line">Submitting forms:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> -f POST pie.dev/<span class="built_in">post</span> hello=World</span><br><span class="line">See <span class="keyword">the</span> request that is being sent <span class="keyword">using</span> <span class="literal">one</span> <span class="keyword">of</span> <span class="keyword">the</span> output options:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> -v pie.dev/<span class="built_in">get</span></span><br><span class="line">Build <span class="keyword">and</span> print <span class="keyword">a</span> request <span class="keyword">without</span> sending <span class="keyword">it</span> <span class="keyword">using</span> offline mode:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--offline pie.dev/post hello=offline</span></span><br><span class="line">Use GitHub API <span class="built_in">to</span> <span class="built_in">post</span> <span class="keyword">a</span> comment <span class="keyword">on</span> <span class="title">an</span> <span class="title">issue</span> <span class="title">with</span> <span class="title">authentication</span>:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> -<span class="keyword">a</span> USERNAME POST <span class="keyword">https</span>://api.github.com/repos/httpie/httpie/issues/<span class="number">83</span>/comments body=<span class="string">&#x27;HTTPie is awesome! :heart:&#x27;</span></span><br><span class="line">Upload <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">using</span> redirected input:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> pie.dev/<span class="built_in">post</span> &lt; <span class="built_in">files</span>/data.json</span><br><span class="line">Download <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">and</span> save <span class="keyword">it</span> via redirected output:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> pie.dev/image/png &gt; image.png</span><br><span class="line">Download <span class="keyword">a</span> <span class="built_in">file</span> wget style:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--download pie.dev/image/png</span></span><br><span class="line">Use named sessions <span class="built_in">to</span> make certain aspects <span class="keyword">of</span> <span class="keyword">the</span> communication persistent between requests <span class="built_in">to</span> <span class="keyword">the</span> same host:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--session=logged-in -a username:password pie.dev/get API-Key:123</span></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--session=logged-in pie.dev/headers</span></span><br><span class="line">Set <span class="keyword">a</span> custom Host header <span class="built_in">to</span> work around missing DNS records:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> localhost:<span class="number">8000</span> Host:example.com</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator Mybatis</title>
    <url>/2021/04/24/generator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1363948882&auto=1&height=66"></iframe>
<span id="more"></span>

<p>上一篇介绍自己写<code>XML</code>模板的文章，日常开发迭代快，可能需要高效的完成 <code>CRUD</code>。这里简单介绍两种常见的生成 <code>Mapper接口</code> <code>Model模型</code> <code>MapperXML</code> 。<br>首先建一个简单的工程 <code>mybatis-demo</code>，<code>pom.xml</code> 文件引入相关组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接着在<code>resources</code> 文件新建 <code>mybatis.xml</code> 配置生成规则，这里注意<code>XML</code>中的<code>&amp;</code>需要转义<code>&amp;amp;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 本地数据库驱动程序jar包的全路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:/Users/康盼Java开发工程师/.m2/repository/mysql/mysql-connector-java/8.0.15/mysql-connector-java-8.0.15.jar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定义生成的java类的编码格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的相关配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/kangpan?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useAffectedRows=true&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 实体类生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- *Mapper.xml 文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mapper 接口文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 相关表的配置   tableName 表名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_user&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;true&quot;</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreQualifiersAtRuntime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击<code>IDEA</code> 右侧栏里面的 <code>Maven -&gt; Plugins </code>双击运行。<br>第二种方式，直接上代码 <code>pom</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>resources</code> 中新建 <code>generatorConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- classPathEntry:数据库的JDBC驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:/Users/康盼Java开发工程师/.m2/repository/mysql/mysql-connector-java/8.0.15/mysql-connector-java-8.0.15.jar&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DBTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.FluentBuilderMethodsPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.RowBoundsPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 去除自动生成的注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/kangpan?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useAffectedRows=true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成model代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成mappers代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/resources/mapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成dao代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;MIXEDMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName:用于自动生成代码的数据库表;domainObjectName:对应于数据库表的javaBean类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_coffee&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Coffee&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动类中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       mybatisGenerator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mybatisGenerator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ConfigurationParser configurationParser = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration configuration = configurationParser</span><br><span class="line">                .parseConfiguration(<span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">&quot;/generatorConfig.xml&quot;</span>));</span><br><span class="line">        DefaultShellCallback defaultShellCallback = <span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(configuration, defaultShellCallback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>pom</code> 文件引入了 <code>mybatis-spring-boot-starter</code>组件，需要在<code>application.properties</code>文件中配置数据源</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/kangpan?useSSL=<span class="literal">false</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line">spring.datasource.password=</span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=classpath*:/mapper/**/*.xml</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>junitperf</title>
    <url>/2021/04/14/junitperf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>pom </code>文件引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.houbb/junitperf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.houbb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junitperf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>测试 <code>stringBuilder </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JunitPerfConfig( warmUp = 1000, reporter = &#123;HtmlReporter.class, ConsoleReporter.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            stringBuilder.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下  <code>JunitPerfConfig </code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JunitPerfConfig &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threads</span><span class="params">()</span> <span class="keyword">default</span> 1</span>; <span class="comment">// 执行时使用多少线程执行</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">warmUp</span><span class="params">()</span> <span class="keyword">default</span> 0L</span>; <span class="comment">// 准备时间 （单位：毫秒）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">duration</span><span class="params">()</span> <span class="keyword">default</span> 60000L</span>; <span class="comment">// 执行时间 (单位：毫秒)  (不包括准备时间) 默认值1分钟</span></span><br><span class="line"></span><br><span class="line">    Class&lt;? extends StatisticsCalculator&gt; statistics() <span class="keyword">default</span> DefaultStatisticsCalculator.class; <span class="comment">// 统计信息</span></span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Reporter&gt;[] reporter() <span class="keyword">default</span> &#123;ConsoleReporter.class&#125;; <span class="comment">// 报告信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考 <a href="https://github.com/houbb/junitperf">junitperf</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+prometheus+grafana</title>
    <url>/2021/04/14/springboot+prometheus+grafana/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安利一款好用的谷歌<code>json</code>格式化插件 <code>jsonview</code>，地址 <a href="https://jsonview.com/">https://jsonview.com/</a><br>搭建 <code>springboot</code> 项目 引入 <code>actuator</code> 组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p> <code>actuator</code> 目的：监控并管理应用程序，详情见官方文档 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready</a></p>
<p>一些常用的 <code>Endpoint</code></p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">说明</th>
<th align="center">默认开启</th>
<th align="center">默认HTTP</th>
<th align="center">默认JMX</th>
</tr>
</thead>
<tbody><tr>
<td align="center">beans</td>
<td align="center">显示容器的Bean</td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">health</td>
<td align="center">显示健康信息</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">info</td>
<td align="center">应用信息</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">cache</td>
<td align="center">应用缓存</td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">Y</td>
</tr>
</tbody></table>
<p><code>application.properties</code> 配置打开所有监控</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">management<span class="selector-class">.endpoints</span><span class="selector-class">.web</span><span class="selector-class">.exposure</span>.include=*</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8080/actuator/health</code> 打印</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">status:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入 安装的<code>JDK/bin</code> 目录 ，<code>cmd</code> 输入 <code>jconsole</code> 可以看到 <code>Actuator EndPoint</code> 信息<br><code>Spring boot</code> 健康检查 通过实现 <code>HealthIndicator</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HealthIndicator</span> <span class="keyword">extends</span> <span class="title">HealthContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Health <span class="title">getHealth</span><span class="params">(<span class="keyword">boolean</span> includeDetails)</span> </span>&#123;</span><br><span class="line">		Health health = health();</span><br><span class="line">		<span class="keyword">return</span> includeDetails ? health : health.withoutDetails();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Health <span class="title">health</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子 数据库的健康检查 <code>DataSourceHealthIndicator</code> 类，构造的时候传入  <code>DataSource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DataSourceHealthIndicator</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(dataSource, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>健康检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">		builder.up().withDetail(<span class="string">&quot;database&quot;</span>, <span class="string">&quot;unknown&quot;</span>); <span class="comment">// 没有数据库 就当是健康的 并提示 unknown</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		doDataSourceHealthCheck(builder);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>doDataSourceHealthCheck</code> 方法判断当前数据库健康状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDataSourceHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	String product = getProduct(); <span class="comment">// 什么数据库</span></span><br><span class="line">	builder.up().withDetail(<span class="string">&quot;database&quot;</span>, product);</span><br><span class="line">	String validationQuery = getValidationQuery(product);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// Avoid calling getObject as it breaks MySQL on Java 7</span></span><br><span class="line">		List&lt;Object&gt; results = <span class="keyword">this</span>.jdbcTemplate.query(validationQuery, <span class="keyword">new</span> SingleColumnRowMapper()); <span class="comment">// 通过 jdbcTemplate 查询</span></span><br><span class="line">		Object result = DataAccessUtils.requiredSingleResult(results); <span class="comment">// 取得结果</span></span><br><span class="line">		builder.withDetail(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">finally</span> &#123;</span><br><span class="line">		builder.withDetail(<span class="string">&quot;validationQuery&quot;</span>, validationQuery);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现自己程序的健康状态 定义 <code>HealthIndicatorTest</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthIndicatorTest</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这里根据你的业务逻辑去判断</span></span><br><span class="line">        map.put(<span class="string">&quot;血压&quot;</span>,<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;体重&quot;</span>,<span class="number">120</span>);</span><br><span class="line">        <span class="keyword">return</span> Health.up().withDetails(map).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8080/actuator/health</code> 查看结果</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">healthIndicatorTest:</span> &#123;</span><br><span class="line"><span class="symbol">status:</span> <span class="string">&quot;UP&quot;</span>,</span><br><span class="line"><span class="symbol">details:</span> &#123;</span><br><span class="line">  体重: <span class="number">120</span>,</span><br><span class="line">  血压: <span class="string">&quot;正常&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面通过 <code>Actuator Health</code> 了解程序是否健康，在程序中还需要收集更多的度量指标，比如操作系统 或者 JVM、业务指标 等，通过 <code>Micrometer</code> 收集这些信息，官方网站 <a href="https://micrometer.io/">https://micrometer.io/</a> ，应用在 <code>Spring Boot</code>， 查看文档  <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics</a></p>
<p>利用 <code>Micrometer</code> 后端埋点 统计接口请求次数<br><code>pom</code> 引入组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建 <code>Test</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">MeterBinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counter.increment(); <span class="comment">// 埋点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindTo</span><span class="params">(MeterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="keyword">this</span>.counter = registry.counter(<span class="string">&quot;counter.number&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器 输入 <code>http://localhost:8081/test/</code> 请求服务<br>输入 <code>http://localhost:8081/actuator/metrics/counter.number</code> 查看请求次数<br> <figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;counter.number&quot;</span>,</span><br><span class="line"><span class="symbol">description:</span> null,</span><br><span class="line"><span class="symbol">baseUnit:</span> null,</span><br><span class="line"><span class="symbol">measurements:</span> [</span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">statistic:</span> <span class="string">&quot;COUNT&quot;</span>,</span><br><span class="line"><span class="symbol">value:</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="symbol">availableTags:</span> [ ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> <code>windows</code> 安装 <code>grafana</code> ，地址 ： <a href="https://grafana.com/grafana/download?platform=windows">https://grafana.com/grafana/download?platform=windows</a><br>安装之后，打开 <code>\grafana\conf</code> 文件 查看配置</p>
<ul>
<li>默认配置文件是在/conf/defaults.ini</li>
<li>用户配置文件是在/conf/custom.ini<br>更改 端口<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">http_port</span> = <span class="number">8888</span></span><br></pre></td></tr></table></figure>
更改 账号密码<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">security</span>]</span><br><span class="line"></span><br><span class="line"># <span class="keyword">default</span> <span class="keyword">admin</span> <span class="keyword">user</span>, created <span class="keyword">on</span> startup</span><br><span class="line">admin_user = <span class="keyword">admin</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">default</span> <span class="keyword">admin</span> <span class="keyword">password</span>, can be changed <span class="keyword">before</span> first <span class="keyword">start</span> <span class="keyword">of</span> grafana, <span class="keyword">or</span> <span class="keyword">in</span> profile settings</span><br><span class="line">admin_password = <span class="keyword">admin</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>进入目录 <code>grafana\bin</code> 运行 <code>grafana-server.exe</code><br>浏览器输入 <code>http://localhost:8888/</code> ，输入 <code>admin admin</code></p>
<p> <code>windows</code> 安装 <code>prometheus</code> ，地址 ：<a href="https://prometheus.io/download/">https://prometheus.io/download/</a><br>配置 任务和实例，打开 <code>prometheus.yml</code> 文件，详情见 <a href="https://www.prometheus.wang/quickstart/prometheus-job-and-instance.html">任务和实例</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">scrape_config<span class="variable">s:</span></span><br><span class="line">  # The job name <span class="keyword">is</span> added <span class="keyword">as</span> <span class="keyword">a</span> label `job=<span class="symbol">&lt;job_name&gt;</span>` <span class="keyword">to</span> any timeseries scraped from this config.</span><br><span class="line">  - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">    # metrics_path defaults <span class="keyword">to</span> <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">    # scheme defaults <span class="keyword">to</span> <span class="string">&#x27;http&#x27;</span>.</span><br><span class="line">    </span><br><span class="line">    metrics_path: <span class="string">&#x27;/actuator/prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">    static_config<span class="variable">s:</span></span><br><span class="line">    - target<span class="variable">s:</span> [<span class="string">&#x27;localhost:8080&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">  - job_name: <span class="string">&#x27;node&#x27;</span></span><br><span class="line"></span><br><span class="line">    # metrics_path defaults <span class="keyword">to</span> <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">    # scheme defaults <span class="keyword">to</span> <span class="string">&#x27;http&#x27;</span>.</span><br><span class="line">    </span><br><span class="line">    static_config<span class="variable">s:</span></span><br><span class="line">    - target<span class="variable">s:</span> [<span class="string">&#x27;localhost:9182&#x27;</span>]</span><br></pre></td></tr></table></figure>


<p>浏览器输入 <code>http://localhost:9090/targets</code> ，<code>prometheus</code> 默认端口 <code>9090</code>，看到这两个实例都是 <code>down</code> 状态</p>
<p>了解下  <code>prometheus</code> 架构，<code>prometheus</code> 主要是通过定时拉取应用程序中暴露的时间序列进行工作的，可以在 <code>prometheus.yml</code> 文件配置 <code>Jobs/Exporters</code></p>
<p>为什么要监控应用程序的各个指标，推荐文章 <a href="https://www.infoq.cn/article/metrics-driven-development">度量驱动开发</a> 感兴趣的可以看下</p>
<p><code>springboot</code> 引入  <code>micrometer-jvm-extras</code> 组件，查看 JVM 相关信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.mweirauch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-jvm-extras<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动项目，看到 <code>springboot</code> 项目实例 状态是 <code>up</code></p>
<p>点击 <code>Endpoint</code> 可以看到 <code>JVM</code> 各项指标</p>
<p>通过 <code>grafana</code> 图形化展示，<code>JVM</code> 堆内存 进程内存  <code>HTTP</code>请求持续时间  详情见 <code>4701</code> 指标 </p>
<p><a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a> </p>
<p>参考文章<br><a href="https://bigjar.github.io/2018/08/19/Spring-Boot-Actuator-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E3%80%81%E5%AE%A1%E8%AE%A1%E3%80%81%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%9B%91%E6%8E%A7/">Spring Boot Actuator:健康检查、审计、统计和监控</a><br><a href="https://bigjar.github.io/2018/08/19/Spring-Boot-Metrics%E7%9B%91%E6%8E%A7%E4%B9%8BPrometheus-Grafana/">Spring Boot Metrics监控之Prometheus&amp;Grafana</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>原型 Bean 被固定</title>
    <url>/2021/04/28/%E5%8E%9F%E5%9E%8B-Bean-%E8%A2%AB%E5%9B%BA%E5%AE%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="原型-Bean-被固定"><a href="#原型-Bean-被固定" class="headerlink" title="原型 Bean 被固定"></a>原型 Bean 被固定</h3><p>明明定义的是多例<code>SCOPE_PROTOTYPE</code>，为啥每次服务请求打印的地址都是同一个呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入<code>http://localhost:8080/test</code> 打印的都是同一个地址 <code>service:demo.generator.ServiceImpl@3501ee32</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceImpl service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;test&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service:&quot;</span> + service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>当一个属性成员 <code>service</code> 声明为 <code>@Autowired</code> 后，那么在创建 <code>Controller</code> 这个 <code>Bean</code> 时，会先使用构造器反射出实例，然后来装配各个标记为 <code>@Autowired</code> 的属性成员（装配方法参考 <code>AbstractAutowireCapableBeanFactory #populateBean</code>）。具体到执行过程，它会使用很多 <code>BeanPostProcessor</code> 来做完成工作，其中一种是 <code>AutowiredAnnotationBeanPostProcessor</code>，它会通过 <code>DefaultListableBeanFactory#findAutowireCandidates</code> 寻找到 <code>ServiceImp</code> 类型的 <code>Bean</code>，然后设置给对应的属性（即 <code>service</code> 成员）。<br>关键执行步骤可参考 <code>AutowiredAnnotationBeanPostProcessor.AutowiredFieldElement#inject</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object bean, <span class="meta">@Nullable</span> String beanName, <span class="meta">@Nullable</span> PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">   Field field = (Field) <span class="keyword">this</span>.member;</span><br><span class="line">   Object value;</span><br><span class="line">   <span class="comment">//寻找“bean”</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.cached) &#123;</span><br><span class="line">      value = resolvedCachedArgument(beanName, <span class="keyword">this</span>.cachedFieldValue);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//省略其他非关键代码</span></span><br><span class="line">     value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//将bean设置给成员字段</span></span><br><span class="line">      ReflectionUtils.makeAccessible(field);</span><br><span class="line">      field.set(bean, value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>待我们寻找到要自动注入的 <code>Bean</code> 后，即可通过反射设置给对应的 <code>field</code>。这个<code>field</code> 的执行只发生了一次，所以后续就固定起来了，它并不会因为 <code>ServiceImpl</code> 标记了 <code>SCOPE_PROTOTYPE</code> 而改变。</p>
<p>所以，当一个单例的 <code>Bean</code>，使用 <code>autowired</code> 注解标记其属性时，（这里指单例的 <code>Controller</code> 这个 <code>Bean</code>），你一定要注意这个属性值 （这里指<code>service</code>）会被固定下来。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过上述源码分析，我们可以知道要修正这个问题，肯定是不能将 <code>ServiceImpl</code> 的 <code>Bean</code> 固定到属性上的，而应该是每次使用时都会重新获取一次。所以这里我提供了两种修正方式：</p>
<h4 id="自动注入-Context"><a href="#自动注入-Context" class="headerlink" title="自动注入 Context"></a>自动注入 <code>Context</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;test&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&quot;service: &quot;</span> + getService();</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceImpl <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(ServiceImpl.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用-Lookup-注解"><a href="#使用-Lookup-注解" class="headerlink" title="使用 Lookup 注解"></a>使用 Lookup 注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;test&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service:&quot;</span> + getService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceImpl <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>在修正代码中，我们看到 <code>getService()</code> 方法的实现返回值是 null，这或许很难说服自己，为啥返回<code>null</code>可以生成新的实例对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lookup</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServiceImpl <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//下面的日志会输出么？</span></span><br><span class="line">    log.info(<span class="string">&quot;executing this method&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>以上代码，添加了一行代码输出日志。测试后，我们会发现并没有日志输出。<br>那它是怎么实现的呢，看下<code>CglibSubclassingInstantiationStrategy</code>的内部类<code>LookupOverrideMethodInterceptor</code>的 <code>intercept</code> 方法，这里省略了代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BeanFactory owner;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy mp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owner.getBean(method.getReturnType())); <span class="comment">// 方法的返回类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>BeanFactory</code> 来获取 <code>Bean</code>，<code>getBean(method.getReturnType())</code>。当使用 <code>Lookup</code> 注解一个方法时，这个方法的具体实现已并不重要，里面代码随便怎么写都可以。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>可以使用<code>scope</code>注解的<code>proxyMode</code>，设置成<code>target_class</code>，这样注入到<code>controller</code>的<code>bean</code>就是代理对象了，每次都会从<code>beanfactory</code>里面重新拿过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;prototype&quot;,proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Scope-注解说明"><a href="#Scope-注解说明" class="headerlink" title="Scope 注解说明"></a>Scope 注解说明</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Scope</span>(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)这个是说在每次注入的时候回自动创建一个新的bean实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=ConfigurableBeanFactory.SCOPE_SINGLETON)单例模式，在整个应用中只能创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_GLOBAL_SESSION)全局session中的一般不常用</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_APPLICATION)在一个web应用中只创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_REQUEST)在一个请求中创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_SESSION)每次创建一个会话中创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="built_in">`Scope`</span> 里面还有个属性</span><br><span class="line"></span><br><span class="line">proxyMode=ScopedProxyMode.INTERFACES创建一个JDK代理模式</span><br><span class="line"></span><br><span class="line">proxyMode=ScopedProxyMode.TARGET_CLASS基于类的代理模式</span><br><span class="line"></span><br><span class="line">proxyMode=ScopedProxyMode.NO（默认）不进行代理</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>java 8 Stream Tutoriala</title>
    <url>/2021/04/15/java-8-Stream-Tutoriala/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java学习网站 <a href="https://www.logicbig.com/">logicbig</a></p>
<p> <a href="https://www.logicbig.com/tutorials/core-java-tutorial/java-util-stream/stream-api-intro.html">java 8 Stream Tutoriala</a></p>
<p>介绍下几个常用的函数接口</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> Consumer&lt;T&gt; andThen(Consumer&lt;? <span class="keyword">super</span> T&gt; <span class="keyword">after</span>) &#123;</span><br><span class="line">        Objects.requireNonNull(<span class="keyword">after</span>);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Predicate&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">boolean</span> test(T t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="function"><span class="title">and</span>(<span class="params">Predicate&lt;? <span class="built_in">super</span> T&gt; other</span>)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="function"><span class="title">negate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="function"><span class="title">or</span>(<span class="params">Predicate&lt;? <span class="built_in">super</span> T&gt; other</span>)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="function"><span class="title">isEqual</span>(<span class="params"><span class="built_in">Object</span> targetRef</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : <span class="built_in">object</span> -&gt; targetRef.equals(<span class="built_in">object</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface <span class="built_in">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R apply(T t);</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="built_in">Function</span>&lt;V, R&gt; compose(<span class="built_in">Function</span>&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> T&gt; before) &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">(V v)</span> -&gt;</span> apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="built_in">Function</span>&lt;T, V&gt; andThen(<span class="built_in">Function</span>&lt;? <span class="built_in">super</span> R, ? <span class="keyword">extends</span> V&gt; after) &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">(T t)</span> -&gt;</span> after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="built_in">Function</span>&lt;T, T&gt; identity() &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p> <code>Predicate</code>的运用，可以组合条件筛选数据，可以去重等</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> Predicate&lt;<span class="keyword">String</span>&gt;</span><br><span class="line">            p1 = s -&gt; s.<span class="built_in">contains</span>(<span class="string">&quot;bar&quot;</span>),</span><br><span class="line">            p2 = s -&gt; s.<span class="built_in">length</span>() &lt; <span class="number">5</span>,</span><br><span class="line">            p3 = s -&gt; s.<span class="built_in">contains</span>(<span class="string">&quot;foo&quot;</span>),</span><br><span class="line">            p4 = p1.<span class="built_in">negate</span>().<span class="built_in"><span class="keyword">and</span></span>(p2).<span class="built_in"><span class="keyword">or</span></span>(p3);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Stream</span>.<span class="built_in">of</span>(<span class="string">&quot;bar&quot;</span>,<span class="string">&quot;foobar&quot;</span>,<span class="string">&quot;barBaz&quot;</span>).<span class="built_in">filter</span>(p4).forEach(System.out::println); <span class="comment">// 打印 foobar</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Bean&gt; list = Lists.newArrayList(<span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>),<span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>),<span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="built_in">String</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="function"><span class="title">distinct</span>(<span class="params"><span class="built_in">Function</span>&lt;? <span class="built_in">super</span> T,?&gt; <span class="keyword">function</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">Object</span>&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> t -&gt; set.add(<span class="keyword">function</span>.apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        list.stream().filter(distinct(Bean::getName)).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Function</code> 的运用，如求正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积<code>function(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>，斐波那契数列 <code>0、1、1、2、3、5、8、13、21、34</code>，柯里化等</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    static <span class="keyword">Function</span>&lt;<span class="type">Integer</span>, <span class="type">Integer</span>&gt; <span class="keyword">function</span>;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">         <span class="keyword">function</span> = n -&gt; n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="keyword">function</span>.apply(n - <span class="number">1</span>);</span><br><span class="line">         IntStream.range(<span class="number">0</span>,<span class="number">10</span>).<span class="keyword">forEach</span>(i -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply(i)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    static <span class="keyword">Function</span>&lt;<span class="type">Integer</span>, <span class="type">Integer</span>&gt; <span class="keyword">function</span>;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">         <span class="keyword">function</span> = n -&gt; n == <span class="number">0</span> ? <span class="number">0</span> : n == <span class="number">1</span> ? <span class="number">1</span> : <span class="keyword">function</span>.apply(n - <span class="number">1</span>) + <span class="keyword">function</span>.apply(n - <span class="number">2</span>);</span><br><span class="line">         IntStream.range(<span class="number">0</span>,<span class="number">10</span>).<span class="keyword">forEach</span>(i -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply(i)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> Function&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; f1 = s -&gt; s.<span class="built_in">toLowerCase</span>(),</span><br><span class="line">    f2 = s -&gt; s.<span class="built_in">replaceAll</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>),f3 = f1.<span class="built_in">andThen</span>(f2),f4= f1.<span class="built_in">compose</span>(f2);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(f3.<span class="built_in">apply</span>(<span class="string">&quot;A&quot;</span>)); <span class="comment">// a</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(f4.<span class="built_in">apply</span>(<span class="string">&quot;A&quot;</span>)); <span class="comment">// b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">Function</span>&lt;<span class="built_in">String</span>, <span class="built_in">Function</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt;&gt; f = a -&gt; b -&gt; a + b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        System.out.println(f.apply(<span class="string">&quot;hello&quot;</span>).apply(<span class="string">&quot;java&quot;</span>)); <span class="comment">// hello java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Supplier</code> 的运用，如反射实例化对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySupplier</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; <span class="keyword">type</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">MySupplier</span>(<span class="params">Class&lt;T&gt; <span class="keyword">type</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span>.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Supplier&lt;T&gt; <span class="function"><span class="title">newInstance</span>(<span class="params">Class&lt;T&gt; <span class="keyword">type</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySupplier&lt;&gt;(<span class="keyword">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">       Bean bean = newInstance(Bean.class).get(); <span class="comment">// 无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="title">implements</span> <span class="title">Supplier</span>&lt;</span>Integer&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> item;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Stream</span>.<span class="built_in">generate</span>(<span class="keyword">new</span> <span class="built_in">Test</span>()).<span class="built_in">limit</span>(<span class="number">10</span>).forEach(System.out::println); <span class="comment">// 0~9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举一些比较冷门的例子<br><code> merge</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        HashMap&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; <span class="keyword">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.merge<span class="function"><span class="params">(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;v&quot;</span>,(oldV,newV) -&gt; oldV.concat(newV))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">entrySet</span><span class="params">()</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>reduce</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        HashMap&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; <span class="keyword">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        <span class="built_in">String</span> result = <span class="keyword">map</span>.entrySet<span class="function"><span class="params">()</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(<span class="built_in">Map</span>.Entry::getKey)</span>.<span class="title">reduce</span><span class="params">((k1,k2) -&gt; k1.concat(k2))</span>.<span class="title">get</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(result)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Collectors.mapping</code> 下游收集器，对姓名进行分组，然后收集<code>count</code>最大的数据</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.<span class="built_in">newArrayList</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Bean</span>(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Optional&lt;Integer&gt;&gt; map =  list</span><br><span class="line">                .<span class="built_in">stream</span>()</span><br><span class="line">                .<span class="built_in">collect</span>(Collectors.<span class="built_in">groupingBy</span>(Bean::getName,</span><br><span class="line">                        Collectors.<span class="built_in">mapping</span>(Bean::getCount,Collectors.<span class="built_in">maxBy</span>(</span><br><span class="line">                        Comparator.<span class="built_in">comparing</span>(Function.<span class="built_in">identity</span>())))));</span><br><span class="line">        System.out.<span class="built_in">println</span>(map.<span class="built_in">get</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// 200</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(map.<span class="built_in">get</span>(<span class="string">&quot;c&quot;</span>)); <span class="comment">// 200</span></span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> &#123;</span></span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>collectingAndThen</code> 下游收集器 ，对名字进行分组，然后收集最大的 <code>count</code> 数据，并取得最大的结果，<br> <code>collectingAndThen</code> 是为了对分组的数据进一步处理，而 <code>Collectors.mapping</code> 和 <code>.map</code> 类似，是对数据的一种转换，映射，看下面第二个例子， <code>collectingAndThen</code>  和 <code>toMap</code> 类似，看下面第三个例子</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.<span class="keyword">new</span><span class="type">ArrayList</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Integer&gt; map =  list</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Bean:<span class="type"></span>:getName,</span><br><span class="line">                        Collectors.collectingAndThen(Collectors.mapping(Bean:<span class="type"></span>:getCount,Collectors.maxBy(Comparator.comparing(Function.identity()))),Optional:<span class="type"></span>:<span class="keyword">get</span>)));</span><br><span class="line">        map.entrySet().forEach(System.out:<span class="type"></span>:println); <span class="comment">// 打印 a=200 c=200</span></span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果和 <code>list.stream().map(Bean::getCount).collect(Collectors.toList());</code> 一样</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.newArrayList(</span><br><span class="line">                <span class="built_in">new</span> Bean(&quot;a&quot;,<span class="number">100</span>),</span><br><span class="line">                <span class="built_in">new</span> Bean(&quot;a&quot;,<span class="number">200</span>),</span><br><span class="line">                <span class="built_in">new</span> Bean(&quot;c&quot;,<span class="number">200</span>));</span><br><span class="line">        Collector&lt;Bean,<span class="type">Integer</span>,List&lt;<span class="type">Integer</span>&gt;&gt; collector = (Collector&lt;Bean, <span class="type">Integer</span>, List&lt;<span class="type">Integer</span>&gt;&gt;) Collectors.<span class="keyword">mapping</span>(Bean::getCount,Collectors.toList());</span><br><span class="line">        List&lt;<span class="type">Integer</span>&gt; <span class="keyword">temp</span> = list.stream().collect(collector);</span><br><span class="line">        <span class="keyword">temp</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    static <span class="keyword">class</span> Bean &#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        String <span class="type">name</span>;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="type">Integer</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Bean&gt; <span class="keyword">list</span> = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">      Map&lt;<span class="keyword">String</span>,<span class="keyword">Integer</span>&gt; map = <span class="keyword">list</span>.stream().collect(Collectors.toMap(Bean::getName,Bean::getCount,<span class="keyword">Integer</span>::max));</span><br><span class="line">      map.entrySet().stream().<span class="keyword">forEach</span>(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="built_in">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">Integer</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Collectors.partitioningBy</code> 条件分组，满足条件为 <code>true</code>，举个例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">Boolean</span>, List&lt;Bean&gt;&gt; map =</span><br><span class="line">              list.stream().collect(Collectors.partitioningBy(bean -&gt; bean.getCount() &gt; <span class="number">100</span>,</span><br><span class="line">                      Collectors.mapping(<span class="built_in">Function</span>.identity(),Collectors.toList())));</span><br><span class="line">    map.entrySet().stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="built_in">String</span> name;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台打印</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span>=[Test.Bean(<span class="attribute">name</span>=a, <span class="attribute">count</span>=100)]</span><br><span class="line"><span class="literal">true</span>=[Test.Bean(<span class="attribute">name</span>=a, <span class="attribute">count</span>=200), Test.Bean(<span class="attribute">name</span>=c, <span class="attribute">count</span>=200)]</span><br></pre></td></tr></table></figure>
<p><code>Collectors.reducing</code>  对名字进行分组，然后收集最大的 <code>count</code> 数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Bean&gt; <span class="keyword">list</span> = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        BinaryOperator&lt;<span class="keyword">Integer</span>&gt; beanBinaryOperator = BinaryOperator.maxBy(<span class="keyword">Integer</span>::compareTo);</span><br><span class="line">            Map&lt;<span class="keyword">String</span>,<span class="keyword">Integer</span>&gt; map  =  <span class="keyword">list</span>.stream().collect(Collectors.groupingBy(Bean::getName,Collectors.reducing(<span class="number">0</span>,Bean::getCount,beanBinaryOperator)));</span><br><span class="line">        map.entrySet().stream().<span class="keyword">forEach</span>(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="built_in">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">Integer</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span>=<span class="number">200</span></span><br><span class="line"><span class="attr">c</span>=<span class="number">200</span></span><br></pre></td></tr></table></figure>


<p><code>Collector.of()</code>  看下部分源码，<code>supplier</code> 提供者<code>A</code>，一般是提供操作的容器，元素等工具，<code>accumulator</code> 是 <code>A</code> 对 <code>T</code> 元素进行一个操作，<code>combiner</code> 是<code>A</code>对 <code>T</code> 操作的结果进行一个合并，<code>finisher</code> 将 <code>A</code> 进行转换返回结果 <code>R</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span><span class="operator">&lt;</span><span class="type">T</span>, <span class="type">A</span>, <span class="type">R</span><span class="operator">&gt;</span> <span class="type">Collector</span>&lt;<span class="type">T</span>, <span class="type">A</span>, <span class="type">R</span>&gt; of(<span class="type">Supplier</span>&lt;<span class="type">A</span>&gt; supplier,</span><br><span class="line">                                             <span class="type">BiConsumer</span>&lt;<span class="type">A</span>, <span class="type">T</span>&gt; accumulator,</span><br><span class="line">                                             <span class="type">BinaryOperator</span>&lt;<span class="type">A</span>&gt; combiner,</span><br><span class="line">                                             <span class="type">Function</span>&lt;<span class="type">A</span>, <span class="type">R</span>&gt; finisher</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.<span class="keyword">new</span><span class="type">ArrayList</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        Collector&lt;Bean,StringJoiner,<span class="keyword">String</span>&gt; collector = Collector.of(</span><br><span class="line">                () -&gt; <span class="keyword">new</span> <span class="type">StringJoiner</span>(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">                (stringJoiner,bean) -&gt; stringJoiner.add(bean.getName()),</span><br><span class="line">                StringJoiner:<span class="type"></span>:merge,</span><br><span class="line">                StringJoiner:<span class="type"></span>:toString</span><br><span class="line">        );</span><br><span class="line">        System.out.println(list.stream().collect(collector));</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考</p>
<p> <a href="https://winterbe.com/posts/2014/03/16/java-8-tutorial/">java-8-tutorial</a><br><a href="https://www.kancloud.cn/hanxt/javacrazy/">恕我直言：你可能真的不会java编程</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2021/04/21/mybatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1807381939&auto=1&height=66"></iframe>
 <span id="more"></span>

<p>项目中<code>CRUD</code>，写好<code>XML</code>很重要<br>个人经常使用的模板</p>
<ul>
<li>定义全属性的 <code>ResultMap</code></li>
<li>使用 <code>&lt;sql&gt;&lt;/sql&gt;</code> 抽离片段<br><code>&lt;include&gt;&lt;/include&gt;</code> 重复使用 <ul>
<li>表名 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span></span><br><span class="line">    表名</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>order by 条件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;condition&quot;</span>&gt;</span></span><br><span class="line">    表字段</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>表字段<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;sql <span class="built_in">id</span>=<span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">id</span>,</span><br><span class="line">    <span class="built_in">name</span>,</span><br><span class="line">    ...</span><br><span class="line">    表字段</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure></li>
<li>表字段赋值<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;allValues&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    #</span><span class="template-variable">&#123;id,jdbcType = BIGINT&#125;</span><span class="xml">,...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>主键赋值<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;uniquekeyField&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    #</span><span class="template-variable">&#123;id,jdbcType = BIGINT&#125;</span><span class="xml">；</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>条件赋值<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;setValues&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        id = #</span><span class="template-variable">&#123;id,jdbcType = BIGINT&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">   ...</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>搜索条件赋值 <code>prefixOverrides</code> 当第一个条件不满足，自动去除<code>AND 或者 OR</code>  <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">sql</span> id = &quot;searchFields&quot;&gt;</span><br><span class="line">    trim prefix=&quot;where&quot; prefixOverrides=&quot;and|or&quot;&gt;  </span><br><span class="line">        &lt;<span class="keyword">if</span> test=&quot;name!=null&quot;&gt;  </span><br><span class="line">            <span class="keyword">AND</span> <span class="type">name</span> <span class="keyword">like</span> concat(<span class="string">&#x27;%&#x27;</span>,#&#123;<span class="type">name</span>,jdbcType=<span class="type">VARCHAR</span>&#125;,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">    &lt;/trim&gt;  </span><br><span class="line">&lt;/<span class="keyword">sql</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>分页查询<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id = <span class="string">&quot;findByPage&quot;</span> resultMap = <span class="string">&quot;resultMap&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span> /&gt;</span><br><span class="line">    <span class="keyword">from</span> 表名</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;searchFields&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">limit</span> #&#123;开始&#125;,#&#123;分页大小&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>查询数量<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id = <span class="string">&quot;findByCount&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> 表名</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;searchFields&quot;</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>查询所有字段<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;findAllFields&quot;</span>&gt;</span><br><span class="line">   <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">   <span class="keyword">from</span> 表名</span><br><span class="line">   &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allValues&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>根据 <code>id</code> 查询，复用 <code>uniquekeyField</code> <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;findById&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量查询<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;batchSelect&quot;</span> resultType=<span class="string">&quot;&quot;</span> parameterType=<span class="string">&quot;java.util.List&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">from</span> 表名 </span><br><span class="line">        &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">           id <span class="keyword">in</span></span><br><span class="line">            &lt;<span class="built_in">trim</span> prefix=<span class="string">&quot;(&quot;</span> suffix=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">                &lt;foreach <span class="keyword">collection</span>=<span class="string">&quot;list&quot;</span> item=<span class="string">&quot;item&quot;</span>  <span class="keyword">index</span>=<span class="string">&quot;index&quot;</span>  separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">                    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line">                &lt;/foreach&gt;</span><br><span class="line">            &lt;/<span class="built_in">trim</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;condition&quot;</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">select</span> id=&quot;findByArray&quot; parameterType=&quot;Object[]&quot; resultType=&quot;&quot;&gt;</span><br><span class="line">      <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = &quot;allFields&quot;&gt;</span><br><span class="line">      <span class="keyword">from</span> 表名</span><br><span class="line">        &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=&quot;array!=null&quot;&gt;</span><br><span class="line">              &lt;<span class="keyword">foreach</span> collection=&quot;array&quot; <span class="keyword">index</span>=&quot;index&quot; item=&quot;item&quot;</span><br><span class="line">                           <span class="keyword">open</span>=&quot;and id in(&quot;separator=&quot;,&quot;<span class="keyword">close</span>=&quot;)&quot;&gt;</span><br><span class="line">                      #&#123;item.id&#125;</span><br><span class="line">              &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>插入  <figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">insert</span> id = <span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> 表名</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量插入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">     insert into 表名 </span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span> = <span class="string">&quot;allFields&quot;</span>&gt;</span></span><br><span class="line">     values</span><br><span class="line">     <span class="comment">&lt;!--mybatis 参数映射为list @Param 可以指定入参名称--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span> = <span class="string">&quot;setValues&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>批量主键删除<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">delete</span> id=&quot;batchDelete&quot; parameterType=&quot;long&quot;&gt;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id <span class="keyword">in</span></span><br><span class="line">    &lt;<span class="keyword">foreach</span> collection=&quot;array&quot; item=&quot;item&quot; <span class="keyword">open</span>=&quot;(&quot; separator=&quot;,&quot; <span class="keyword">close</span>=&quot;)&quot;&gt;</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = &quot;uniquekeyField&quot;&gt;</span><br><span class="line">    &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">delete</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>主键删除<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">delete</span> id=<span class="string">&quot;delete&quot;</span> parameterType=<span class="string">&quot;long&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id = &lt;<span class="keyword">include</span> refid = <span class="string">&quot;uniquekeyField&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">delete</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量删除 <code>map.put(&quot;ids&quot;,&quot;1,2,3&quot;);map.put(&quot;name&quot;,&quot;kangpan&quot;)</code> <figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;batchDelete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  delete from 表名</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            id in (#</span><span class="template-variable">&#123;ids,jdbcType=BIGINT&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null &amp;&amp; name != &#x27;&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and name = #</span><span class="template-variable">&#123;name,jdbcType=VARCHAR&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>更新<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">update</span> id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">update</span> 表名 </span><br><span class="line">    &lt;<span class="keyword">set</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> t.id = &lt;<span class="keyword">include</span> refid = <span class="string">&quot;uniquekeyField&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">update</span> id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;&quot;</span>&gt;  </span><br><span class="line">      <span class="keyword">update</span> 表名  </span><br><span class="line">      &lt;<span class="built_in">trim</span> prefix=<span class="string">&quot;SET&quot;</span> suffixOverrides=<span class="string">&quot;,&quot;</span>&gt;  </span><br><span class="line">      &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line">      &lt;/<span class="built_in">trim</span>&gt;  </span><br><span class="line">      <span class="keyword">where</span> id = &lt;<span class="keyword">include</span> refid = <span class="string">&quot;uniquekeyField&quot;</span>&gt; </span><br><span class="line">  &lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量更新<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">update</span> id=&quot;batchUpdate&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class="line">    &lt;<span class="keyword">foreach</span> collection=&quot;list&quot; item=&quot;item&quot; <span class="keyword">index</span>=&quot;index&quot; <span class="keyword">open</span>=&quot;&quot; <span class="keyword">close</span>=&quot;&quot; separator=&quot;;&quot;&gt;</span><br><span class="line">        <span class="keyword">update</span> 表名 </span><br><span class="line">        &lt;<span class="keyword">set</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">include</span> refid = &quot;setValues&quot;&gt;</span><br><span class="line">        &lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">        <span class="keyword">where</span> t.id = &lt;<span class="keyword">include</span> refid = &quot;uniquekeyField&quot;&gt;</span><br><span class="line">    &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>
<a href="https://mybatis.org/mybatis-3/zh/">了解更多</a></li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>在容器中搭建运行FTP服务器</title>
    <url>/2021/04/29/%E5%9C%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%90%AD%E5%BB%BA%E8%BF%90%E8%A1%8CFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><h4 id="查看-docker-search-vsftpd"><a href="#查看-docker-search-vsftpd" class="headerlink" title="查看 docker search vsftpd"></a>查看 <code>docker search vsftpd</code></h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NAME</span>                                     DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line"><span class="attribute">fauria</span>/vsftpd                            vsftpd Docker image based <span class="literal">on</span> Centos <span class="number">7</span>. Suppo…   <span class="number">153</span>                                    <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">panubo</span>/vsftpd                            vsftpd - Secure, fast FTP server                <span class="number">36</span>                                     <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">vimagick</span>/vsftpd                                                                          <span class="number">13</span>                                     <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">odiobill</span>/vsftpd                          Very light vsftpd installation based <span class="literal">on</span> Debi…   <span class="number">7</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">million12</span>/vsftpd                         VSFTPD Server in a Docker                       <span class="number">7</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">emilybache</span>/vsftpd-server                                                                 <span class="number">6</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">avenus</span>/vsftpd-alpine                     Docker image of vsftpd server based <span class="literal">on</span> Alpin…   <span class="number">5</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">wildscamp</span>/vsftpd                         An FTP server designed to simplify local dev…   <span class="number">4</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">loicmathieu</span>/vsftpd                       vsftpd container                                <span class="number">2</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">akue</span>/vsftpd                              vsftpd Docker image based <span class="literal">on</span> Centos <span class="number">7</span>. Suppo…   <span class="number">1</span></span><br><span class="line"><span class="attribute">hiproz</span>/vsftpd                            an vsftpd that support virtual user which ha…   <span class="number">1</span></span><br><span class="line"><span class="attribute">benssson</span>/vsftpd                          copy of wildscamp/vsftpd but with pasv_addr_…   <span class="number">1</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">instantlinux</span>/vsftpd                      A clean, easy-to-use, tiny yet full-featured…   <span class="number">1</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">mikenye</span>/vsftpd-anon-uploads              A generic, ready-to-go anonymous ftp server …   <span class="number">1</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">undying</span>/vsftpd                           Vsftpd Docker Container                         <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">ledermann</span>/vsftpd                         Clone of helderco/docker-vsftpd, just to pro…   <span class="number">0</span></span><br><span class="line"><span class="attribute">dmanas</span>/vsftpd-mysql                                                                      <span class="number">0</span></span><br><span class="line"><span class="attribute">dolphyvn</span>/vsftpd_priv                                                                     <span class="number">0</span></span><br><span class="line"><span class="attribute">markhobson</span>/vsftpd                                                                        <span class="number">0</span></span><br><span class="line"><span class="attribute">valus</span>/vsftpd                             vsftpd <span class="literal">on</span> CentOS <span class="number">7</span> for internal usage.          <span class="number">0</span></span><br><span class="line"><span class="attribute">shourai</span>/vsftpd-alpine                    vsftpd based <span class="literal">on</span> alpine                          <span class="number">0</span></span><br><span class="line"><span class="attribute">ernestas</span>/vsftpd-server                   simple vsftpd server                            <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">openmicroscopy</span>/vsftpd-anonymous-upload   Vsftpd Docker image for anonymous FTP upload…   <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">zloystrelok</span>/vsftpd                       fixed fork vsftpd                               <span class="number">0</span></span><br><span class="line"><span class="attribute">vistrcm</span>/vsftpd                           This Docker container implements a vsftpd se…   <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="拉取镜像-docker-pull-fauria-vsftpd"><a href="#拉取镜像-docker-pull-fauria-vsftpd" class="headerlink" title="拉取镜像 docker pull fauria/vsftpd"></a>拉取镜像 <code>docker pull fauria/vsftpd</code></h4><figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Using default tag</span>: latest</span><br><span class="line"><span class="attribute">latest</span>: Pulling from fauria/vsftpd</span><br><span class="line"><span class="attribute">75f829a71a1c</span>: Downloading [=&gt;                                                 ]   2.15MB/75.86MB</span><br><span class="line"><span class="attribute">a1a6b490d7c7</span>: Downloading [=====&gt;                                             ]  719.8kB/6.415MB</span><br><span class="line"><span class="attribute">ad2cabfec967</span>: Downloading [======&gt;                                            ]  986.3kB/7.923MB</span><br><span class="line"><span class="attribute">c7a98e8d62f5</span>: Waiting</span><br><span class="line"><span class="attribute">10d192add873</span>: Waiting</span><br><span class="line"><span class="attribute">fc18a09c86d0</span>: Waiting</span><br><span class="line"><span class="attribute">5397e9c5e314</span>: Waiting</span><br><span class="line"><span class="attribute">e89f582c70f5</span>: Waiting</span><br><span class="line"><span class="attribute">8b8bdebbfc97</span>: Waiting</span><br><span class="line"><span class="attribute">026ae919720d</span>: Waiting</span><br></pre></td></tr></table></figure>
<h3 id="获取本机地址-ipconfig"><a href="#获取本机地址-ipconfig" class="headerlink" title="获取本机地址 ipconfig"></a>获取本机地址 <code>ipconfig</code></h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">以太网适配器 vEthernet (Default Switch):</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : <span class="type">fe80</span>::f55c:<span class="number">61e5</span>:<span class="number">557</span>f:<span class="number">503</span>d%<span class="number">39</span></span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.231.193</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.240</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure>
<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>参数说明：<br><code>C:/docker-data/:/home/vsftpd</code> :映射 <code>docker</code> 容器 <code>ftp</code> 文件根目录（冒号前面是宿主机的目录<br><code>-p</code>：映射 <code>docker</code> 端口（冒号前面是宿主机的端口）<br><code>-e FTP_USER=test -e FTP_PASS=test </code>：设置默认的用户名密码<br><code>PASV_ADDRESS</code>：宿主机 <code>ip</code>，当需要使用被动模式时必须设置。<br><code>PASV_MIN_PORT~ PASV_MAX_PORT</code>：给客服端提供下载服务随机端口号范围，默认 <code>21100-21110</code>，与前面的 <code>docker</code> 端口映射设置成一样。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -v C:/docker-data/:/home/vsftpd -p <span class="number">20</span>:<span class="number">20</span> -p <span class="number">21</span>:<span class="number">21</span> -p <span class="number">21100</span>-<span class="number">21110</span>:<span class="number">21100</span>-<span class="number">21110</span> -e FTP_USER=test -e FTP_PASS=test -e PASV_ADDRESS=<span class="number">192</span>. <span class="number">168</span>.<span class="number">231</span>.<span class="number">193</span> -e PASV_MIN_PORT=<span class="number">21100</span> -e PASV_MAX_PORT=<span class="number">21110</span> --name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure>
<h3 id="进入容器-docker-exec-i-t-vsftpd-bash"><a href="#进入容器-docker-exec-i-t-vsftpd-bash" class="headerlink" title="进入容器 docker exec -i -t vsftpd bash"></a>进入容器 <code>docker exec -i -t vsftpd bash</code></h3><p>进入 <code>home/vsftpd</code> 文件，查看创建的用户 <code>test</code>，进入<code>test</code> 目录， 创建 <code>1.txt 2.txt</code>，或者在宿主机的 <code>C:/docker-data/test</code> 文件里面手动创建，创建之后自动更新 <code>home/vsftpd/test</code>里面的文件。</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">[root@bfdc203461de /]# ls</span><br><span class="line">anaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  <span class="keyword">proc</span><span class="title">  root</span> <span class="title"> run</span> <span class="title"> sbin</span> <span class="title"> srv</span> <span class="title"> sys</span> <span class="title"> tmp</span> <span class="title"> usr</span> <span class="title"> var</span></span><br><span class="line"><span class="title">[root@bfdc203461de</span> /]#<span class="title"> cd</span> home/</span><br><span class="line">[root@bfdc203461de<span class="title"> home]#</span> ls</span><br><span class="line">vsftpd</span><br><span class="line">[root@bfdc203461de<span class="title"> home]#</span> cd<span class="title"> vsftpd/</span></span><br><span class="line"><span class="title">[root@bfdc203461de</span> vsftpd]#<span class="title"> ls</span></span><br><span class="line"><span class="title">index.html</span> <span class="title"> test</span></span><br><span class="line"><span class="title">[root@bfdc203461de</span> vsftpd]#<span class="title"> cd</span> test/</span><br><span class="line">[root@bfdc203461de<span class="title"> test]#</span> ls</span><br><span class="line">1.txt  2.txt</span><br><span class="line">[root@bfdc203461de<span class="title"> test]#</span> exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>使用<code>IE</code>浏览器 输入 <code>ftp://192.168.231.193/</code>可以查看到我们新建的文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">FTP 根位于 <span class="number">192.168</span>.<span class="number">231.193</span></span><br><span class="line">若要在文件资源管理器中查看此 FTP 站点，请单击“视图”，然后单击“在文件资源管理器中打开 FTP 站点”。 </span><br><span class="line"><span class="number">04</span><span class="regexp">/29/</span><span class="number">2021</span> <span class="number">01</span>:<span class="number">10</span>下午              <span class="number">0</span> <span class="number">1</span>.txt</span><br><span class="line"><span class="number">04</span><span class="regexp">/29/</span><span class="number">2021</span> <span class="number">01</span>:<span class="number">12</span>下午              <span class="number">0</span> <span class="number">2</span>.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写没有web容器的Sping程序</title>
    <url>/2021/05/09/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B2%A1%E6%9C%89/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0e4c519ee927df28339c51ecb056834a81f0032157c3d33c7849ab4c66c30a96">9943c1717e2782a5be9ecb675b444bc9fb48e049bfddc91202fd6d059e1a4d5e973c33d2ffa19a01370f744b7b5845adfbaf7b3dee729ef8adad1bf6ff0db3148090605ccca2accebf2b23386aa7d6bae43623961b61a80aa02144e7c353070b787a8fbaf3d987ebd447bde6cdb936949bed683d7e4867f4d1fe674b9d83f744b5ac49f3c76d0ae93db4b32fabc0fbf741f11ac61b079b7ab3e15ce5f1252f5ed651338bff758cd04db0214375e46f4070bcda6fcbac8f31ec650b8a62c20705089d03190c5244ff132d0eb7d6f81893bfc2c0458fbc70c2ec90d5cecc10c11c56929dccabf33eeb5fcbb6541908c2352c50d6e9523a39655a167ffa3915d0afa4cbbe5c5e5850f59843663d4707276ceba5b43bb9088bf0a7c4bad99ccfeb39a2c1c496101e77b9fe099aa07622e728f9ec49987f6c296c88cfce0c18ee8d7f80b269d5e87b45a63c6dcb947d2e51b4a164844baef2f6e005236c44df7cc367efa96b5640b5bdc5e1cdce8eaeed4dd59f3e3ebf58ae9907aada8bb76e992192d057e68141bec52a79af0903bea32296d4ef8bf0449e5b147d4b53ba3f19244a97d3429731f8d157f6c280db1633f95eb67fa47b51bb2a45b6651f813f3a9b4103fee4ba2762ca4f8d718a040cd75923b957486bd15db5fce5a44b48a14e5d5d63c3bdfbcf160f3ce6672cb5c82f0ae5300e5d639797e2079c6ffa857f228d112aa4c35ea9cd1d87d01733983c1fa093daca6dffc1b0b0ecada58538793a1a02a5fd6a93bd313faeefc8be3b61c9976dd400bfcbd6563566f0ad5c50fadee93d08dd956df9a6ad3fc72790f13de6042a3187797ccbce5a9f6eb2f0642f4d984a5ffbc0b561068fcfab116e0e8c4bc0abcac9258ce13afd5eb8093b1ee86b88dd5bf50a878224d6fb6024d0826c66e19a769bc1f78f8a233129d346be49978d520e67596ab2f454be0bca90938b44a66926b61b5e52c4f205d358121d38d81ac0f1d9f15d6cba189b282039b6e655ab9679d3ba9777452257be8b5a626cf70d7851c57b0b65b594b4a6956630394516f8f6ecbc9e7cfff667c0137c170413ec237a38f8e5cb5def0c89ce8aa0f21cedbf96c2683f2dadd55b9c945b125ceff8c9cbf7c2c16d2b6a524e8f2cbc224800e7d516c421e3b4a4b964762e8a8a4c22baf0ab9c1f847c1174fd6a12b9b72ecf7f28dd0c6f0e2a55c8c5e15c4ce8c2e50b07732029f95203703d931db770738934bd5d259438dedd86552b447981081d186ae22cf1f98791d79ed07b57d4af2e6e329a6e44c8e7df2f885889e6b113b535971b74c5ffbe90a04a3c873de50edb0c58c79c0284beff028ed2e138208ba85cce4a6ae9b1d0ddcad7d7cfe5c80e4f47e166e92b4b0338aec240e86b5f88ba1563de91eaed2f07e333b4b22ff5f4e2d030756c3fc96a727c30d691bc6f94af9a9b4cbd5514fcb1d07f39a9a20acd6513bad690e84db1fa42969668f4fc649c41caf4ffb1421ea762ca52afb0564b53a095d48aacb2f175bd428f4ed823ad181dd9202ef34853fa46994bedd3cd302002d61cf39d7d87a9dbddc961e152f4862fe962a9f9ae797faca2358d5697703ec2abc3c6ac407ad5a3b2bdad225f4ac6ef14d01eb6c5804d2d0b04db569d40137fb4e3b6644c347ad6c45047a5cfaf1c44f483833231949ccbf43c91aab4eadfd35ddf8324287d3a43b5e7e244b22e6297d54314d6c6334ecfeb0ce79d81e936da96f20f67fb3f73013706b6e86edba513a9ae752641ba33d8502faa9b5cb095d17f03b5bacf27a20a22466ccade781481427abe436aa0714e7c569db0ad37e43df711aa6843fdda988c3c65e6f29c14e4de119aaad55fc79393692b4b99e7d7689b983ec7a9cae7a090da0093a8e29b6e936811e1679018a07df3d7c3b97cd5a4b61f47c60e5daf44abd2ed44766351f25be128f0bcc178b5eba8985bad7dc175540d7b9997493d826bec48df5658529f7ca11ba150587302b45ec9d70e58b94193d3dfb48ce50553c5bf521554c40489635624debb2908cb1387d1c76ffa2eb17f3ac671c8d686f62354927713ed029cc13bf7cf48f3591ac52289e5e61daf166f0ac151315f5dc5aab5423fd10a76b56b0a9cf29023062147484749251e74eb59ab60d613016973a3f7b3800ccba97318a7f7b825fe75cd98536102e9dc65248d1f2e49e3214862bff845d746c3c01b1e660130e322cc1e37245c869443c98d1cb4647c6a31b0d8603aa35bbbb390d086e4cfb390658cfde147ca97c8ae1769be1f21129585a2683d5b49117bcc5e6182ae7d7447fd1524671da39eeaa910eb7906c572fa4de4bbe9f93d33d03da2740ca8493d68123db942ee23aaf56645d05f49663f36ff99dce5cd75cfed5f49d1a7def7e0df370a5f62165d5024dcaa8d298ddd6dbcf297b9c868503df22a57ece803a7e34d6ec9de31b0629ee295d3a9f7493b2afd251603b959d80d450bc867cb07d6eed0956f28ee6d51a8a9c9dc08e071005bf58891c5c440027bccfa39cf200f1995718403360aafbb152bf22d44c8c40d7100c0385a629f17066cd453c469a9e43fe0cf242b07dd4264b59cb9f0c2554c4f3c2568e953fcb56397532ca128b04f735d671c43e6bfa756c4a7d3fc5c4ded003889d56e523be49709f23eb45c8573b148b548d424266b1005cf823de87c70ba4eaf33c7d108a79ba69a4b57c4d5fc66ed633e0a1f3a3efcbc11c5b63c8a378bcebf3893738d63481d61c1add0315eeea35b891c105202acc449b031a34466d18e3555d31650e3ff4bf7f354850aeca6c880c21d7a06c2c9afd8c553b0e2320783d201fba73932c83b78f191eea591753d5f5b7fce1431342676e46c930fba17b8490aa68cd3f674c71d0f52a0c66c5f62e4f768f4e94ae9ad8aa9cd2187fbf1fe7c19818efae70f592e0cc80967adbc49e6caabf3f8373ab1ef3a6ccd3705e07389551b2cfe3d6ede4fc2ae8c9c702066a90c564ba25423ba6045d9bbfcf5e823e7031ef56e994880e16bd437fa8078b022b9716a609cbc08de784acaa0cf0702650b6bc71f870924b38d64ddd19f4739d8ac978274db1a6ee2c206ef5464d1a30538d0475892c30cdbb714cb355a5d894ba016456b5292c8506825f9bb0b8a610e397c2ef0a61330770d9c448ee011d4232ba3bc5b207d0330297329c2df1cb79d90665d6351027e83b1bca769f8e962c2a59b1e757adc727467dc713993db84566f58ff14e2b3dd3b3dfd725c19564c3666d4662ec7c1eab85b5a2bdc5e8ef5aa452fc0618b82a2f2e8bc66d82e723628a118115833082aafb58f1ad3ee6b37b92121778c028e4635ca3f5fcc6ab5e90d64bcd283a0962d4ed788da89d3bf5d6edacf0e14fcb8b13b2dd41687e8b819d910d7da8beb168026f0a1595b3859493eaa6e12c0acb144a3f0010c65be3bd36c0a0c834583515de8a152fd4783f77fcf1ef052e3bba12abd3a8f7b211958173099931f78c28a4a0cbdb0208f082c031d7e7319f0641fff594a10de6836de3b65217c026ffe8b997bb53b755992ecaf5751d9d18dcdc43c0825d2782a9eeaa734b0f0b03e6a1bdc05f8d6242d32c4d3512302cdc1c5762d06429a5e02dcd47f4de3747cd99e3c0b921c79672ac4fd125a9895c8d74a97b42b9df3f44250f6561b8558e9ddadc090b209e2262307081c4003ab2396a0dcfdb623919df8e9901eb3fd3b5594039fb0eaaaef9040696694c55a3b40ea6e43c165f9c533e1a814c9e35f89d9497a3aa1dc8f1c395090e696fd478e09eb161f046a5e30102abdf9642ca644ea6110ae059bcce0b7e299a6623106caf45d5aed5a7ccbdbebe80e81e6b9ee206cd8a1a9e4303b80ee989773327d2bdf145114185e4b31ba0616b98f5065bcbd937a2699138ad83550fef0ab481803abc1abd104a1bb662b4089ab6efecc5a9b720cb94c414fc81ebcc6bfa66cecc3d76000ee0fee1377e2ffbc0fb266f916a04556846dac7d95e2167452789f6050d4f82451936cc662284f971218e0ad052f85d85f89e9f64eafe082895fc87bb174642123549b55ff5fd25fb2dc88e8398d55cd3d9454f532ec6f06fc75672d3cb8329134df1b5212f7eae9cc29cb71395465df5fe28b5176ba414d9fa1eb2879da60ba2480aa21e9ff6805c4d37add670bcb7e5e24d8a64b98e5bcbd7fb42b490a227e58e9e53c8c32253a1a3e7ec9dcbf504a0d78c1aa239c31156d3094c5897667cae86e2d990b4422b68c28a1b1aad43485ac0f473097b28c1866dad58cbcfbf1cf91bc9b9fe275e9de19f4f830452bdf059f4b17dd5b3d3e8b43b4b430c4148389a35c79211bcf0bb428f7ac062d0b7176af0214b2dfe91911b661644bd9369ded36f79b07ddf955fb1d121b8570f45b4f7498fc51972e801f726c113d00a802b172c329aa019602be8d374141038bc5dcf481b7ffade8362d34faa556139685baf2964656fd6d085a98056ed93567ebf359581d02a238a62c6f0cb328e07212132a175f5b17d31b22ce904f0fba8dd918cfbb4c70a646dda6c141ef522f250f7eb2b0e1323df40bd14a85575ea014c285e03a8635870749f4659986b8164288e2ddf464c06403d8481b8072fa4950f36cc9fa4226628cda204875a69f14e353da4b6decaac05f7398341ee8a626de1160e98acf37013195b16892db44742756a9afd79b4cc4cd5a53b240f18b40fec1363db5f28d2d5c0133f89cdd19c47a0fe2d76da12b8c39e02b65d9bceaa430583859505dbe141df9f0fadc9bb8fba73757dab3c4079d734b869dfa11424bce78f7aca7a7049e986eb48fa3646e86aec29a67874d868e50f82238d48898991e6d8a6a034c5a8af99c43896fd3065951331d6a7910d153cdc0a3a00540d027b51289db984a7aac92cdb839ac98ce1d1b644c179cb926ad5e6c032eaf242aded1ea5d34aa52418784ad08d2ba32baa3037f49a88fd38a5bf8e4e8a04b3218b1c89c7166db0ae723d35ebca03c76f1b99aa170aa1a0264627f64abac1915e6409faeae982e9a2cc2054daed81dfadf1fa8c93908f1a96689c0a236b7a5cfe6e048342450d8f18f658737e050200d2b9aa751922903ea4466c44058a65a9d89cac3bc050e866ee1eaa8979111f98f3bda1eb1af348399efc49f2d1c8fd772b74e704c947b45c9bd10fbc5bc5227de384d9494bf9fecfb63de4c92d522b999ebd7883f801ec26148505e81ddfe6b9b94467ce9dac2831f07c12fdfb8f9e1c0f66d357487ff020692596794c73c5b8861980b28b6724d22cf06e8e5152a0ff80fe732ca6b2fab286d19c6b4cc7201487c36563072318aa2ec816903fff4bfd40d8e93f6e0f46acafcbc39e5b1fe2aae4f7b943e84e1ddafd5b458d6252b7e8e8402bdc9273c98f2fbb1aa85e6b335f81169db647d6ad23ff8282526ebc953b12b32f71bc0308ba831771d88da8d9b6aa036f2ad9903581c748be8ecfb80b0861af304b76589ae4e9cc9eca0c18c48cd755accc60ee6de4687b7502bd2a9ffef93835818ae062ed8a2fc88eedd13d9341cd659cb4d09a30de6bd4dbe89b70055fc72fc96d03cd5c965e5cccc9f4dd78b0485bf87b3a0b68cc661db1cabba68f3cb56bb201baf2d27ee76ba741662d4f52992e10360553257dffd4155f885a26cb7df69d99b8c6e3eb1bcc88d697433b2d75eb8a4b1657ebd9c421351b77308e8f3349bb7fc2c654b4abae79131b93651578e897ab91467b2e0612464ece8fb9c99cfe2ae82ebfbe1d6c0e0d0abacf17813dca222e48dcab0646edcbe38adced464b960a7a3d4b3f916d49a0ecf352c8dbfd1754a89f047b9c9cd1e43d6de06df4cdca68b6cdbd53a49ca887e8c845d2a59887a2c81facdb979611b23a91c72882806d97478fccc0ab2a5d730f6d1e8efe16f1d0c85891ad0b65490a7aa132e15589ebd7301229940c380cdc4a0a764c16811802502456792fb4ce4bbf58d0b43ac28a97841a160ada841fce4e5d9c42b587009ca1a968ddfad73f80e1794a1536f2ca85dbc7ceddd1f53017af1fabe90869f5d6298b16a51e0c605a96babba0d9b21e1b87e5f05d4a64cf1f06ab2621539e455f64b727ce0d075e1d2c13e1e7f22f623f0451b900df82e5af3e84493b500fced3cf7729a39efae15fab66be7eca4b85e854b531edf2e345c8b541a3fe1b54ada288bbb642bc0c12a9857aac8dd5ab6a55440dcfbd263882785d94776d096f02a90542d4780f4a785b5e266ba3215327b786e7822ce367439237b978739e534f625bc95f3998a2678a680078235ce628126a49b0119688cf59f71eb6df33a850c24ec17daf682466d9a376ac5f53bc92fffe1a44c9482628774a43957ba06bcaf371e5dff2764dc48baa3f8100f9e1d1201fc0bf2486beeb7940ccf85c243e4a1592f218ed7959f758cc94f4b7d36566058cd7dde27611e3e307e72172bac2e4802a7724b75a1a7a2afa63530164a5a57e82d4b3c35585a762833f17c126c6ff22a14a425a73ce9c0a8d4b3302bb375f08146c89dedbf9bed57f7c8df988534654e945cce09a2a4c0a1f7812368dad6d98142d1034acb3ab5325d815d5d298e5fa316fe9f7b041fa3781914b1ba982bb037de0cb0684e763a34ad04376d836bbcb5e033c8e0a76e43605a3a22d44cb59487c260fa8685f86169f1db2a13465dadedaae850a2d2e48688e24d4a2842ca2ac1b04688ce11b92ae5c615872bf8a048c851d64f50d65d75a7b05b422c65a34b12988ca593e4c631539419041ee79a6a40a02568e5f09e7bce8a297a61e7bb70be9d7272d664dd53a904912ca51ecfcb66bb059ed27973467612488acb2381b35fac3b000f60741e872fac9738c8dec6143f1ab7205dd7791d0b0d3158324d4d573bd869685477d53033b5b41dfd248dd99150ef2e4ba86dee66eb62563809a6d32c41ab6f80d387032baab3104e8c43c7c58da4ec03cd9ff86c32a116deb55b37bd959b8f0eaf72275127c9dc82127d07a26856010c7bddb64b8a0f46f96e2e08a639cbb27f9b81832bdbcf8aa281fa1f45205df32eda589f59b38712570427b89610b15ab548041038bd795dbcb7e8fdc82766ed29a3d60f8c1ba92cdd35175ec37f835bb3f90d1ed4e0f6df2baa9633b5a970b729cfc3d5884a4582c77870e6f82d3387a736ca4af995b189735fbcb0a0c3a690415b502512adf48ab85e0b4f94c873b3a5bcba6fe9a550bd0603203231bf591ae7cb0d082ffe98eeaed72fb11bafa7650938655bf1cbdb8c94fb10cfedd4652f83954904371ad4703940380ab1d0c98b39a388589de56d23fc2a0aec7e90923588cc0e1d4250a888821ca3c2ee3c28170cc8952286d45e136273c968e46c95f911514e3ad3b05270ac2bd1661a0e7dc3c6dedcdd06e649427b0d31a0d87fef38778ce7911df233d41b5692e247f64ad00a44762a298288a698fb8413754f74b0aef5709c3e26d0566faeff0cafc04dda033251e440c75693f6c7df9927665f413a69467c05918dd96e26e925fb8e1dbd034154501fd5de5381ce1b9d9354bf029cc2021a426c605c70a5fc3d877c2b00c95e69dbdf95842b0df280dd9a8076ad8048909ddfaede56b41e73d6054c5e6e94a1b9fa103285680bb37d055b2bef37c38eae7431079560b6e1cbf6fd6c81495ce9d39aac49da89e855ca74f77feebc7ec812fcc1069f149403807ef8a5e843a05a8d6a648d9bf2e1116d4545926dc3ee525f92404ce7359f0aa661e2f6657fdd41a83a2b618fef3f5ce0117ac47c05eed792bb86a74f24b75eae8da0b27dbec32464c6ba878e9379f77bf24ffc1156d859ed1425f69cbb12a7118709eb27232d69fe0c0b9d5014227da64ad922be6532641ffbdad127f51a14c3b8827a793872af9190268abaa434e9151c7c646c60b151f80269bf1deba9b38e12bfb5470a7231d89965f037d7f73c99349124eeb314416d6d808e35cf6d7e86173a6f9c618b9aced659d75502c73566d9840113d09c19c1cd3e095957b5a0812b3a904bc992782b91980c65608ddb5b16b3d604ec7fbd77092e590552c9d94f20fe9319e3fa2e0acfff1124b9c5a9a8ca7a57a556927c0d5717af525984aa5341b779137c2c6b388af288689103dd2dc02f31f7c19776b552e65d59a04b828b3955960597c3971f8a91a0ef3b80e17ea61d78836237a89f4f574ade6c07be6ac5a3481481e6f5daf84d1258439e5f158949a2563af2f9b8f74b12198cb2c2cd59d6d1cd97e5fcccb7b3c2924c7d958e8581a4f523d3719fb3edc5e73b92b63f3fa7cd3c1c3f08b63685265ece02df72bf93a1ae0d1e48d2f8fc3d8fcdb42468de983e95c785fdcd6b1dd03b1aaf331c59f2674241b8d87231057c35b84d5edcc4740a7f0c1c8cd184bd36bcc612be39f5293166a62fcf4f56c0ca0f698581ad5ac74acdad2f0089b2f382e37930a2c97939a59f7385af924c9d24ca1a9f9339f1d71eab660d904ffa569b74508a12fe7f59e0a88bcc8394d6a909caa00c627e373083ce1040b2b42e31fc689cae3a44f1b7b14ea6bacfcf57e2601a24b3404754e93f3137ff8304c520938c0a503ab872f4aaeae7eba791fb8fbba7ebab01bedc8de837fda6d97a3ce007c6f51dbbb51493441827cc47935528079b8ce83517833aa6fe978d9d765a323af0f5c57c568ff9d3380bfa1cf15043fcc1b9681d28769902544b8e48cefd67558e712099994652d8f40d6c0e880a17e3500eb9133f8e759ac4592b99f473417d0a67a0720fda0d2f8372d4004e3ea7b02ed45e3a224b71e51ee1a562ce6eda9e64b8cc947ee3ddbe40f41eda1b1d1386d92a6b42ee6db7bcf4dcf28dc4747fad442ae68c4c0cda274f131363895d917f7ac49686be3129bd6dea1ceedd901ba50f194ea5014575e331bd09823e35d96cdf227c4ec7085d69eb33fbf4abcb43dd5a990fbee504d2275f233b0254861d11364d080fa2f4db6dc36ce6dfa2c4e1e56951ef6a424e5e3e6338431afa0dfba1d7f75fce064352f3becd831ddc29052f55d61cbb84c91ad0771610fa645d386f26770cadcbf7120d06f1039970059473d7554a693e91e6f86a01522e53c01c67af0405a8722d9e838a3e7121ddf91f05f910f98d2d8fa2a785a84e2bb4e2caa0dd195c66fe37b4d8b34591bd49e8bc8d603d6ed59ed18d18ececfcb70723223e059e9c795e8f96653d55a30657eb561c501ab36bd9b80e6cbf60635fa23d35f504993f2b889a6cd57b77ca595e875cb9360ea6290c1a02431fb95d43480376245cac12a3d53942337566e0e8488b85315715ed8cdc9593a5e474fc78a62f6715eeda8c60a6954cb9eeff4627669b23dd4cceef501bed079dde55f2d8c615400b35c06a38d210b350390c32e3a950da8aab1a17dadb9217367e39fb6eebeb8ce4f037f6df841a7057865e3fb573b56b96e1227ee33955e004493735f76d6a4d174975445976d322cfc7f6ec4e5edc256c9713530264cf88abee8c1f4962791f48950c65e2fdde2e80b4e647a55de3f803261accc352530d2d56c68753d42b9dff0760491afb1fa78b7787682ba25efb03e334068a8d6cc8ca6ab077ff455add017929a95815f33e09f2917c2b6e68d282cd614714aefebe10a40ddd1f63ffb0be0a5a321637fbe2e0fa010caa5a19af6f371c8e163dc5676af41f5b635ff03449033cdc48062cd38b73f0f6a20df417adc3b95ec93ce7b3f34b79fbbf59e2764b2e59e27f2422b901e5d3f3f09a7a4189db4f644f80249bdb83ef56ad139d53f401a87fc67f8ed22d268a29d9328588ba1607f32b273dbe636d1e589b860afe5100ba325c96707811ce0480cbf4df94e5e4d692072d8dda45fcc365c27ce310934c71affd06832297643733be74e069a9c2648e9d644146e34020daf0c9a22a8e9bc3ca96fc48c2dc52b17d357f81f5047960a6e3d7c383798a39f8fff0b2ae4f5f5bc718e97f729fe175ec4aede341c415f084e7eff52f2113118c9daf3644d452304d4a0d65d9daba818ace4ec3b7b54a08aa6977fbb10e6dc508d85a35f9ff5216cce4bc21633e230a11c167fb059cd9cbf9f2b49cc1e5c9a5378e048b078a5855bf6622ec521e049a900d52955dad5621c6935a46e2b5cc80285290d65c8ee62917faed647d6609a60e06b0c510462cac5299b30d98e832b3643d32a405b9ad7c985fd17f92c60800cdac4bf67af67aefacd2b3723f554904e47f7dad7d8a6f2ac7ed09045db1ca6d5179b5b6e0e572a74498b79c9ade264225901e85b9a9dff237043be9a8cdc75feac808719026cbaa42e024b33d05e15837239d13e6639c7f9dfedb72b55ba2ba4686e6bed802a7207b0bb5ab5a4a9222d29b016e7c262bad61920173a7c2bdad1665b11b7a2a7432b2eb572e55c874367e92595ff4367c4132a2a1d3fe5c6bd9ab2e699e0745aeca165cc37fa528c52a5d7107fa2489e701d073816f5709b5912598cf42d91d14352e774f84e4e5916701fd9869bce07cae876374eba0160ebe71fbce36c853259853d52340299a20c119bf1c934039c12fce36f6e9519e7689611c164059d0cfb79519f1ca461c026a0e36f853cf2d2ce95a14041835b91ac7cfd96166c0a820e6ba8b2d75b7bfaa2655c1fc34d0e4c1bac0b7f7adecbf49f22162a3151293e068b75acaf0e8de9aa1f9b47177b684dabd484ef4c15093bfd4bd30e641e2e9f1bc74e1346a291d22570f249fe38e94e7b3d9069e2d6d90f887382c7bca9894582371cc1e5cb17ce1fbe7fb8690d4ee85ccf20a4869a4e821e484fcc7bd2b910621fe430fc58528b62c541292dba6d914043b64bcf134b5576bb1d998a43ba90145b577b3346b9c32026b3adb1eb6697cbee2fee0e1d7dc2e03aa8721d04465065d65514e615e173bdddcb8c0a3ea2b54b2a82d3010dafb4416b2c7dcf1347884a0524f32a3e0f8f55a9c7a80bec5afed935408f54c7d9a1a8049e913ed48e2c7677bcce9806d882180e581fcc1d60a283604382b202fd35ed1bc62f45003c3ef8fd505d60cca17a3d32a55a71f193595613690ba4c6a6c7ed068fa743a7439098cc7941fa58a9ec7acc43ca893c11f187b23b3239ecbc2772adfef79cc8e1035c1f451c9b421e6c0350062c8e44df14ee36d57731c1469139ac9ca80bbd70b5ec19ab2372c1ab7673a212ba2da545dfaf4cf34d6642af47ef57a36e7740f8e32ee8589a701d097fe9d1cda47604c119ecb92b737ca3ab4078d6fedb61a564a44f1db438613cd3f17a829f7cdec72cadd0f7e023359db752cb94cd8bd423e3d405e644d929303e74ca751c63be5b3ede22d89074fe66184461c59524afa13d67b7a4f7f79ca5c873b1fd81e414b03e352ac6802fb58457e9a9b2a18b1a90179869a4ef2217a7f84d1c44b85cc45e625ba315b6db10e6076fbca241397063b9e27d1838dc5bf01812f774aec7df049c03edc8c7029d03caec8ae9c4672c6338f6b3ca4f9f632ad8cb2903ddd5776d3ceccff637621b2835e40eac0c23e3f5bd7763c89e923102e505bdfa635d2b93cdb6d35e7adbcd383ebb327becd3204f4e8331fb2550e33da869026056e819ccf19f8f71198dab4bc0cac479f240172e447f099a3a4cdc0c67a4c34b9688b0b27d756d0c5c78bb951281b061e9d388132253c946981ac28fbe28cf61304e3d965d82ee4dabc8571659d1eb6ea9c91d0555ad17f7d6cc4b353538ccd7a7adb1350f0c0238fd13c8af68fa78769710e632b9e54e598f1b15e4a3e9801bd0837a8029a2e99870676880bef02adcb513d43565914824cd055c3c2a671638e1a00596bf0f44ed5fd5ab9603d3df68e27402e31819bf202682a6a550190329b9682d8fda45be2e4186028026a7315127c213231416afa8538ccdb0354a181b86cdf739c9af52d6c63ed89e0434cf86d33e43428229ae3f08e8855438f6d64dfae182da3bad9056ac0e479b76ade406fc1d059541401828825a300097d43f579da1039cd6d564a2633af50313f47dfb4f2d8d6de126b5822a55f73dea9ef63bb5f7f7dcd462aac7f9c7bd9cb34700269214951d96b3937ed2bfe548faf33c2528360d7e8d761743406e01a8af428c10bd489689f1aa25dbc0f14022574a993d9a4b5112d2cb7de72417d447d8eb01603e688864fc31fbeba31f5fb4a60de622a29923eab197d9c55843fd33a281029eae0f9767b6bb314b6881b1cf6e4c02d8ab4d6bd94bd64793b40bb21d15dec8cd0d4d47b57bb0b58739d143af429e765704d11a3d9891076e9299353488c8b9365118199626b6733f561dbb2f48eaa057891d521633a48cc91579ab97ab2a5eae661529a11a7d2eae723d7e0798c7239ecfe4a9cb986e153cf594d1fb9b07cb8edf4323b10db4274445874dbfa608c5d2e00f89a3ba5310506d4a592b734f2619208f1bc780819b7359829e286c69a36a8ad1ac54170c710d52dcd9989a822f14348a1cef411ae18a157b37dd0ae99b3bc4e2d122ee2295faf493e6786c8075f85a406a4e9dfb77965f6d3a7cfb0297d24f7b476b77105b14e74383313fd2f6a01e918d6c20448701cfa9e2b6d45761c6fc051e0b2ae97319aa871fe9ef540d864514fe0fbb33be882678b6df4ab9a7b6476836bb187661ba1c30050e9320c14ae6d5aee5e193d661c008446b0c995719959a2a478098e31b9964a270503d8c44492c343c73cda1bdc5896b468695932b5b344977a9b8c5e4bfa04049a818234a6d722e4dc40f81a2b33d95b714bcb8bd5a91dea4d0eefcba462d9e9f678740d009fb295f25130601f900b68501342e2460cbd9c04d32e14e8b2044e55c7ab3a91a44a5664e76583ae4bdcd0586102b6f37c509c67ec14b27dbebfe86a2841cb08909bbf8a5cc18e472ed889ff1478f351358cf38cd2d2df657c335c8183108ce52d0b0f651d3ca1fbbb43fff4159ac3df83df922f7f6b18d0767a8addbd64a2bfe186496fa9416e2aed3db1d16a3bdf2fcb9ac1dd48bfe0d4b8d6c714bf1593de6e4d8f4aaaf911075fe87539923deaa5477dc479a2841e19f296710400ad545e3ad84a22e14691457898f41ec061cb2b9782bb0b5cb9c2c2315bfbcdbfa4ab91d713addf757b5a00da1096780a00e2fe6cc2a87c27bb494904902dd60283201269f778dc0d4d829cfdf58dbde68c4accb09f6c297637aee6589902f6fa06f00f5f8b9f41226bcac0b0f7b88acec3620b57282039c03d2f97c91c156bc3d982a9218231be500c37e41870cd0bd75cb3aea1e7863f9622a158c3087eb878ec7ffc224a237d70ae0c32e1de7742b86a8600c7652ac48921a6442784b37df6ed51091c05da858a70765cc91635255a8aaec05e102f1bc87c2fd2fc01691a818fde7dac386c9877d777517523b583acfacf9d95c60db7900b6c06ddc34e21f0e5ef8dced0508ba372e9d0882968b1f42bf0753e5e4b94bd4c48822fe591251ebe55927506155b6dc53f0156a0dd1ffe5a5c7f9e8ef678141b68d743da5a5083df13a81a1fc362c01eb65f7f16dc040d46bf36dd990823e1c70d1de70dbd0143da1ce744c49a7b44f2a4bd294e49ac6e1810af90edcdc73b1bc3532cde8b57dc882daff7b80fdf57b5c6afabbceab9c0a2f4f3f311e38341ab6129a0319be3605f74502727cfaa70679d4d455cc87680d16797d87a0b9ab1c6f71d1b56470744687f56b01085fec505fc2858917bd28616aac0d70c02b990d2ed6bd567a23ca8243ddfe75d62eae19dec72c1a442328ddf8471b356d1fc7ea3766fcebba9b3a5f02d7ea6582affbc8967a0f63cf9e27025286bb8112f080248764430133ce2f35e8447ad7d241d63182df07117c61394a554c10bfddd755c848a78a73b5d182645b25884d625e473eb709bda22b3679f609741005a2685b700ff1b9e299b3490e1074c03a23d02e869a54c11da05b764ea6ca99f8ea36e0f6936c393eefbea8d9714f7e1a186243b32e399d0f902299541a92309dfbf10ac0a75a246bd9f22dd8c773dfa07d4e18db0fd71a7760e0ff782a40c10986c639fe7f82e2f9a90aafdec43f4b4aaea1879833fb3b123dedf931b9a1d94f36049d86cbe924371fde30c398bb8529694cbca1d411a7ea1b879f62cf115732d90b5a678d15d486565c163257c9688675a85a933ab4aabfbab05c4413720fe072e0e75a98dd7211cce554b84bb1abc6a72763bf56c6188a0ac21c7fdcffac1cfdb37befa70a0c79cdcda2fdbcede8e9c9dcb73e8015774dc42f1323c8ab5ed135167fa79fab6c42073f3fca0398fc2d5ab5d4b94a8ba39c5a0e8ba3f9e1fb4be3505a84af4ad07cf95ae11bfc3b0c829a1386081199584222520cb0425042f22739ade6b1bcf9a1c13402330af7a5f945eeb037131b2c6a3cc8e3f3bc218f620aaab12d9190e3a64ff7dbdb17cc4dd26fca5f24a251de4fb7ee454dc0a9df51ba8f74ea6a86e0ecdb66641bde4f96d32c98a8c3917314e41eb920d69c8a33e0165beadfedf37bd194760cf169c7082bbd789b76f70259e48d500d15431b86ab9ac2c2927716ccc1a2767e086f9227864b049a20737dabf271630e089a8917ab20e9c35ec019e341fc35acdf4174c565e91b851b83a510452580ed9200dc56c0685ce7cf8305f1cfd705d991c05863ceaa9075cce41a470a3783ab795cd0a9a34951cc43f03155acca7089f2a1bc325af32f5bc91115a09999ca83b9b654931d579114a119dbc79b6de0349d891ccbc8724b3a7b9c4e446a37039c9cb4e48bffe42bd7a1d8f8c01786c73cf59c1ed64b26a8ce7e82f5667bfedacb936ffeb9114516cae31c21cd03d94ad381e710cd8d300dc71b1f950bf323d76c1cc9e5c223fe3a584689fbe77de85ff3b9f852cc22285ba961c163f0023f5dca4f80e7bdd684542d86aa695c679466b52f971da466777a550e5b4d328c727086e5b6a79158e91b5473a1e59b69168406862e3ced2add77d1cb4d18e38885f0d002c614fab184e5fb8506eba590ca94c734e7bea3177d29a9f7931cbabd168a6076b124cdcf784b2a84a9c32658f86cac481a0441055dd70baccaaba1dbbf417882f20982730cf626e7de0cdf4b1ed512b8448fd997c876dd6c1a464cecdbd637327d669a6d7d0f23664d4286818f648ef45ea2dda66faac8a2b65f65f1f0cdb5e26af0a858500d062ee5d2147f17c51f83001f9a147ce6ddd6ac8e90d246d66696d9b5e8b223382d6f6e582c2d85c3a131180adb4731fb556d1a9f823c010fb17054fc46f0d25445f418b17766966c42088095ad08c5c16f0bbd788ead854d1541e1a7ee37537f7d5d3242fd75acb5f88e2cd19d0070148becd9eb393a859c4097c4ea01299b46087b7871d957bf7cf67dcbbc52f8c177543e3c613798a44076f566f4fd4d6a88cc22dddfd0a00cf61889d8306fdc0d145b5c03771be6a4e7fbd0c3925ba5dcd6141119833504f130b94194974be28c9942ce3cfa329d7685df3ee2b4e0f17c931117be6c749d875e7c7780fdcb971ac6d4c19e6e280e257307953650e904c58bf37914495519aa1486af21d99c29b3761f5bc6aedfe578ca7ab5f3c918d77522b05999777981343268c0a00abf623bfc235c61096a1f517b5ee112c1a4fbd360607a12cba8cd3615efc2893207fbdf85687ccfe3900a227032c2b572bf6971e55865da978da1a3305a63d414f20479f17aa4bb5fb438a3e03a35b3466fd6010f5727b20fc0c6359f513b150199ded2ad162009b3e2aa0fbe15c076c47e5c7df4cb59200f911876925cd47f88848d3d0b23d8c540b2e9280057d92db8a5cd0252d0a7a59b12306c78ff5c83d53cd696a922326340c7e2d433fbf937169bf7e715a7e082b1efe4aa43a6a7d2b8dbb423e1e8b0fb5f9502364cc37c092779e8650adaeb4d03dbf476e2e8b712b1f5596d696c3755840cbb835aba0d6bdbbab2792c8e22664004f9da9f7238d4f2654d80e884c126e18e25825aff555d397f146f51df970f237def14f1e7358591ff5281dbdb0ac93fce637a5e0a1106479fb007f34c5273168f4d75238de0a9d445eac69c2b08fde1cba3e1f148acbf0ecf4969ccc16609d862d30e380b256e7af2a0684907330ec12cf2014116f5d532ed1274e2211facaefc664a690d8ca2305f2f0b2fca5c4609e10f11fc52ca4d93ee921b487e16f78bbd3d6395d30fda7a2bda0aa79b3f6335671cdcad02a071d5fd2147b53849be84c256e708b665b31e28806549a6a549f5703f5ce4903a83879afd72ccd6b044f964cbcf2a38d7f6fd5b56b7b239ff47872f685b1c4536da6bdd267e563e2671b19197b603fccfd37641e5ea54955b4abf853fafac6027375233fcde07ca9b7e9973f534bb9b656cdbc56eaae05e078d10f1b9e6be22d4a1c46611b5622bdb7269230de398a32ee1c3f98772d1f4b23e33f0476a01b543c12272b91b7a65d7aa055f5b2787a2005fe51f0e7e6488b9df63a7cef37c32c788ef485baea1f4153f6804b7af497a039a78e567c03d0c2d89a3d0e3606746e29388a686ac977717bc2125b0c83e6f8ad1ca864333732080470416a482e8b0f7efec1607369d10b5c0301d59144049a1cc74d39766ff545b5942242a61346b1cbfa60aebf03801dbaa07627f0edf49f681dec8d4c0e59b6f73dede4013a1ec2326241f8ce39b70057db26754f52dda218a037e6dd6b14e7f36199d36121bef56c29e3137806c97ad4c37ef2943fc605739ade4de4f89455d92892dae2372d1fb05c821760cf66a7c49923e18b1dd56fd5aa32b5f7f9d3a5b3e5b0c058eb135a8d3bc028f688d1a9e1ffd120282060b163cc27e55fc5b431261dfd33439a023415c250cd5dd03cf99d67f153f7f5ad88874cb1f842537a8fe051304b60f05f16d8349c56983757ccb00dadc25be82a2bbdc091811e26eb89fbb6f892a821c2a561370e799a4dbcda21f52b3aa0fb2d3dff999503566f02644c878c0f5bdce3e608642da5b9aec0a6ab4865dcd3ddb11c3c202f14f8f882b642ccb4d3f3736cdd563cb5ca21736a2e69adc4111d8c89ed3c3f8b6eac139d4d9d48cc711db529f9a6cfca8d1c313a890daaaa3c2c912c5cced1c4745a33b125841bc801353c1723687366b1b7e5335afcf0cdae8f23153f038e2a8a60a1cd58f08fe64fff5ea9ab4194405d213dda1b716fde9c27cfef06291b90932703cab949d1fb28635a4a0f5ad591d9ed887ed55d6b4812106b17cf134a6a924984cc5160cdbc3406458199aa784c3014c0318a2dd95badebf81d5faf894b0e709c83fe29e5754f23d8d737a38a6974aff5bfa9567c19ac1cadedb6a181c3f9706266afac51712b323bb4411d76d9921424926093d87fa94349f7948a115ddf6dc7ef5e5dede1171b92e0cbadc998a08adb263b39fa123612f6c337cafb05afc8e25a3ea52107f3680f405f3307d688845f07c8d5d50c05eba19824bfc91f7c999ae646397bfac03fae9fd0de8225e6a407c041eeacff08b30dea742df68bc8f8438b07022ac10ef49569b68625b67b4f3dbb71dab92c4d27e953b596e155830f3c9845b4f8e3d4942d0d8bb154c1a51fdf74589b0f2e87f08eb9bc859dd2e10147fa5d78d39a8ee4e29e16461dbf834077dc6c4ab848a542e0f2bdb12394234f098d65f180d00a1b3e3ff1e39d69efaa78e310218d39e11f85e2abb5827b99e4a11d058e06aebdc769764ed0c39cec33d5e508307704965eeb02cb11a5b3612e6d4f58750acf99facd4b7cd3a78bd72b7721bfbbe86f0e08a3214dda32e7df3551c95c65bd51592cfd242b77056a22a0e727dfee549f38f6ff7d04486abcb8f15e09954b0d562299f8eb57f1ca599a2120a696bde59da581a25b77876ace8a901f028bea43c1fcdbcb562b7f8c302fb3e51f40c73cc26f178655520f8fe8662d7298ef619e8328a39236a1996fd31daf57c979663b8d1ed42f5bd90a78a95d4b3da3a46cf51a598610043661c7bf832fbc24d5468d30606a4fe2f5dd8162bc999612e015d62649c4c6f8c2c3f3531485aca065070acdb8ec339e270d1e7ef8e98f3a72582cf803fcfeadd33d750e4ad9fd9add3857d192d3c31ca5ccfb4b56585b8661e3fc3b8f55573c07441281f6debe8ff343c2531c1705b05470de8a687fc16a38cde92e1280c2844dbe294bb29f6c81323dc401545851e8d86ac0154243e6cc91e7258424da7a4c1a0c47a0d766ca25985169ace7e637621c330db802aa867d0097c9dc1e219603317d8dc5fe314f5fcb0f410fc1cff9ca756e49950975474efc5ca5bf64fbb30e73886c276c62cb1ebc4a5b02f417e6dd47300674615eb91f0da8a832b4000b3787651c3448539537f751f43928123489f35d61cab284f75f42d61375b254d0f33fce9bd87274edaa183d07645e30efc3f92aa5e00b2215ea4dad25a7732a988e87d979c86482802a1220416de786bd01dddd99ce23cdd214354fcbad5f6f40499ee9ee51535533180c0c8bedb598d8b0a3c7aee0d4494d63de156ed2c9c5f526f535b8212f321710e6b4a03d6aecfd798553122b5dcaa523f30066268f9faa72bbda0683f49e8923a1b010e1723498992e41ab519a1012314deac97793acce84172ce54617ea3e5cadd2250c68df525259b36da29d7d51f23990fe21195d98958739c56b49fde67eb4b131fb38cb2403c76a201f0855e225293bd1a4875b91e4570fb619084d2e32248dc3983c458cb29c4145768b71705e8a85ddf1eac2dee6ef72d3f221db47a8f32505cc8bd9f8eb81a78fcf2898ea040a195342d66e85e4ea677d3fdc9212461f7772e10abf897bca55208ebf2cb56a105db775e35cc2afc3a08f719521fa325307a7d12d32d951275ddcc98c364a5eb251cc47033528cfe0f75d5c53b4a10c1965d744690d80807a796382bb8414c348fa2e0e590e2f71490ced7eb84d475152e534930b0d04ad93d5666199289ff2f7fb19ca4d82b640d347d94437d7dd1e04caec672024b6dd0a39f27db2fe24e74545585c97a119a1ed1c2eef6ae2d4d39136d6edcb7494830028c88adfdfca9d3c0fd32d80353b010dd65979390ba0b7739754e5cb9c3c0d18e2bce29e22d4bcd63598bf98fcdd6f97a29eeac668add60a84b3e91152502b2c1aa259e35145befbcea649fd7c20ea4ad60956b860457a821bb9bd459f1712859e047e4e07999ea5eb2d82d514c9435abed7533020b8f7ad3ef72f9e07a4f5fe6aae3c217bf38c6ddde40d594eff14776ea6b3c53249acc645e60c9ac396cf0369a5f03df77dd8379c34de8018bdc4e58bfc2a9f497acdde17268c1680a3445b9dc490ba34efd0745379a2215247fad7cfc5492c92a94194a5f7bf733e3798658156b0f9090d8d1da3c3c4e38c93d50f169430bbdb2d6f02d9a2aae23ad4dd350c7bf7d75c24a3fc941cbc1e795fdb75edb9453deb5a64063585376493f81b7d115d80178facbeacf474ab5ae80843f7760216456f6cb941d8dd3fef27d104a2858ff7d2f6bd775081fe25a81db82797dc42f501ad11fd549a5c86cb845e98388c7ee04112dcd60718548739394b5f4e49dd6f04191ab0a742fada09ca8b71ce116753f20b02f1f29f265fd62a7d2163315609954af63ae00f5d06b6eaffbd66dbaf396192e8a2c0b715fc370f89bc5f90c76577362ec29bf8e9440e31d8b2d13efefdc5e4a6325995688bb730ec0ddaa910ca34e79f670cfb78528b3841b36be10494f14c93d199a34717f470cb47e54227c5a0e45184c8cd809b193a68c7a13818891c566e2befc784b69a1ab1c9896f24d296a44ab12d2f5d1e2f985a576b2ff24e6826f6db01a22168bd36ec4792316ea8a722a9a02a7e26609138a336528d48fe753db9630e4debd44cdcd9e5cea42121da0204b6d915a8a9d67decf005aa347e7422316a9f7a01de22ef238f369ccd88a253517791f4aa2ff5e2a922a9b98347ab3d6ad8b77e364cca1816bd100b150e967e03acc1d0f67d04c0f8d66506a3e2cc6ceb9f0051ddedd4cd01d04056c05a33b938edaa69188afde67b6bae5b465ef1d02c8443a1ade5d5888dba8acf12f717d9f7685b34cfab7ef154accf4471e92c780ff382100eab4da3d7b89db963639e08acdc83f36eec2619dc49631b10398aab46cd8527b3522c64b487e1249fd0844d351a000e70395202c02151db1e00918c7f6ad4b7f1973f1703bf33a965688aefc49340f0133cbd84fed4adb8a9c6af68c0dec7fd7749ff06857da0d3b1d4c2a29278e2d4466a01c007eb1f75e3b1c847c983ef8cca8efb1ff1e3430f360fa845a9a753f0b2a3ec26ad1d32cb1fc4a97181d8dcc78941726a2261ece1bce2eb5fc8dfe3afe76195185269fd034ee5a4a14aa9456db8fd08de60a464b456f17061827ec7ff4d21436429b0979f25d82000466d290c8cc89d9c30dbad647133be38dae6e5ec5fdd56b58f66a831d2eefc2322b410149bbd3ef0c152e8565b316cdc022b4fcd86c5cc44b7695a5f944591f85db8b848ed4d9715f2c32d415882ed56e3c4568a462848158715d3fa4ee3b36fe0df7c22896244a36bbff7ff039281a0d87c7f16eb7cca08c04e7fa1640cdf0081827d554da07829000f7e86b8c25c5bf1875c72791a671a129100ca85394047dfc5d246ed6b618e5f53df81e712d73e85befa391f65ccd514320dd90fb4fd73fc2ed7451dacbd0319abb1d1da9d934e98eb3c1b8ab899491259e7b51d754bb433274aa375db55fba4f941461d26e653bedb3a81e25a1c41f6d50e8dd171b59a558ac2967e026c842b1f6df2dafeca8f7e268ac1b6bafb8188e8369d5d8ce2f8a652cb161d37b9dc4c0d590845d5797c77260449edfcb997476466297b4ab9848681e04f5a569c059caf34105bfcaed327f3ec8ac928c1427b6896f70233590e306a8da248a66fcac7f47a886d109ae40884fa3bf16ab7b43b632e6935290c7b75e9dafc58f5407106f2dd7659b01e889c62dd414f60fbee3ff0f64a64872dd7f4b9ab1dbfcddf14731b0a5069eb3396852272ebb11735df1f0a32d92bc786420f827fbc276749e0dc1e16b9413d6017ca21ec2948dbae3d351b1bc2fee5b4e58e28a3b3dd627387b0c06a5c61b5ba3ef943bde79fc7b0cf0689e49081be1a84e243d632e8d78cf6d696ab3e677f0f26d67e3e3fd088cb9cb94b66f06453f616017e928a33a1784855d0d68cdaf28ab7e3f583a05c2abe547785d97f0abeba8f97c33c5df9872baba7e9917d99551fd4cc39966fbbf61e6839a6db63f75be939fdba4dda0073255f300b4e3b598007fdcca996606dc23501af3739d57951e0d7b8b72ddd0d44997ffb6cb425aeb782146ce9f2690b6d274ee69a968225087bbab43ce067b563205ceed1b64eae4f553c94aa5370b1fc1dcd46fae95e08be9e3d63e00c74c898d8e3034d47749aa2e196ecf557ce009f29deb41cc7719f6ab92f4ed90a54e1671be0d4c7bd050f743c91281341ab874692f323000c195a167e8678817586dd131774c39888c9b913df55eda1f001d2257d6fd60904443f4b845c67827838fd2f313a2ef880cfa344b23db550259cbb788c5f9d403142d6da3b48807774b38fd31bae51c6b2f06fcc20fca3a718402ffd9192ce56b358ebda27e25cd268a4922a4c312a1a3544888a0bf46353a306127e15360cd958a5c4fc07ef0796280b9128510082bd0f22f221de164f74c07d74f972fce14e1ef9402dc3e4db0ffef45830ff91e17bf143b3f18e0c1423b0f98debca9cc5064207ee693b0cb49a277cfb356007bda8811fa5be24edb2ceec469c78cdfcb4685ba80013dd22a443b1974d0ad50126c5aa694b332669b2022629f0d1ba0430754c295554c266ba45fae62024fd8720441ef4c6ea048e52c72c3f533e44b654d41dee1593b26fb06310ba98b42d2f7a2b5f7d85b02c6b8ac4dbe58e9108f229f21087635b08f12531abf272cfd02666764e0cee60ff68b7bbcbf1ef0a129bce89adfbc711d9a93c9457063e7bd1ab2bb77986326799165fa20b0a9a135aaf95d58e8c73ab867cbeb92300ce1beea432f68f88d0dcbe0cdbf510ca551b1484b52f8bae3a7b4ca95b084e3f97a5a96dd3c9bbc35efe4faf08fef245269ba0abbe1c73902aba78b84c9820a5ba2e5cb87af3e710014ee0c91d141642bb060d64e819a8bf743ab169be70cfaa79bf6f1dcb4621099255d33a010a468d835445c91d842d877bb10b160a21290ec576a722d35fe389b6059d531ac6683ac4f9dc8afb40a6c124bc73b1c896533a3a53f1acde11d99c5dd884649c8f21ed37d2547ec7c593a71f0e4293672a3cf1cb1306918c524ca5154a4ffd2c1fc2212a143bd91750a1a65becd1e02960535b9037527be7463837d9dcc73b3b8fcbf4c9d52d9b1819cd7714511ea67039caccb40f85c9be4902190312b347c6b485b834d5caee47f8f532a936a681e58f5e1835dfce9554586194c8cafd07a2a949b7f7c69650a2a838b72e3658b292f8b9b7d38a33c9752b583d8faf9a7847435e4c949252ef7a8d84f117c006a0555492a340955e565be8c8b1669f47853bb6e69014fd896dd48a09e468f6aa2ee5581998cff4bc3a5f12880fe86ecef89073aeeeaf6d3cf0a939e8b8eb8a365ee7f324dab0ac84cb0d1e7ed0d59be0e0cca448f34278c1de2bb7ff79ebc8e2bfbaaa1cfeebe892dba1f2c86e5db3c6876611a80982c1be4dc478e51b8215c34fd660699fe2df021624a1a0a0e894b05fcae4f33cdc43deeb23b0468a593f8720bf6d28c2a1140c90970dc6befc2ee532ecda605afc442a9570e0484cd543a1eeb10e02fbdd3eab4ad1e79af7571c72447fe3ec39e6742f3be132b899f00c9022737e360c4afe1107c05cd0580c33c19266612192f75b4a177fb0fbf5f55a3407414b1f42f378451452008dccabebc0bce3a34e1459117a01dd95f74f9688375cbd829386c3d691882ef13526052563a84d282699a0105cfd1e2237b971fd4954cf1a11fe23923b05a1303fd964ee1d85991740d2e4918a40e3e9c9333d653294a1cb7ad903d047317d753fa8a085ac4abebfaacc425bebdac4a1c03326aa13c72cd38bc981c25d1a64442d10a182c6bd482becd3462a61641e417bdf095fad7398051724413ad87c3357093f552b4cba8a61bc75485b24358e838599224ec4b61399e4f11c84ec1ca47e9bf59088e02e682faf591f9c282d512da0ac3b400c5b9290c6a69d593e9543b3f9fa21a0546655d3590844e8927895bfac56f261394f82f288cb1ab3982eab3ec1c4b58674ff5ddf4876e3d899efc211b803911c853b9e8c1e191b862d5d5f091186462a9caf20cce6decfc8c1a0ff11ea3944d24309c5de934312750057ac84870fb5387bae7d512bed3de66ed00a657c907843fbb4b8ff1996311f23a4ec1358d79e1c0f568f24f146bb2667fe351f4519982d6929ebe4708012c641b0fe6ddc10a8339c464cdb5254fa9eddac67c150c50bbebd0077875fc576a3f43fd95529741cf7c7d3aebe90881031636b93d6d87ad8d887f8ef03b4aea9bd56bf45d23ce4a17054dceeb0f9e5d72af6966367d14b5b85f20f0ce59bef908176615635e79b6fa4feb85bbc3421c3e9c62b719bc73ee2b0fbd5c59ae11f6a3a1da3fca42023993bb45a12a2f68a18e98ec89767f02a3a1195981b701f10ff18300654d15483cb8e654adee6f33b3ff7c7672b9198812371ed65bf01dca78cfb18cd2cf444145f4f4731ac0da3ab54e35b39e36facfa095e81a49b12b7b819b80c7d8ef5a1707528997086ec56ad49b33b88b760256c29867bfa979b4542634222460d6ff4ecc1c7792660e5dc7fc853d733526562a4341f0f5f57e40590e59577c6e2146d64eed24a5f1ee775d3f7689cb6622e2dad55958c36b815f448ba1462ee22274eaf07d5b96b99b43491d5c545723d5c091f6c6381253cdb9c506d4d635bc0e5a82b1e93264d3a4e5d7ea6b046b91adc5484c91efd8686954397931369cfafd00144d4586f7d334b0a0c38239900b52ca0eb637e6888535934f40fd75955cbb5fa966d10ffef57bdf81cb66767363b052946b68322178a2beb82d8f7c86a4f9f2427796de4ec6eb23293af768630f2cb17d4fd17c53be13d332e5aaaf57fd4df77016f76000f113a269461ff74ff31f059f2c89865f6beaac6a9e81f67352813d7a397ac480b360f0cee5a77f8c409613e3c8c597f4f5a6bc6b1e2079e09c6bdeb570d3e87328cd2db3db832877be7d2062acc101efbe692c8f4de7fa0e821c94a4a0e4b7bc4bf33fdf0a4135509b5e376bd2e39f974f83bad9175447a71a473e79a0b785be3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Adapter</title>
    <url>/2021/04/19/%E9%80%82%E9%85%8D%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>AOP</code>中，使用 <code>Advice</code>（通知）来实现被代理类的功能,使用代理模式，代理类在方法中通过执行拦截器，实现面向切面编程。</p>
<span id="more"></span>
<p>举个例子 前置处理 备注：源代码中省去了一些代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeforeAdvice</span> <span class="keyword">extends</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advisor</span> </span>&#123;</span><br><span class="line">	<span class="function">Advice <span class="title">getAdvice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodBeforeAdvice</span> <span class="keyword">extends</span> <span class="title">BeforeAdvice</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, <span class="meta">@Nullable</span> Object target)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现<code>Advisor</code>接口的子类适配，获取 <code>Advice</code> 通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceAdapter</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor advisor)</span> </span>&#123;</span><br><span class="line">		MethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MethodBeforeAdviceInterceptor(advice);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>MethodBeforeAdviceInterceptor</code> 类 ，调用了 <code>before</code> 方法，实现方法前拦截</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">BeforeAdvice</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());</span><br><span class="line">		<span class="keyword">return</span> mi.proceed();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看源代码<code>before</code>最终调用的是 <code>Method</code> 类的 <code>invoke</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MethodAccessor ma = methodAccessor;             </span><br><span class="line">    <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通知通过代码如何实现AOP"><a href="#通知通过代码如何实现AOP" class="headerlink" title="通知通过代码如何实现AOP"></a>通知通过代码如何实现AOP</h3><p>举例 <code>spring AOP</code> <code>JDK</code> 动态代理方式的实现</p>
<ul>
<li>配置 <code>MethodBeforeAdvice</code> 的实现类</li>
<li><code>JDK</code>通过实现接口的方式实现动态代理，那么定义一个接口</li>
<li>编写接口实现类</li>
<li>配置代理类，通过 <code>ProxyFactoryBean</code> 生成需要的<ul>
<li>拦截器（这里举例的是前置通知 <code>MethodBeforeAdvice</code> 的实现类）</li>
<li>代理接口(<code>JDK</code>通过实现接口的方式实现动态代理，定义的接口)</li>
<li>目标对象(接口实现类)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">ProxyCreatorSupport</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Object</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterceptorNames</span><span class="params">(String... interceptorNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setInterceptorNames(interceptorNames);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//没有设置目标对象的代理接口，则使用CGLIB创建代理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProxyInterfaces</span><span class="params">(Class&lt;?&gt;[] proxyInterfaces)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setProxyInterfaces(proxyInterfaces);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetName</span><span class="params">(String targetName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setTargetName(targetName);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql Base Operate</title>
    <url>/2021/04/14/MySql-Base/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  Windows服务</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 启动MySQL</span></span><br><span class="line">    net <span class="built_in">start</span> mysql</span><br><span class="line"><span class="comment">-- 创建Windows服务</span></span><br><span class="line">    sc <span class="built_in">create</span> mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>连接与断开服务器</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST <span class="comment">-- 显示哪些线程正在运行</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="comment">-- 显示系统变量信息</span></span><br></pre></td></tr></table></figure>
<p> 数据库操作</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br><span class="line"><span class="comment">-- 显示当前时间、用户名、数据库版本</span></span><br><span class="line">    <span class="keyword">SELECT</span> now(), <span class="keyword">user</span>(), version();</span><br><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">        <span class="keyword">COLLATE</span> collation_name</span><br><span class="line"><span class="comment">-- 查看已有库</span></span><br><span class="line">    <span class="keyword">SHOW</span> DATABASES[ <span class="keyword">LIKE</span> <span class="string">&#x27;PATTERN&#x27;</span>]</span><br><span class="line"><span class="comment">-- 查看当前库信息</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名</span><br><span class="line"><span class="comment">-- 修改库的选项信息</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 库名 选项信息</span><br><span class="line"><span class="comment">-- 删除库</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 数据库名</span><br><span class="line">        同时删除该数据库相关的目录及其目录内容</span><br></pre></td></tr></table></figure>
<p> 表的操作</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    <span class="meta">CREATE</span> [TEMPORARY] <span class="meta">TABLE</span>[ <span class="meta">IF</span> <span class="meta">NOT</span> EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [<span class="meta">NOT</span> <span class="meta">NULL</span> | <span class="meta">NULL</span>] [DEFAULT default_value] [AUTO_INCREMENT] [<span class="meta">UNIQUE</span> [<span class="meta">KEY</span>] | [<span class="meta">PRIMARY</span>] <span class="meta">KEY</span>] [COMMENT <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB <span class="meta">Merge</span> Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line"><span class="keyword">        DATA </span>DIRECTORY = <span class="string">&#x27;目录&#x27;</span></span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        <span class="meta">INDEX</span> DIRECTORY = <span class="string">&#x27;目录&#x27;</span></span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION <span class="meta">BY</span> ... (详细见手册)</span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ <span class="meta">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br><span class="line">    SHOW TABLES <span class="meta">FROM</span> 表名</span><br><span class="line">-- 查看表机构</span><br><span class="line">    SHOW <span class="meta">CREATE</span> <span class="meta">TABLE</span> 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / <span class="meta">DESCRIBE</span> 表名 / EXPLAIN 表名 / SHOW COLUMNS <span class="meta">FROM</span> 表名 [<span class="meta">LIKE</span> <span class="string">&#x27;PATTERN&#x27;</span>]</span><br><span class="line">    SHOW <span class="meta">TABLE</span> STATUS [<span class="meta">FROM</span> db_name] [<span class="meta">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        <span class="meta">ALTER</span> <span class="meta">TABLE</span> 表名 表的选项</span><br><span class="line">        eg: <span class="meta">ALTER</span> <span class="meta">TABLE</span> 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        <span class="meta">RENAME</span> <span class="meta">TABLE</span> 原表名 TO 新表名</span><br><span class="line">        <span class="meta">RENAME</span> <span class="meta">TABLE</span> 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- <span class="meta">RENAME</span>可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. <span class="meta">ALTER</span> <span class="meta">TABLE</span>语法）</span><br><span class="line">        <span class="meta">ALTER</span> <span class="meta">TABLE</span> 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            <span class="meta">ADD</span>[ COLUMN] 字段定义       -- 增加字段</span><br><span class="line">                AFTER 字段名          -- 表示增加在该字段名后面</span><br><span class="line">                FIRST               -- 表示增加在第一个</span><br><span class="line">            <span class="meta">ADD</span> <span class="meta">PRIMARY</span> <span class="meta">KEY</span>(字段名)   -- 创建主键</span><br><span class="line">            <span class="meta">ADD</span> <span class="meta">UNIQUE</span> [索引名] (字段名)-- 创建唯一索引</span><br><span class="line">            <span class="meta">ADD</span> <span class="meta">INDEX</span> [索引名] (字段名) -- 创建普通索引</span><br><span class="line">            <span class="meta">DROP</span>[ COLUMN] 字段名      -- 删除字段</span><br><span class="line">            <span class="meta">MODIFY</span>[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            <span class="meta">DROP</span> <span class="meta">PRIMARY</span> <span class="meta">KEY</span>    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            <span class="meta">DROP</span> <span class="meta">INDEX</span> 索引名 -- 删除索引</span><br><span class="line">            <span class="meta">DROP</span> <span class="meta">FOREIGN</span> <span class="meta">KEY</span> 外键    -- 删除外键</span><br><span class="line">-- 删除表</span><br><span class="line">    <span class="meta">DROP</span> <span class="meta">TABLE</span>[ <span class="meta">IF</span> EXISTS] 表名 ...</span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [<span class="meta">TABLE</span>] 表名</span><br><span class="line">-- 复制表结构</span><br><span class="line">    <span class="meta">CREATE</span> <span class="meta">TABLE</span> 表名 <span class="meta">LIKE</span> 要复制的表名</span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    <span class="meta">CREATE</span> <span class="meta">TABLE</span> 表名 [<span class="meta">AS</span>] <span class="meta">SELECT</span> <span class="comment">* FROM 要复制的表名</span></span><br><span class="line"><span class="comment">-- 检查表是否有错误</span></span><br><span class="line"><span class="comment">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span></span><br><span class="line"><span class="comment">-- 优化表</span></span><br><span class="line"><span class="comment">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span><br><span class="line"><span class="comment">-- 修复表</span></span><br><span class="line"><span class="comment">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span></span><br><span class="line"><span class="comment">-- 分析表</span></span><br><span class="line"><span class="comment">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span><br></pre></td></tr></table></figure>
<p>数据操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 [(字段列表)] <span class="keyword">VALUES</span> (值列表)[, (值列表), ...]</span><br><span class="line">        <span class="comment">-- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span></span><br><span class="line">        <span class="comment">-- 可同时插入多条数据记录！</span></span><br><span class="line">        REPLACE 与 <span class="keyword">INSERT</span> 完全一样，可互换。</span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>值[, 字段名<span class="operator">=</span>值, ...]</span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line">    <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名[ 其他子句]</span><br><span class="line">        <span class="comment">-- 可来自多个表的多个字段</span></span><br><span class="line">        <span class="comment">-- 其他子句可以不使用</span></span><br><span class="line">        <span class="comment">-- 字段列表可以用*代替，表示所有字段</span></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">    UPDATE 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>新值[, 字段名<span class="operator">=</span>新值] [更新条件]</span><br></pre></td></tr></table></figure>
<p>字符集编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL、数据库、表、字段均可设置编码</span></span><br><span class="line"><span class="comment">-- 数据编码与客户端编码不需一致</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_%&#x27;</span>   <span class="comment">-- 查看所有字符集编码项</span></span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 变量值</span><br><span class="line">    <span class="keyword">SET</span> character_set_client <span class="operator">=</span> gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_results <span class="operator">=</span> gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_connection <span class="operator">=</span> gbk;</span><br><span class="line"><span class="keyword">SET</span> NAMES GBK;  <span class="comment">-- 相当于完成以上三个设置</span></span><br><span class="line"><span class="comment">-- 校对集</span></span><br><span class="line">    校对集用以排序</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]<span class="operator">/</span><span class="keyword">SHOW</span> CHARSET [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]   查看所有字符集</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    <span class="keyword">COLLATE</span> 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure>
<p>数据类型（列类型）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数值类型</span><br><span class="line"></span><br><span class="line"><span class="comment">-- a. 整型 ----------</span></span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     <span class="number">1</span>字节    <span class="number">-128</span> <span class="operator">~</span> <span class="number">127</span>      无符号位：<span class="number">0</span> <span class="operator">~</span> <span class="number">255</span></span><br><span class="line">    <span class="type">smallint</span>    <span class="number">2</span>字节    <span class="number">-32768</span> <span class="operator">~</span> <span class="number">32767</span></span><br><span class="line">    mediumint   <span class="number">3</span>字节    <span class="number">-8388608</span> <span class="operator">~</span> <span class="number">8388607</span></span><br><span class="line">    <span class="type">int</span>         <span class="number">4</span>字节</span><br><span class="line">    <span class="type">bigint</span>      <span class="number">8</span>字节</span><br><span class="line">    <span class="type">int</span>(M)  M表示总位数</span><br><span class="line">    <span class="operator">-</span> 默认存在符号位，unsigned 属性修改</span><br><span class="line">    <span class="operator">-</span> 显示宽度，如果某个数不够定义字段时设置的位数，则前面以<span class="number">0</span>补填，zerofill 属性修改</span><br><span class="line">        例：<span class="type">int</span>(<span class="number">5</span>)   插入一个数<span class="string">&#x27;123&#x27;</span>，补填后为<span class="string">&#x27;00123&#x27;</span></span><br><span class="line">    <span class="operator">-</span> 在满足要求的情况下，越小越好。</span><br><span class="line">    <span class="operator">-</span> <span class="number">1</span>表示bool值真，<span class="number">0</span>表示bool值假。MySQL没有布尔类型，通过整型<span class="number">0</span>和<span class="number">1</span>表示。常用tinyint(<span class="number">1</span>)表示布尔型。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 浮点型 ----------</span></span><br><span class="line">    类型             字节     范围</span><br><span class="line">    <span class="type">float</span>(单精度)     <span class="number">4</span>字节</span><br><span class="line">    <span class="keyword">double</span>(双精度)    <span class="number">8</span>字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填<span class="number">0.</span></span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        <span class="type">float</span>(M, D)     <span class="keyword">double</span>(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c. 定点数 ----------</span></span><br><span class="line">    <span class="type">decimal</span> <span class="comment">-- 可变长度</span></span><br><span class="line">    <span class="type">decimal</span>(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每<span class="number">9</span>位数字保存为<span class="number">4</span>个字节。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 字符串类型</span><br><span class="line"></span><br><span class="line"><span class="comment">-- a. char, varchar ----------</span></span><br><span class="line">    <span class="type">char</span>    定长字符串，速度快，但浪费空间</span><br><span class="line">    <span class="type">varchar</span> 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    <span class="type">char</span>,最多<span class="number">255</span>个字符，与编码无关。</span><br><span class="line">    <span class="type">varchar</span>,最多<span class="number">65535</span>字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过<span class="number">65535</span>个字节。</span><br><span class="line">        utf8 最大为<span class="number">21844</span>个字符，gbk 最大为<span class="number">32766</span>个字符，latin1 最大为<span class="number">65532</span>个字符</span><br><span class="line">    <span class="type">varchar</span> 是变长的，需要利用存储空间保存 <span class="type">varchar</span> 的长度，如果数据小于<span class="number">255</span>个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    <span class="type">varchar</span> 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是<span class="number">65532</span>字节，因为在<span class="type">varchar</span>存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是<span class="number">64432</span><span class="number">-1</span><span class="number">-2</span><span class="operator">=</span><span class="number">65532</span>字节。</span><br><span class="line">    例：若一个表定义为 <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb(c1 <span class="type">int</span>, c2 <span class="type">char</span>(<span class="number">30</span>), c3 <span class="type">varchar</span>(N)) charset<span class="operator">=</span>utf8; 问N的最大值是多少？ 答：(<span class="number">65535</span><span class="number">-1</span><span class="number">-2</span><span class="number">-4</span><span class="number">-30</span><span class="operator">*</span><span class="number">3</span>)<span class="operator">/</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. blob, text ----------</span></span><br><span class="line">    <span class="type">blob</span> 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, <span class="type">blob</span>, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给<span class="keyword">default</span>值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c. binary, varbinary ----------</span></span><br><span class="line">    类似于<span class="type">char</span>和<span class="type">varchar</span>，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    <span class="type">char</span>, <span class="type">varchar</span>, text 对应 <span class="type">binary</span>, <span class="type">varbinary</span>, blob.</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    <span class="number">8</span>字节    日期及时间     <span class="number">1000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> 到 <span class="number">9999</span><span class="number">-12</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    <span class="type">date</span>        <span class="number">3</span>字节    日期         <span class="number">1000</span><span class="number">-01</span><span class="number">-01</span> 到 <span class="number">9999</span><span class="number">-12</span><span class="number">-31</span></span><br><span class="line">    <span class="type">timestamp</span>   <span class="number">4</span>字节    时间戳        <span class="number">19700101000000</span> 到 <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07</span></span><br><span class="line">    <span class="type">time</span>        <span class="number">3</span>字节    时间         <span class="number">-838</span>:<span class="number">59</span>:<span class="number">59</span> 到 <span class="number">838</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    <span class="keyword">year</span>        <span class="number">1</span>字节    年份         <span class="number">1901</span> <span class="operator">-</span> <span class="number">2155</span></span><br><span class="line">datetime    YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD hh:mm:ss</span><br><span class="line"><span class="type">timestamp</span>   YY<span class="operator">-</span>MM<span class="operator">-</span>DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line"><span class="type">date</span>        YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD</span><br><span class="line">            YY<span class="operator">-</span>MM<span class="operator">-</span>DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line"><span class="type">time</span>        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line"><span class="keyword">year</span>        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 枚举和集合</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 枚举(enum) ----------</span></span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为<span class="number">65535.</span></span><br><span class="line">    枚举值在保存时，以<span class="number">2</span>个字节的整型(<span class="type">smallint</span>)保存。每个枚举值，按保存的位置顺序，从<span class="number">1</span>开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    <span class="keyword">NULL</span>值的索引是<span class="keyword">NULL</span>。</span><br><span class="line">    空字符串错误值的索引值是<span class="number">0</span>。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 集合（set） ----------</span></span><br><span class="line"><span class="keyword">set</span>(val1, val2, val3...)</span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( gender <span class="keyword">set</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;无&#x27;</span>) );</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="string">&#x27;男, 女&#x27;</span>);</span><br><span class="line">    最多可以有<span class="number">64</span>个不同的成员。以<span class="type">bigint</span>存储，共<span class="number">8</span>个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，<span class="keyword">SET</span>成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure>
<p>列属性（列约束）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">PRIMARY</span> 主键</span><br><span class="line">    <span class="operator">-</span> 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    <span class="operator">-</span> 一个表只能有一个主键。</span><br><span class="line">    <span class="operator">-</span> 主键具有唯一性。</span><br><span class="line">    <span class="operator">-</span> 声明字段时，用 <span class="keyword">primary</span> key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( id <span class="type">int</span>, stu <span class="type">varchar</span>(<span class="number">10</span>), <span class="keyword">primary</span> key (id));</span><br><span class="line">    <span class="operator">-</span> 主键字段的值不能为<span class="keyword">null</span>。</span><br><span class="line">    <span class="operator">-</span> 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( id <span class="type">int</span>, stu <span class="type">varchar</span>(<span class="number">10</span>), age <span class="type">int</span>, <span class="keyword">primary</span> key (stu, age));</span><br><span class="line"><span class="number">2.</span> <span class="keyword">UNIQUE</span> 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">NULL</span> 约束</span><br><span class="line">    <span class="keyword">null</span>不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为<span class="keyword">null</span>，表示什么都没有。</span><br><span class="line">    <span class="keyword">null</span>, 允许为空。默认。</span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">null</span>, 不允许为空。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;val&#x27;</span>);</span><br><span class="line">        <span class="comment">-- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span></span><br><span class="line"><span class="number">4.</span> <span class="keyword">DEFAULT</span> 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="keyword">default</span>, <span class="string">&#x27;val&#x27;</span>);    <span class="comment">-- 此时表示强制使用默认值。</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( add_time <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> );</span><br><span class="line">        <span class="comment">-- 表示将当前时间的时间戳设为默认值。</span></span><br><span class="line">        <span class="built_in">current_date</span>, <span class="built_in">current_time</span></span><br><span class="line"><span class="number">5.</span> AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或<span class="keyword">unique</span>）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为<span class="number">1</span>开始自动增长。可以通过表属性 auto_increment <span class="operator">=</span> x进行设置，或 <span class="keyword">alter</span> <span class="keyword">table</span> tbl auto_increment <span class="operator">=</span> x;</span><br><span class="line"><span class="number">6.</span> COMMENT 注释</span><br><span class="line">    例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( id <span class="type">int</span> ) comment <span class="string">&#x27;注释内容&#x27;</span>;</span><br><span class="line"><span class="number">7.</span> <span class="keyword">FOREIGN</span> KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> <span class="keyword">constraint</span> `t1_t2_fk` <span class="keyword">foreign</span> key (t1_id) <span class="keyword">references</span> t2(id);</span><br><span class="line">        <span class="comment">-- 将表t1的t1_id外键关联到表t2的id字段。</span></span><br><span class="line">        <span class="comment">-- 每个外键都有一个名字，可以通过 constraint 指定</span></span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    <span class="keyword">foreign</span> key (外键字段） <span class="keyword">references</span> 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有<span class="keyword">not</span> <span class="keyword">null</span>。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 <span class="keyword">on</span> update 或 <span class="keyword">on</span> <span class="keyword">delete</span>：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    <span class="number">1.</span> cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">set</span> <span class="keyword">null</span>，设置为<span class="keyword">null</span>。主表数据被更新（主键值更新），从表的外键被设置为<span class="keyword">null</span>。主表记录被删除，从表相关记录外键被设置成<span class="keyword">null</span>。但注意，要求该外键列，没有<span class="keyword">not</span> <span class="keyword">null</span>属性约束。</span><br><span class="line">    <span class="number">3.</span> restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure>

<p>SELECT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] select_expr <span class="keyword">FROM</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> [合计函数] <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> LIMIT</span><br><span class="line">a. select_expr</span><br><span class="line">    <span class="comment">-- 可以用 * 表示所有字段。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span></span><br><span class="line">        <span class="keyword">select</span> stu, <span class="number">29</span><span class="operator">+</span><span class="number">25</span>, now() <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span></span><br><span class="line">        <span class="operator">-</span> 使用 <span class="keyword">as</span> 关键字，也可省略 as.</span><br><span class="line">        <span class="keyword">select</span> stu<span class="operator">+</span><span class="number">10</span> <span class="keyword">as</span> add10 <span class="keyword">from</span> tb;</span><br><span class="line">b. <span class="keyword">FROM</span> 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    <span class="comment">-- 可以为表起别名。使用as关键字。</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1 <span class="keyword">AS</span> tt, tb2 <span class="keyword">AS</span> bb;</span><br><span class="line">    <span class="comment">-- from子句后，可以同时出现多个表。</span></span><br><span class="line">        <span class="comment">-- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1, tb2;</span><br><span class="line">    <span class="comment">-- 向优化符提示如何选择索引</span></span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 USE INDEX (key1,key2) <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> key3<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 IGNORE INDEX (key3) <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> key3<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">c. <span class="keyword">WHERE</span> 子句</span><br><span class="line">    <span class="comment">-- 从from获得的数据源中进行筛选。</span></span><br><span class="line">    <span class="comment">-- 整型1表示真，0表示假。</span></span><br><span class="line">    <span class="comment">-- 表达式由运算符和运算数组成。</span></span><br><span class="line">        <span class="comment">-- 运算数：变量（字段）、值、函数返回值</span></span><br><span class="line">        <span class="comment">-- 运算符：</span></span><br><span class="line">            <span class="operator">=</span>, <span class="operator">&lt;=&gt;</span>, <span class="operator">&lt;&gt;</span>, <span class="operator">!=</span>, <span class="operator">&lt;=</span>, <span class="operator">&lt;</span>, <span class="operator">&gt;=</span>, <span class="operator">&gt;</span>, <span class="operator">!</span>, <span class="operator">&amp;&amp;</span>, <span class="operator">||</span>,</span><br><span class="line">            <span class="keyword">in</span> (<span class="keyword">not</span>) <span class="keyword">null</span>, (<span class="keyword">not</span>) <span class="keyword">like</span>, (<span class="keyword">not</span>) <span class="keyword">in</span>, (<span class="keyword">not</span>) <span class="keyword">between</span> <span class="keyword">and</span>, <span class="keyword">is</span> (<span class="keyword">not</span>), <span class="keyword">and</span>, <span class="keyword">or</span>, <span class="keyword">not</span>, xor</span><br><span class="line">            <span class="keyword">is</span><span class="operator">/</span><span class="keyword">is</span> <span class="keyword">not</span> 加上ture<span class="operator">/</span><span class="literal">false</span><span class="operator">/</span><span class="literal">unknown</span>，检验某个值的真假</span><br><span class="line">            <span class="operator">&lt;=&gt;</span>与<span class="operator">&lt;&gt;</span>功能相同，<span class="operator">&lt;=&gt;</span>可用于<span class="keyword">null</span>比较</span><br><span class="line">d. <span class="keyword">GROUP</span> <span class="keyword">BY</span> 子句, 分组子句</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段<span class="operator">/</span>别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：<span class="keyword">ASC</span>，降序：<span class="keyword">DESC</span></span><br><span class="line">    以下[合计函数]需配合 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 使用：</span><br><span class="line">    count 返回不同的非<span class="keyword">NULL</span>值数目  <span class="built_in">count</span>(<span class="operator">*</span>)、<span class="built_in">count</span>(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非<span class="keyword">NULL</span>值的字符串结果。组内字符串连接。</span><br><span class="line">e. <span class="keyword">HAVING</span> 子句，条件子句</span><br><span class="line">    与 <span class="keyword">where</span> 功能、用法相同，执行时机不同。</span><br><span class="line">    <span class="keyword">where</span> 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    <span class="keyword">having</span> 对筛选出的结果再次进行过滤。</span><br><span class="line">    <span class="keyword">having</span> 字段必须是查询出来的，<span class="keyword">where</span> 字段必须是数据表存在的。</span><br><span class="line">    <span class="keyword">where</span> 不可以使用字段的别名，<span class="keyword">having</span> 可以。因为执行<span class="keyword">WHERE</span>代码时，可能尚未确定列值。</span><br><span class="line">    <span class="keyword">where</span> 不可以使用合计函数。一般需用合计函数才会用 <span class="keyword">having</span></span><br><span class="line">    <span class="keyword">SQL</span>标准要求<span class="keyword">HAVING</span>必须引用<span class="keyword">GROUP</span> <span class="keyword">BY</span>子句中的列或用于合计函数中的列。</span><br><span class="line">f. <span class="keyword">ORDER</span> <span class="keyword">BY</span> 子句，排序子句</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> 排序字段<span class="operator">/</span>别名 排序方式 [,排序字段<span class="operator">/</span>别名 排序方式]...</span><br><span class="line">    升序：<span class="keyword">ASC</span>，降序：<span class="keyword">DESC</span></span><br><span class="line">    支持多个字段的排序。</span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从<span class="number">0</span>开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引<span class="number">0</span>开始。limit 获取条数</span><br><span class="line">h. <span class="keyword">DISTINCT</span>, <span class="keyword">ALL</span> 选项</span><br><span class="line">    <span class="keyword">distinct</span> 去除重复记录</span><br><span class="line">    默认为 <span class="keyword">all</span>, 全部记录</span><br></pre></td></tr></table></figure>
<p>UNION</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    将多个<span class="keyword">select</span>查询的结果组合成一个结果集合。</span><br><span class="line">    <span class="keyword">SELECT</span> ... <span class="keyword">UNION</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...</span><br><span class="line">    默认 <span class="keyword">DISTINCT</span> 方式，即所有返回的行都是唯一的</span><br><span class="line">    建议，对每个<span class="keyword">SELECT</span>查询加上小括号包裹。</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">    需要各<span class="keyword">select</span>查询的字段数量一样。</span><br><span class="line">    每个<span class="keyword">select</span>查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条<span class="keyword">select</span>语句为准。</span><br><span class="line">子查询</span><br><span class="line">    <span class="operator">-</span> 子查询需用括号包裹。</span><br><span class="line"><span class="comment">-- from型</span></span><br><span class="line">    <span class="keyword">from</span>后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    <span class="operator">-</span> 简化每个查询内的条件。</span><br><span class="line">    <span class="operator">-</span> <span class="keyword">from</span>型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    <span class="operator">-</span> 子查询返回一个表，表型子查询。</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">0</span>) <span class="keyword">as</span> subfrom <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- where型</span></span><br><span class="line">    <span class="operator">-</span> 子查询返回一个值，标量子查询。</span><br><span class="line">    <span class="operator">-</span> 不需要给子查询取别名。</span><br><span class="line">    <span class="operator">-</span> <span class="keyword">where</span>子查询内的表，不能直接用以更新。</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb <span class="keyword">where</span> money <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(money) <span class="keyword">from</span> tb);</span><br><span class="line">    <span class="comment">-- 列子查询</span></span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 <span class="keyword">in</span> 或 <span class="keyword">not</span> <span class="keyword">in</span> 完成查询</span><br><span class="line">        <span class="keyword">exists</span> 和 <span class="keyword">not</span> <span class="keyword">exists</span> 条件</span><br><span class="line">            如果子查询返回数据，则返回<span class="number">1</span>或<span class="number">0</span>。常用于判断条件。</span><br><span class="line">            <span class="keyword">select</span> column1 <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2);</span><br><span class="line">    <span class="comment">-- 行子查询</span></span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> (id, gender) <span class="keyword">in</span> (<span class="keyword">select</span> id, gender <span class="keyword">from</span> t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 <span class="type">ROW</span>(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    <span class="comment">-- 特殊运算符</span></span><br><span class="line">    <span class="operator">!=</span> <span class="keyword">all</span>()    相当于 <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">    <span class="operator">=</span> <span class="keyword">some</span>()    相当于 <span class="keyword">in</span>。<span class="keyword">any</span> 是 <span class="keyword">some</span> 的别名</span><br><span class="line">    <span class="operator">!=</span> <span class="keyword">some</span>()   不等同于 <span class="keyword">not</span> <span class="keyword">in</span>，不等于其中某一个。</span><br><span class="line">    <span class="keyword">all</span>, <span class="keyword">some</span> 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure>


<p>连接查询(join)</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">    将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line"><span class="comment">-- 内连接(inner join)</span></span><br><span class="line">    - 默认就是内连接，可省略<span class="keyword">inner</span>。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    <span class="keyword">on</span> 表示连接条件。其条件表达式与<span class="keyword">where</span>类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用<span class="keyword">where</span>表示连接条件。</span><br><span class="line">    还有 <span class="keyword">using</span>, 但需字段名相同。 <span class="keyword">using</span>(字段名)</span><br><span class="line">    <span class="comment">-- 交叉连接 cross join</span></span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> tb1 <span class="keyword">cross</span> <span class="keyword">join</span> tb2;</span><br><span class="line"><span class="comment">-- 外连接(outer join)</span></span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    <span class="comment">-- 左外连接 left join</span></span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为<span class="keyword">null</span>填充</span><br><span class="line">    <span class="comment">-- 右外连接 right join</span></span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为<span class="keyword">null</span>填充</span><br><span class="line"><span class="comment">-- 自然连接(natural join)</span></span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了<span class="keyword">using</span>，会自动查找相同字段名。</span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">left join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">right join</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">info</span>.id, <span class="keyword">info</span>.name, <span class="keyword">info</span>.stu_num, extra_info.hobby, extra_info.sex <span class="keyword">from</span> <span class="keyword">info</span>, extra_info <span class="keyword">where</span> <span class="keyword">info</span>.stu_num = extra_info.stu_id;</span><br></pre></td></tr></table></figure>
<p>INSERT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>语句获得的数据可以用<span class="keyword">insert</span>插入。</span><br><span class="line">可以省略对列的指定，要求 <span class="keyword">values</span> () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用<span class="keyword">set</span>语法。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SET</span> field<span class="operator">=</span><span class="keyword">value</span>,...；</span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (), (), ();</span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="number">10</span><span class="operator">+</span><span class="number">10</span>, now());</span><br><span class="line">可以使用一个特殊值 <span class="keyword">DEFAULT</span>，表示该列使用默认值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="keyword">DEFAULT</span>);</span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SELECT</span> ...;</span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span><span class="operator">/</span><span class="keyword">SET</span><span class="operator">/</span><span class="keyword">SELECT</span> <span class="keyword">ON</span> DUPLICATE KEY UPDATE 字段<span class="operator">=</span>值, …;</span><br></pre></td></tr></table></figure>
<p>DELETE</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_definition] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] [<span class="keyword">LIMIT</span> row_count]</span><br><span class="line">按照条件删除。<span class="keyword">where</span></span><br><span class="line">指定删除的最多记录数。<span class="keyword">limit</span></span><br><span class="line">可以通过排序条件删除。<span class="keyword">order</span> <span class="keyword">by</span> + <span class="keyword">limit</span></span><br><span class="line">支持多表删除，使用类似连接语法。</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 需要删除数据多表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">using</span> 表连接操作 条件。</span><br></pre></td></tr></table></figure>
<p>TRUNCATE</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line"><span class="number">1</span>，<span class="keyword">truncate</span> 是删除表再创建，<span class="keyword">delete</span> 是逐条删除</span><br><span class="line"><span class="number">2</span>，<span class="keyword">truncate</span> 重置auto_increment的值。而<span class="keyword">delete</span>不会</span><br><span class="line"><span class="number">3</span>，<span class="keyword">truncate</span> 不知道删除了几条，而<span class="keyword">delete</span>知道。</span><br><span class="line"><span class="number">4</span>，当被用于带分区的表时，<span class="keyword">truncate</span> 会保留分区</span><br></pre></td></tr></table></figure>
<p>备份与还原</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">mysqldump [<span class="keyword">options</span>] db_name [<span class="keyword">tables</span>]</span><br><span class="line">mysqldump [<span class="keyword">options</span>] <span class="comment">---database DB1 [DB2 DB3...]</span></span><br><span class="line">mysqldump [<span class="keyword">options</span>] <span class="comment">--all--database</span></span><br><span class="line"><span class="number">1.</span> 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.<span class="keyword">sql</span>)</span><br><span class="line"><span class="number">2.</span> 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表<span class="number">1</span> 表<span class="number">2</span> 表<span class="number">3</span> &gt; 文件名(D:/a.<span class="keyword">sql</span>)</span><br><span class="line"><span class="number">3.</span> 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.<span class="keyword">sql</span>)</span><br><span class="line"><span class="number">4.</span> 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 <span class="comment">--lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">可以-w携带<span class="keyword">WHERE</span>条件</span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line"><span class="number">1.</span> 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line"><span class="number">2.</span> 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>
<p>视图</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">什么是视图：</span><br><span class="line">    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span><br><span class="line">    视图具有表结构文件，但不存在数据文件。</span><br><span class="line">    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span><br><span class="line">    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span><br><span class="line">-- 创建视图</span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="built_in">REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;] <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用<span class="keyword">select</span>语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于<span class="keyword">SELECT</span>语句检索的列数</span><br><span class="line">-- 查看结构</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name ...</span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">-- 视图作用</span><br><span class="line">    <span class="number">1.</span> 简化业务逻辑</span><br><span class="line">    <span class="number">2.</span> 对客户端隐藏真实的表结构</span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    <span class="keyword">MERGE</span>       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure>
<p>事务(transaction)</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续<span class="keyword">SQL</span>的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - InnoDB被称为事务安全型引擎。</span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line">    <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>; 或者 <span class="keyword">BEGIN</span>;</span><br><span class="line">    开启事务后，所有被执行的<span class="keyword">SQL</span>语句均被认作当前事务内的<span class="keyword">SQL</span>语句。</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"><span class="comment">-- 事务的特性</span></span><br><span class="line">    <span class="number">1.</span> 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    <span class="number">2.</span> 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    <span class="number">3.</span> 隔离性（<span class="keyword">Isolation</span>）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    <span class="number">4.</span> 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"><span class="comment">-- 事务的实现</span></span><br><span class="line">    <span class="number">1.</span> 要求是事务支持的表类型</span><br><span class="line">    <span class="number">2.</span> 执行一组相关的操作前开启事务</span><br><span class="line">    <span class="number">3.</span> 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"><span class="comment">-- 事务的原理</span></span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要<span class="keyword">commit</span>提交持久化数据操作。</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    <span class="number">2.</span> 事务不能被嵌套</span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line">    <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line">    <span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br><span class="line"><span class="comment">-- InnoDB自动提交特性设置</span></span><br><span class="line">    <span class="keyword">SET</span> autocommit = <span class="number">0</span>|<span class="number">1</span>;   <span class="number">0</span>表示关闭自动提交，<span class="number">1</span>表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要<span class="keyword">commit</span>提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>不同的是，</span><br><span class="line">        <span class="keyword">SET</span> autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure>
<p>锁表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line"><span class="comment">-- 锁定</span></span><br><span class="line">    <span class="keyword">LOCK</span> <span class="keyword">TABLES</span> tbl_name [<span class="keyword">AS</span> <span class="keyword">alias</span>]</span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">    UNLOCK <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure>
<p>触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line"><span class="comment">-- 创建触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        <span class="keyword">INSERT</span>：将新行插入表时激活触发程序</span><br><span class="line">        UPDATE：更改某一行时激活触发程序</span><br><span class="line">        <span class="keyword">DELETE</span>：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name</span><br><span class="line">可以使用<span class="keyword">old</span>和<span class="keyword">new</span>代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是<span class="keyword">old</span>，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符连接函数</span></span><br><span class="line">concat(str1,str2,...])</span><br><span class="line">concat_ws(separator,str1,str2,...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分支语句</span></span><br><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 <span class="keyword">then</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改最外层语句结束符</span></span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    <span class="keyword">SQL</span>语句</span><br><span class="line">自定义结束符号</span><br><span class="line">delimiter ;     <span class="comment">-- 修改回原来的分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语句块包裹</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    语句块</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 特殊的执行</span></span><br><span class="line"><span class="number">1.</span> 只要添加记录，就会触发程序。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">Insert</span> <span class="keyword">into</span> <span class="keyword">on</span> duplicate key update 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 before <span class="keyword">insert</span>, after <span class="keyword">insert</span>;</span><br><span class="line">    如果有重复记录并更新，会触发 before <span class="keyword">insert</span>, before update, after update;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before <span class="keyword">insert</span>, before update</span><br><span class="line"><span class="number">3.</span> Replace 语法 如果有记录，则执行 before <span class="keyword">insert</span>, before <span class="keyword">delete</span>, after <span class="keyword">delete</span>, after <span class="keyword">insert</span></span><br></pre></td></tr></table></figure>
<p>SQL编程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--// 局部变量 ----------</span></span><br><span class="line"><span class="comment">-- 变量声明</span></span><br><span class="line">    <span class="keyword">declare</span> var_name[,...] type [<span class="keyword">default</span> <span class="keyword">value</span>]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个<span class="keyword">default</span>子句。值可以被指定为一个表达式，不需要为一个常数。如果没有<span class="keyword">default</span>子句，初始值为<span class="keyword">null</span>。</span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    使用 <span class="keyword">set</span> 和 <span class="keyword">select</span> <span class="keyword">into</span> 语句为变量赋值。</span><br><span class="line">    <span class="operator">-</span> 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 全局变量 ----------</span></span><br><span class="line"><span class="comment">-- 定义、赋值</span></span><br><span class="line"><span class="keyword">set</span> 语句可以定义并为变量赋值。</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var</span> <span class="operator">=</span> <span class="keyword">value</span>;</span><br><span class="line">也可以使用<span class="keyword">select</span> <span class="keyword">into</span>语句为变量初始化并赋值。这样要求<span class="keyword">select</span>语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过<span class="keyword">select</span>执行完成。此时为了避免<span class="operator">=</span>被当作关系运算符看待，使用:<span class="operator">=</span>代替。（<span class="keyword">set</span>语句可以使用<span class="operator">=</span> 和 :<span class="operator">=</span>）。</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var</span>:<span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@v1</span>:<span class="operator">=</span>id, <span class="variable">@v2</span><span class="operator">=</span>name <span class="keyword">from</span> t1 limit <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_name <span class="keyword">where</span> <span class="variable">@var</span>:<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">into</span> 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    <span class="operator">-</span><span class="operator">|</span> <span class="keyword">select</span> <span class="built_in">max</span>(height) <span class="keyword">into</span> <span class="variable">@max</span>_height <span class="keyword">from</span> tb;</span><br><span class="line"><span class="comment">-- 自定义变量名</span></span><br><span class="line">为了避免<span class="keyword">select</span>语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line"><span class="variable">@var</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">    <span class="operator">-</span> 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 控制结构 ----------</span></span><br><span class="line"><span class="comment">-- if语句</span></span><br><span class="line">if search_condition <span class="keyword">then</span></span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition <span class="keyword">then</span></span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">else</span></span><br><span class="line">    statement_list]</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="comment">-- case语句</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">value</span> <span class="keyword">WHEN</span> [compare<span class="operator">-</span><span class="keyword">value</span>] <span class="keyword">THEN</span> <span class="keyword">result</span></span><br><span class="line">[<span class="keyword">WHEN</span> [compare<span class="operator">-</span><span class="keyword">value</span>] <span class="keyword">THEN</span> <span class="keyword">result</span> ...]</span><br><span class="line">[<span class="keyword">ELSE</span> <span class="keyword">result</span>]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- while循环</span></span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> while [end_label];</span><br><span class="line"><span class="operator">-</span> 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    <span class="comment">-- 退出循环</span></span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 内置函数 ----------</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line"><span class="built_in">abs</span>(x)          <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line"><span class="built_in">ceil</span>(x)         <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line"><span class="built_in">floor</span>(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line"><span class="built_in">mod</span>(m, n)       <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)       <span class="comment">-- m^n</span></span><br><span class="line"><span class="built_in">sqrt</span>(x)         <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()          <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)  <span class="comment">-- 截取d位小数</span></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line">now(), <span class="built_in">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line"><span class="built_in">current_date</span>();                 <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="built_in">current_time</span>();                 <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="type">date</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取日期部分</span></span><br><span class="line"><span class="type">time</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>, <span class="string">&#x27;%d %y %a %d %m %b %j&#x27;</span>); <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();               <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)          <span class="comment">-- string长度，字节</span></span><br><span class="line"><span class="keyword">char_length</span>(string)     <span class="comment">-- string的字符个数</span></span><br><span class="line"><span class="built_in">substring</span>(str, position [,length])      <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line">replace(str ,search_str ,replace_str)   <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line">instr(string ,substring)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line">concat(string [,...])   <span class="comment">-- 连接字串</span></span><br><span class="line">charset(str)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line">lcase(string)           <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(string, length)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line">load_file(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line">locate(substring, string [,start_position]) <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line">lpad(string, length, pad)   <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line">ltrim(string)           <span class="comment">-- 去除前端空格</span></span><br><span class="line">repeat(string, count)   <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(string, length, pad)   <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line">rtrim(string)           <span class="comment">-- 去除后端空格</span></span><br><span class="line">strcmp(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"><span class="comment">-- 流程函数</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> [<span class="keyword">condition</span>] <span class="keyword">then</span> <span class="keyword">result</span> [<span class="keyword">when</span> [<span class="keyword">condition</span>] <span class="keyword">then</span> <span class="keyword">result</span> ...] [<span class="keyword">else</span> <span class="keyword">result</span>] <span class="keyword">end</span>   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="built_in">count</span>()</span><br><span class="line"><span class="built_in">sum</span>();</span><br><span class="line"><span class="built_in">max</span>();</span><br><span class="line"><span class="built_in">min</span>();</span><br><span class="line"><span class="built_in">avg</span>();</span><br><span class="line">group_concat()</span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line"><span class="keyword">default</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">--// 存储函数，自定义函数 ----------</span></span><br><span class="line"><span class="comment">-- 新建</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (参数列表) <span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    <span class="operator">-</span> 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    <span class="operator">-</span> 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    <span class="operator">-</span> 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    <span class="operator">-</span> 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    <span class="operator">-</span> 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    <span class="operator">-</span> 一定要有 <span class="keyword">return</span> 返回值语句。</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [IF <span class="keyword">EXISTS</span>] function_name;</span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;partten&#x27;</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name;</span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> function_name 函数选项</span><br><span class="line"></span><br><span class="line"><span class="comment">--// 存储过程，自定义功能 ----------</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的<span class="keyword">sql</span>组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过<span class="keyword">call</span>执行。</span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line"><span class="keyword">IN</span>，表示输入型</span><br><span class="line"><span class="keyword">OUT</span>，表示输出型</span><br><span class="line"><span class="keyword">INOUT</span>，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储过程 */</span> <span class="comment">------------------</span></span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：<span class="keyword">CALL</span> 过程名</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line"><span class="operator">-</span> 没有返回值。</span><br><span class="line"><span class="operator">-</span> 只能单独调用，不可夹杂在其他语句中</span><br><span class="line"><span class="comment">-- 参数</span></span><br><span class="line"><span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 数据类型</span><br><span class="line"><span class="keyword">IN</span>      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line"><span class="keyword">OUT</span>     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line"><span class="keyword">INOUT</span>   输入输出：既可输入，也可输出</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名 (参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p>用户和权限管理</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- root密码重置</span></span><br><span class="line"><span class="number">1.</span> 停止MySQL服务</span><br><span class="line"><span class="number">2.</span>  [Linux] /usr/<span class="keyword">local</span>/mysql/bin/safe_mysqld <span class="comment">--skip-grant-tables &amp;</span></span><br><span class="line">    [Windows] mysqld <span class="comment">--skip-grant-tables</span></span><br><span class="line"><span class="number">3.</span> use mysql;</span><br><span class="line"><span class="number">4.</span> <span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(&quot;密码&quot;) <span class="keyword">WHERE</span> `<span class="keyword">user</span>` = &quot;root&quot;;</span><br><span class="line"><span class="number">5.</span> FLUSH <span class="keyword">PRIVILEGES</span>;</span><br><span class="line">用户信息表：mysql.<span class="keyword">user</span></span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="comment">-- 增加用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 IDENTIFIED <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略<span class="keyword">PASSWORD</span>关键词。要把密码指定为由<span class="keyword">PASSWORD</span>()函数返回的混编值，需包含关键字<span class="keyword">PASSWORD</span></span><br><span class="line"><span class="comment">-- 重命名用户</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;密码&#x27;</span>)  <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名 = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;密码&#x27;</span>) <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [IDENTIFIED <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    - <span class="keyword">all</span> <span class="keyword">privileges</span> 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> `pms`.* <span class="keyword">TO</span> <span class="string">&#x27;pms&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;pms0817&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> 用户名</span><br><span class="line">    <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">    <span class="keyword">SHOW</span> GRANTS; 或 <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>();</span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span>, <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> <span class="keyword">FROM</span> 用户名   <span class="comment">-- 撤销所有权限</span></span><br><span class="line"><span class="comment">-- 权限层级</span></span><br><span class="line"><span class="comment">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span></span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.<span class="keyword">user</span></span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*和 <span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用<span class="keyword">REVOKE</span>时，您必须指定与被授权列相同的列。</span><br><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">ALL</span> [<span class="keyword">PRIVILEGES</span>]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>   <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">ROUTINE</span>   <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROUTINE</span>  <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>     <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>     <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>  <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>     <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line">FILE    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line"><span class="keyword">INDEX</span>   <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="comment">-- 允许使用INSERT</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>  <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD  <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line"><span class="keyword">REPLICATION</span> CLIENT  <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">REPLICATION</span> SLAVE   <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES  <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>   <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line">SHUTDOWN    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER   <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line"><span class="keyword">UPDATE</span>  <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line"><span class="keyword">USAGE</span>   <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">OPTION</span>    <span class="comment">-- 允许授予权限</span></span><br></pre></td></tr></table></figure>
<p>表维护</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line"><span class="symbol">ANALYZE</span> [<span class="symbol">LOCAL</span> | <span class="symbol">NO_WRITE_TO_BINLOG</span>] <span class="symbol">TABLE</span> 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line"><span class="symbol">CHECK</span> <span class="symbol">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;<span class="symbol">QUICK</span> | <span class="symbol">FAST</span> | <span class="symbol">MEDIUM</span> | <span class="symbol">EXTENDED</span> | <span class="symbol">CHANGED</span>&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line"><span class="symbol">OPTIMIZE</span> [<span class="symbol">LOCAL</span> | <span class="symbol">NO_WRITE_TO_BINLOG</span>] <span class="symbol">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>
<p>杂项</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件<span class="keyword">db</span>.opt。</span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 <span class="comment">/* 注释内容 */</span></span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、<span class="keyword">TAB</span>、换行等）)</span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 &#x27;</span><br><span class="line">5. CMD命令行内的语句结束符可以为 <span class="string">&quot;;&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;g&quot;</span>，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line">7. 清除已有语句：c</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
</search>
