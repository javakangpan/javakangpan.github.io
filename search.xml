<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList</title>
    <url>/2021/04/14/ArrayList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList是实现List接口的动态数组，所谓动态就是它的大小是可变的。</p>
<p>每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。默认初始容量为10。随着ArrayList中元素的增加，它的容量也会不断的自动增长。</p>
<p>在每次添加新的元素时，ArrayList都会检查是否需要进行扩容操作，扩容操作带来数据向新数组的重新拷贝，所以如果我们知道具体业务数据量，在构造ArrayList时可以给ArrayList指定一个初始容量，这样就会减少扩容时数据的拷贝问题。当然在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。</p>
<p>注意，ArrayList实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。所以为了保证同步，最好的办法是在创建时完成，以防止意外对列表进行不同步的访问：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList(...)); </span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="ArrayList的继承关系"><a href="#ArrayList的继承关系" class="headerlink" title="ArrayList的继承关系"></a>ArrayList的继承关系</h3><p>ArrayList继承AbstractList抽象父类，实现了List接口（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure>
<h3 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h3><p>ArrayList的底层是一个object数组，并且由trasient修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment"> * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment"> * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment"> * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>
<p>ArrayList底层数组不会参与序列化，而是使用另外的序列化方式(transient修饰)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment"> * deserialize it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        <span class="keyword">int</span> capacity = calculateCapacity(elementData, size);</span><br><span class="line">        SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, capacity);</span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">     rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">     ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">     System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                      size - index);</span><br><span class="line">     elementData[index] = element;</span><br><span class="line">     size++;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     rangeCheck(index);</span><br><span class="line"></span><br><span class="line">     modCount++;</span><br><span class="line">     E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">         System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                          numMoved);</span><br><span class="line">     elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> oldValue;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">     rangeCheck(index);</span><br><span class="line"></span><br><span class="line">     E oldValue = elementData(index);</span><br><span class="line">     elementData[index] = element;</span><br><span class="line">     <span class="keyword">return</span> oldValue;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">     rangeCheck(index);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> elementData(index);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ArrayList-fail-fast-机制"><a href="#ArrayList-fail-fast-机制" class="headerlink" title="ArrayList fail-fast 机制"></a>ArrayList fail-fast 机制</h3><p>fail-fast的字面意思是“快速失败”。当我们在遍历集合元素的时候，经常会使用迭代器，但在迭代器遍历元素的过程中，如果集合的结构被改变的话，就会抛出异常，防止继续遍历。这就是所谓的快速失败机制。<br><code>protected transient int modCount = 0;</code><br>modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。<br>在迭代过程中，判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 ArrayList。<br>迭代器的快速失败行为是不一定能够得到保证的，一般来说，存在非同步的并发修改时，不可能做出任何坚决的保证的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始容量和扩容方式"><a href="#初始容量和扩容方式" class="headerlink" title="初始容量和扩容方式"></a>初始容量和扩容方式</h3><p>初始容量是10</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>元素添加的时候进行扩容，扩容方式是让新容量等于旧容量的1.5倍 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当新容量大于最大数组长度，有两种情况，一种是溢出，抛异常，一种是没溢出，返回整数的最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RandomAccess"><a href="#RandomAccess" class="headerlink" title="RandomAccess"></a>RandomAccess</h3><p>RandomAccess接口是一个标志接口，List集合实现这个接口，就能支持快速随机访问，使用for循环遍历快。比如List下的ArrayList和LinkedList，其中ArrayList实现了RandomAccess，而LinkedList没有。利用instanceof来判断哪一个是实现了RandomAccess，LinkedList使用迭代器快，ArrayList使用for循环遍历快。通过RandomAccess接口标识，不同的集合使用不同的遍历方式。</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>add(E e)方法<br>添加元素到末尾，平均时间复杂度为O(1)。</p>
<p>add(int index, E element)方法<br>添加元素到指定位置，平均时间复杂度为O(n)。</p>
<p>get(int index)方法<br>获取指定索引位置的元素，时间复杂度为O(1)。</p>
<p>remove(int index)方法<br>删除指定索引位置的元素，时间复杂度为O(n)。</p>
<p>remove(Object o)方法<br>删除指定元素值的元素，时间复杂度为O(n)</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Bean</title>
    <url>/2021/04/13/Bean/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>ConfigurationProperties</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;prefix&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在类名上加上 <code>@ConfigurationProperties</code> 注解，读取 <code>application.properties</code>  配置 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p>启动项目 控制台打印 <code>url</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(dataSourceBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 <code>Bean</code> 的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 打印了 <code>root</code></p>
<p><code>@Component</code> 配置 <code>Bean</code> （<code>@Repository @Service @Controller</code> 等效），定义一个接口 <code>Todo</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个实现类 <code>Foo</code>  <code>Bar</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@Autowired</code> 根据类型注入，所有类型为 <code>Todo</code> 的全部注入 <code>list</code> ( 指 <code>For</code> 和 <code>Bar</code>)<br><code>@Inject</code> 也是按类型注入，不过没有 <code>required</code> 属性<br><code>@Qualifier</code> 根据名称注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;todos&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todos</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Todo&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier(&quot;todos&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Todos todos;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        todos.getList().stream().forEach( e -&gt; e.print());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 控制台打印 <code>bar</code> 和 <code>foo</code><br>如果 <code>foo</code> 要优先打印，在 <code>Foo</code> 类上加  <code>@Order(value = 1)</code>，值越小优先级越高，<code>Foo</code> 优先加载</p>
<p>实现延迟加载 定义一个 <code>LazyDo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">todo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;lazy todo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造注入 <code>lazyDao</code>，  <code>@Resource</code> 默认按名称注入，匹配不上按类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LazyDo lazyDo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;lazyDo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLazyDo</span><span class="params">(LazyDo lazyDo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lazyDo = lazyDo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lazyDo.todo();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 <code>lazyDao</code> 加载为 <code>null</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.lazyDo = lazyDo; lazyDao: <span class="literal">null</span> lazyDo: <span class="string">&quot;com.kangpan.model.lazy@7a65a360&quot;</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问地址 <code>http://localhost:8081/test/</code> 控制台打印 <code>lazy todo</code></p>
<p><code> Bean</code> 默认是单例，在类上加注解 <code>@Scope(&quot;prototype&quot;)</code> 多例</p>
<p>看下 <code>Bean</code> 初始化 及 销毁前 执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目 打印台输出 <code>init</code> ，关闭项目 打印台输出 <code>destroy</code></p>
<p>根据当前环境配置 <code>Bean</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDev</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDev</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>application.properties</code> 配置 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test.name=testName <span class="comment">// @Value 赋值</span></span><br><span class="line">spring.profiles.active=dev <span class="comment">// 当前环境</span></span><br></pre></td></tr></table></figure>
<p>配置 <code>dev</code> 和 <code>test</code>  环境下的 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dev</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestDev <span class="title">testDev</span><span class="params">(<span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestDev(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestDev <span class="title">testTest</span><span class="params">(<span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestDev(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDev testDev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testDev.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 打印 testName</p>
<p><code>XML</code> 配置  <code>Bean</code> 简化</p>
<p>属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>,value = <span class="string">&quot;value&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>构造参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;constructor-arg type=<span class="string">&quot;java.lang.String&quot;</span> value=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">&quot;refBean&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>集合</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key=<span class="string">&quot;key&quot;</span> value=<span class="string">&quot;value&quot;</span>&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key-ref=<span class="string">&quot;keyBean&quot;</span> value-ref=<span class="string">&quot;valueBean&quot;</span>&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;name&quot;</span> ref=<span class="string">&quot;refBean&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>或者 <code>XML</code> 声明 <code>p</code> 命名空间，然后配置 <code>Bean</code> ，特殊字符 用 <code>&lt;![CDATA[]]&gt;</code> 转义</p>
<p>项目启动 <code>@SpringBootApplication</code> 注解中的  <code>@EnableAutoConfiguration</code> 会加载配置文件的 <code>Bean</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>resources/META-INF/spring.factories</code> 文件中配置</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span>.EnableAutoConfiguration=com<span class="selector-class">.kangpan</span><span class="selector-class">.model</span>.Configs</span><br></pre></td></tr></table></figure>
<p><code>Configs</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@Import(&#123;ConfigFoo.class,ConfigBar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引入的 <code>ConfigFoo ConfigBar</code>  类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ConfigBar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigFoo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ConfigFoo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 控制台打印 <code>ConfigBar ConfigFoo</code>，如果 <code>@EnableConfigurationProperties</code> 改成  <code>@Configuration</code> 不需要在 <code>resources/META-INF/spring.factories</code> 文件中配置<br>看下 <code>Configuration</code> 接口，加了 <code>@Component</code> 注解 会实例化 <code>Bean</code></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line">public <span class="variable">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@ConfigurationProperties</code>  结合 <code>@EnableConfigurationProperties</code> 配置Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span> <span class="comment">// 读取  application.properties 中的配置</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>application.properties</code> 文件中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p><code>@EnableConfigurationProperties</code> 使 <code>@ConfigurationProperties</code> 注解的类注入自身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceBean2.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBeanConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean2 dataSourceBean2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceBeanConfig</span><span class="params">(DataSourceBean2 dataSourceBean2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSourceBean2 = dataSourceBean2;</span><br><span class="line">        log.info(<span class="string">&quot;url: &#123;&#125;&quot;</span>,dataSourceBean2.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring.factories</code> 配置 或者 <code>DataSourceBeanConfig</code> 类 加上 <code>@Configuration</code> 或者 <code>@Component</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.kangpan.model.DataSourceBeanConfig</span><br></pre></td></tr></table></figure>
<p>控制台打印 <code>url</code></p>
<p>自定义 <code>XML</code> 配置 <code>Bean</code>， 在 <code>resource/bean.xml</code> 配置 <code>dataSourceBean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kangpan.model.DataSourceBean&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结合 <code>@ConfigurationProperties</code> 属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 <code>@ImportResource</code> 导入 <code>bean.xml</code> 配置的 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;dataSourceBean.getUrl():&#123;&#125;&quot;</span>,dataSourceBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>项目启动 控制台打印 <code>url</code></p>
<p>自定义 <code>properties</code> 配置 <code>Bean</code>，在 <code>resources/dataSource.properties</code> 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p><code>@PropertySource</code> 加载指定文件的属性， <code>@Value</code> 赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:dataSource.properties&quot;)</span>  </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用  <code>@ConfigurationProperties</code> 属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:dataSource.properties&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourcesBean dataSourcesBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;dataSourcesBean.getUrl():&#123;&#125;&quot;</span>,dataSourcesBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目 打印 <code>url</code></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Aui</title>
    <url>/2021/04/27/Aui/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>做了几个迭代的前端，这里总结下自己学的东西</p>
</blockquote>
<h3 id="页面格式"><a href="#页面格式" class="headerlink" title="页面格式"></a>页面格式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>这里写HTML元素<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> 组件 <span class="keyword">from</span> <span class="string">&#x27;文件路径&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"> components:&#123;组件引入&#125;,</span><br><span class="line"> computed:&#123;计算属性&#125;,</span><br><span class="line"> watch:&#123;监听&#125;,</span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> &#123;属性定义及初始化&#125;&#125;,</span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;实例创建完之后的钩子函数&#125;,</span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;页面完成后执行的钩子函数，实时监控数据，数据变化实时更新DOM&#125;,</span></span><br><span class="line"><span class="javascript"> <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span>&#123;实例销毁执行的钩子函数&#125;,</span></span><br><span class="line"> methods:&#123;函数&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span>样式<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="父子传值及全局事件"><a href="#父子传值及全局事件" class="headerlink" title="父子传值及全局事件"></a>父子传值及全局事件</h3><p>父组件中引入子组件，例如：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &lt;子组件 :value=&#x27;值&#x27; ref=&#x27;引用&#x27; @function=&#x27;事件&#x27; &gt;&lt;/子组件&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import 子组件 from &#x27;子组件路径&#x27;</span></span><br><span class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    components:&#123;</span></span><br><span class="line"><span class="template-variable">        子组件：子组件</span></span><br><span class="line"><span class="template-variable">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><code>function</code>事件是子组件发送过来的，通过 <code>this.$emit(&#39;function&#39;,传值)</code><br><code>value</code>属性是父组件传值给子组件，在子组件接收</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> props: &#123;</span><br><span class="line">     value: &#123;</span><br><span class="line">         type:<span class="built_in">Boolean</span>,</span><br><span class="line">         <span class="keyword">default</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ref</code> 引用，父组件可以通过子组件的引用调子组件的方法<br><code>const data = this.$refs[&#39;引用&#39;].getData()</code><br>全局事件发送及接收，事件<code>ID</code>必须唯一</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">this.$evenBus.<span class="constructor">$emit(<span class="params">id</span>,<span class="params">value</span>)</span></span><br><span class="line">this.$evenBus.<span class="constructor">$on(<span class="params">id</span>,<span class="params">value</span> =&gt; &#123;<span class="params">do</span> <span class="params">something</span>&#125;)</span></span><br></pre></td></tr></table></figure>
<h3 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h3><p><code>new Date(window._Hae.Date.format(时间,&#39;yyyy/MM/dd hh:mm:ss&#39;)).valueOf()</code></p>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newList = <span class="built_in">this</span>.<span class="keyword">list</span>.<span class="keyword">map</span>(ele =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        新属性:ele.属性</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.<span class="keyword">push</span>(&#123;</span><br><span class="line">    path:<span class="string">&#x27;路径&#x27;</span>,</span><br><span class="line">    query:&#123;属性:属性值&#125;</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">window.sessinStorage.set<span class="constructor">Item(<span class="params">key</span>,<span class="params">value</span>)</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(window.sessionStorage.get<span class="constructor">Item(<span class="params">key</span>)</span>)</span><br><span class="line">window.sessionStorage.remove<span class="constructor">Item(<span class="params">key</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="服务请求"><a href="#服务请求" class="headerlink" title="服务请求"></a>服务请求</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;请求URL&#x27;</span></span><br><span class="line"><span class="keyword">const</span> params = &#123;<span class="string">&#x27;属性&#x27;</span>:属性值&#125;</span><br><span class="line"><span class="keyword">this</span>.$service.network.post(url,params).then(res = &gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="keyword">data</span>.resultCode === <span class="number">200</span>)&#123;<span class="keyword">do</span> something&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="keyword">do</span> something&#125;</span><br><span class="line">&#125;).<span class="keyword">catch</span>(() =&gt; &#123;异常处理&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve,reject)</span> =&gt;</span> &#123;调服务,resolve(结果)&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="下拉、文本切换"><a href="#下拉、文本切换" class="headerlink" title="下拉、文本切换"></a>下拉、文本切换</h3><p><code>v-lookUpName</code> 自定义指令，用于数据转义</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">aui-dropdown</span> <span class="attr">v-if</span>=<span class="string">&#x27;页面权限&#x27;</span> <span class="attr">v-bind</span>=<span class="string">&quot;dropDownOp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aui-dropdown</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">v-lookUpName</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="列表字段加链接"><a href="#列表字段加链接" class="headerlink" title="列表字段加链接"></a>列表字段加链接</h3><p><code>#data</code> 为列表行数据，通过<code>a</code>标签链接，链接的方法为<code>link</code>，<code> grid.getRowData(target)</code> 获取行数据</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">content:<span class="string">&#x27;&#123;&#123;:~renderUtil.get(#data)&#125;&#125;&#x27;</span></span><br><span class="line">renderUtil：&#123;</span><br><span class="line">    get:<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;a eno=&quot;link&quot;&gt;&lt;/a&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">onComplete:<span class="function">(<span class="params">grid,op</span>)= &#123;<span class="params">grid</span>.<span class="params">setEvent</span>(<span class="params"><span class="string">&#x27;link&#x27;</span>,(target,grid,e</span>) =&gt;</span> &#123;</span><br><span class="line">    let rowData = grid.getRowData(target)</span><br><span class="line">&#125;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>
<h3 id="重新渲染附件列表表格"><a href="#重新渲染附件列表表格" class="headerlink" title="重新渲染附件列表表格"></a>重新渲染附件列表表格</h3><p>深度克隆<code>Op</code>（表格配置），然后赋值再渲染</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">const grid = <span class="built_in">this</span>.$refs.gridRef.widget</span><br><span class="line">let <span class="keyword">new</span><span class="type">Op</span> = <span class="literal">_</span>.cloneDeep(<span class="built_in">this</span>.Op)</span><br><span class="line"><span class="keyword">new</span><span class="type">Op</span>.dataset.value = grid.getValue()</span><br><span class="line">grid.reInit(<span class="keyword">new</span><span class="type">Op</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Grid-三部曲"><a href="#Grid-三部曲" class="headerlink" title="Grid 三部曲"></a>Grid 三部曲</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">获取<span class="built_in">grid</span>：const <span class="built_in">grid</span> = this.$refs.gridRef.widget</span><br><span class="line">获取<span class="built_in">row</span>：const <span class="built_in">row</span> = <span class="built_in">grid</span>.getFocusRow()</span><br><span class="line">获取数据: const rowData = <span class="built_in">grid</span>.getRowData(<span class="built_in">row</span>)</span><br></pre></td></tr></table></figure>
<h3 id="列表经常用的函数"><a href="#列表经常用的函数" class="headerlink" title="列表经常用的函数"></a>列表经常用的函数</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">对选项的数据进行处理，返回<span class="literal">true</span>表示可以选</span><br><span class="line">onBeforeSelected:<span class="function"><span class="params">(data)</span> =&gt;</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">编辑之后数据处理，一般用来处理渲染到列表的数据</span><br><span class="line">onAfterEdit:<span class="function"><span class="params">(value,rowData,td,col,oldValue)</span> =&gt;</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">是否可以编辑</span><br><span class="line">onBeforeEdit:<span class="function"><span class="params">(cellValue,rowData,td,col)</span> =&gt;</span> &#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="搜索区域-涉及分页"><a href="#搜索区域-涉及分页" class="headerlink" title="搜索区域 涉及分页"></a>搜索区域 涉及分页</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$service.business.getData = <span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;curPage,pageSize&#125; = args.pageVO</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">        pageVO: &#123;curPage,pageSize&#125;,</span><br><span class="line">        ...this.searchData</span><br><span class="line">    &#125;</span><br><span class="line">    retrun <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> </span><br><span class="line">    <span class="built_in">this</span>.$service.network.post(url,params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索重置，重置按钮</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">this.<span class="variable">$refs</span><span class="selector-class">.xxxRef</span><span class="selector-class">.widget</span><span class="selector-class">.search</span>(this.searchData)</span><br><span class="line"><span class="function"><span class="title">resetButton</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(let key <span class="keyword">in</span> this.searchData)&#123;</span><br><span class="line">        this<span class="selector-class">.searchData</span><span class="selector-attr">[key]</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    this.<span class="variable">$refs</span><span class="selector-class">.xxxRef</span><span class="selector-class">.widget</span><span class="selector-class">.rebuild</span>()</span><br><span class="line">    this.<span class="variable">$nextTick</span>(()= &gt; &#123;</span><br><span class="line">        this.<span class="variable">$resf</span><span class="selector-class">.xxxRefs</span><span class="selector-class">.widget</span><span class="selector-class">.search</span>(this.searchData)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lookUp-请求"><a href="#lookUp-请求" class="headerlink" title="lookUp 请求"></a>lookUp 请求</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">this.<span class="symbol">$service</span>.business.getLookUpItem(&#123;<span class="attr">classifyCode</span>:<span class="string">&#x27;lookUp配置的key&#x27;</span>&#125;).then(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;<span class="keyword">do</span> something&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="页面多次请求服务"><a href="#页面多次请求服务" class="headerlink" title="页面多次请求服务"></a>页面多次请求服务</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Timer:<span class="literal">null</span> 定时器</span><br><span class="line"><span class="keyword">let</span> totalTime = <span class="number">40</span> * <span class="number">1000</span> 倒计时总时间，这里设置请求四次</span><br><span class="line"><span class="keyword">const</span> interval = <span class="number">10</span> * <span class="number">1000</span> 每 <span class="number">10</span> 秒请求一次</span><br><span class="line"><span class="keyword">const</span> getApi = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    totalTime -= interval</span><br><span class="line">    <span class="keyword">if</span>(totalTime &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> something</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getApi() 先执行一次</span><br><span class="line"><span class="built_in">this</span>.Timer = <span class="built_in">setInterval</span>(getApi,interval) 每 <span class="number">10</span> 请求一次</span><br></pre></td></tr></table></figure>
<h3 id="集合根据某个字段判断是否有重复项"><a href="#集合根据某个字段判断是否有重复项" class="headerlink" title="集合根据某个字段判断是否有重复项"></a>集合根据某个字段判断是否有重复项</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">map</span> = data.reduce((<span class="keyword">all</span>,ele) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> key =  ele.属性</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">list</span> = <span class="keyword">all</span>.<span class="built_in">get</span>(key)</span><br><span class="line">    <span class="keyword">if</span>(!list) &#123;</span><br><span class="line">        <span class="keyword">list</span> = []</span><br><span class="line">        <span class="keyword">all</span>.<span class="keyword">set</span>(key,<span class="keyword">list</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">list</span>.push(ele)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">all</span></span><br><span class="line">    &#125;,<span class="keyword">new</span> Map())</span><br><span class="line">查找</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">find</span> = Array.from(<span class="keyword">map</span>.entries()).<span class="built_in">filter</span>(([des,<span class="keyword">list</span>]) =&gt; <span class="keyword">list</span>.length &gt; <span class="number">1</span>) </span><br></pre></td></tr></table></figure>
<h3 id="列表是否可以多选"><a href="#列表是否可以多选" class="headerlink" title="列表是否可以多选"></a>列表是否可以多选</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">const op = _<span class="selector-class">.cloneDeep</span>(this.gridOp)</span><br><span class="line">op<span class="selector-class">.columns</span><span class="selector-class">.find</span>(ele =&gt; ele<span class="selector-class">.field</span> = <span class="string">&#x27;multi&#x27;</span>)<span class="selector-class">.hideable</span> = false</span><br><span class="line">const grid = this.<span class="variable">$resf</span><span class="selector-class">.gridRef</span>.widget</span><br><span class="line">op<span class="selector-class">.dataset</span><span class="selector-class">.value</span> = grid<span class="selector-class">.getValue</span>()</span><br><span class="line">grid<span class="selector-class">.reInit</span>(op)</span><br></pre></td></tr></table></figure>
<h3 id="表单和Grid必填校验"><a href="#表单和Grid必填校验" class="headerlink" title="表单和Grid必填校验"></a>表单和Grid必填校验</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">window</span>._Hae.validForm(<span class="keyword">window</span>._$(<span class="string">&#x27;#id&#x27;</span>),<span class="keyword">valid</span> =&gt; &#123;<span class="keyword">do</span> something&#125;)</span><br><span class="line">grid.<span class="keyword">valid</span>(<span class="keyword">valid</span> =&gt; &#123;<span class="keyword">do</span> something&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="多个方法异步调用"><a href="#多个方法异步调用" class="headerlink" title="多个方法异步调用"></a>多个方法异步调用</h3><figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">Promise.<span class="literal">all</span>([方法,<span class="literal">other</span>])</span><br></pre></td></tr></table></figure>
<h3 id="异步请求表格中人员数据"><a href="#异步请求表格中人员数据" class="headerlink" title="异步请求表格中人员数据"></a>异步请求表格中人员数据</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ref</span>reshGridUserData</span><br></pre></td></tr></table></figure>
<h3 id="利用routeEvent-页面权限控制"><a href="#利用routeEvent-页面权限控制" class="headerlink" title="利用routeEvent 页面权限控制"></a>利用routeEvent 页面权限控制</h3><figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">index.js 文件</span><br><span class="line">router.beforeEach(<span class="function"><span class="params">(to,<span class="keyword">from</span>,<span class="built_in">next</span>)</span> =&gt;</span> &#123;<span class="keyword">do</span> something&#125;) </span><br></pre></td></tr></table></figure>
<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">distint(<span class="keyword">list</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">map</span> = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    result = <span class="keyword">list</span>.filter(ele =&gt; !<span class="keyword">map</span>.has(ele.属性) &amp;&amp; res.set(ele.属性,<span class="number">1</span>)).<span class="keyword">map</span>(item =&gt; (&#123;</span><br><span class="line">    ...item,</span><br><span class="line">    添加的字段:字段值</span><br><span class="line">    &#125;))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="过滤非法字段"><a href="#过滤非法字段" class="headerlink" title="过滤非法字段"></a>过滤非法字段</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const pureGridDataList = <span class="function"><span class="params">(dataList=[])</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dataList.map(item =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> _.reduce(item,<span class="function"><span class="params">(result,value,key)</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!_.startsWith(key,<span class="string">&#x27;_$&#x27;</span>) &amp;&amp; _.includes(key,<span class="string">&#x27;__&#x27;</span>) &amp;&amp; !_includes(<span class="string">&#x27;$$$&#x27;</span>)) &#123;</span><br><span class="line">                result[kye] = value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;,&#123;&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> something</span><br><span class="line">&#125;,<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Excel文件转换JSON"><a href="#Excel文件转换JSON" class="headerlink" title="Excel文件转换JSON"></a>Excel文件转换JSON</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parseFileToJson = <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(file.typ === <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>) &#123;</span><br><span class="line">           <span class="comment">// 兼容ie</span></span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">typeof</span>(FileReader.prototype.readAsBinaryString) !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">               FileReader.prototype.readAsBinaryString = <span class="function"><span class="keyword">function</span>(<span class="params">fileData</span>) </span>&#123;</span><br><span class="line">                   <span class="keyword">let</span> binary = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                   <span class="keyword">let</span> pt = <span class="built_in">this</span></span><br><span class="line">                   <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader()</span><br><span class="line">                   fileReader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                       <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(fileReader.result)</span><br><span class="line">                       <span class="keyword">var</span> length = bytes.byteLength</span><br><span class="line">                       <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                           binary +=</span><br><span class="line">                           <span class="built_in">String</span>.fromCharCode(bytes[i])</span><br><span class="line">                       &#125;</span><br><span class="line">                       pt.currentTarget = &#123;&#125;</span><br><span class="line">                       pt.currentTarget.result = binary</span><br><span class="line">                       pt.onload(pt)</span><br><span class="line">                   &#125;</span><br><span class="line">                   fileReader.readArrayBuffer(fileData)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader()</span><br><span class="line">           fileReader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="keyword">const</span> data = e.currentTarget.result</span><br><span class="line">               <span class="keyword">const</span> workbook = xlsx.read(data,&#123;<span class="attr">type</span>:<span class="string">&#x27;binary&#x27;</span>&#125;)</span><br><span class="line">               <span class="keyword">const</span> sheet = xlsx.utils.sheet_to_json(workbook.Sheets[workbook.SheetName[<span class="number">0</span>]])</span><br><span class="line">               resolve(sheet)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> fileReader.readAsBinaryString(file)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="循坏"><a href="#循坏" class="headerlink" title="循坏"></a>循坏</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span><span class="keyword">for</span><span class="constructor">Each(<span class="params">list</span>,(<span class="params">item</span>,<span class="params">index</span>)</span> =&gt; &#123;<span class="keyword">do</span> something&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="获取当前用户"><a href="#获取当前用户" class="headerlink" title="获取当前用户"></a>获取当前用户</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">this.<span class="variable">$service</span><span class="selector-class">.base</span><span class="selector-class">.getUserInfoSync</span>().userId</span><br><span class="line">this.<span class="variable">$service</span><span class="selector-class">.base</span><span class="selector-class">.getUserInfoSync</span>().userCN</span><br><span class="line">this.<span class="variable">$service</span><span class="selector-class">.base</span><span class="selector-class">.getUserInfoSync</span>().userAccount</span><br></pre></td></tr></table></figure>
<h3 id="文本域权限控制"><a href="#文本域权限控制" class="headerlink" title="文本域权限控制"></a>文本域权限控制</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aui-textarea</span> <span class="attr">v-readonly</span>=<span class="string">&#x27;true&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">aui-textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="列表单元格数据显示"><a href="#列表单元格数据显示" class="headerlink" title="列表单元格数据显示"></a>列表单元格数据显示</h3><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">window</span>.__$(<span class="keyword">grid</span>.getRowCell(curRow,<span class="string">&#x27;字段&#x27;</span>).<span class="keyword">text</span>(字段值))</span><br></pre></td></tr></table></figure>
<h3 id="列表字段高亮"><a href="#列表字段高亮" class="headerlink" title="列表字段高亮"></a>列表字段高亮</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">onRenderRow:(<span class="selector-tag">tr</span>,rowData,rowIdx) =&gt; &#123;</span><br><span class="line">    this.<span class="variable">$service</span><span class="selector-class">.business</span><span class="selector-class">.getLookUpItem</span>(&#123;classifyCode:<span class="string">&#x27;XXX&#x27;</span>&#125;)<span class="selector-class">.then</span>(item =&gt; &#123;<span class="selector-tag">tr</span><span class="selector-class">.find</span>(`<span class="selector-tag">td</span><span class="selector-attr">[field = <span class="string">&quot;&amp;&#123;字段&#125;&quot;</span>]</span>`)<span class="selector-class">.addClass</span>(<span class="string">&#x27;背景颜色&#x27;</span>)&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Aui</tag>
      </tags>
  </entry>
  <entry>
    <title>I bought a house</title>
    <url>/2021/04/18/Buy-home/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一个特别的日子"><a href="#一个特别的日子" class="headerlink" title="一个特别的日子"></a>一个特别的日子</h3><p>2021年4月18日，一个特别的日子。<br>    周六的时候还在加班，然后下午请假和同事去了 <code>招商一江璟城</code> 看房，总体来说教育和交通这块是没问题，但是我不喜欢那边的环境。看完之后回家，吃完饭，和老婆还有妈妈晚上去了<code>大华锦绣时代</code>，大华设计和布局是很好的，附件就是地铁五号线，对面就是众圆广场，房子南北通透，北面和东面都是隔着很宽的路，没有遮挡物，主卧是朝南。周边配置齐全，教育医疗交通都没问题。经纪人每平方米优惠了700元还送个家电，但是要先认筹，金额是10万，感觉还可以，心中打算买了。我说回家再考虑，如果想好了，明天早上过来交认筹金。<br>    <span id="more"></span><br>    回到家，跟家里人商量了，决定明天就把钱交了。入睡前，心中忐忑，觉得买房真的很累，选自己喜欢的不容易。想想房子以后是什么样子，适不适合我们住。<br>    周天一大早我就醒来了，决定去交认筹金，但是我突然想去另一个楼盘<code>融创临江府</code>看下，因为今年2月份的时候看过一次，当时还打算买那边的，因为资金不够。现在这个楼盘涨了。我看中它的原因是靠近江边，然后三面都有公园，环境很好，适合居住，教育交通资源也有。它的整体设计没有大华的好，但是阳台设计比大华的好点，又长又宽，客厅和主卧相通。去那边看了下样板房还有施工场地，算下价格，比大华便宜点。<br>    对比了大华和融创，我发现融创更适合我们，没多想，参加了他们的认筹活动，交了5万元。他们10点开盘，给参加了认筹活动的用户提供个小程序，到点抢自己喜欢的楼层。<br>    10点了，我的手机直接卡死，选择楼层的按钮根本点不动，我直接回退重新进去，发现好多楼层都抢光了，就第4层也有人抢，心中想这个不吉利的数字楼层应该没人要吧，我选择了第3层 <code>301</code>。<br>    计划买这个楼盘了，要准备 <code>身份证</code> -&gt; <code>户口本</code> -&gt; <code>结婚证</code> -&gt; <code>个人征信</code> -&gt; <code>近半年银行流水</code> -&gt; <code>收入证明</code> -&gt; <code>社保证明</code>。其实这些最好买房前准备。</p>
<ul>
<li><p>社保证明，我是武汉社保，打开<code>http://zwfw.hubei.gov.cn/index.html</code>，国家政府服务平台，区域选择 <code>武汉市</code>，其它不用选，之后选<code>特色服务</code>，选择 <code>（个人）武汉市社会保险公共服务平台</code>。我用的wifi一直进不去，切换手机热点，进去了 <code>http://221.232.64.242:7121/grws/jsp/framework/main.jsp</code>， <code>个人网上业务 -&gt; 社保证明查询打印 -&gt; 武汉市社会保险参保缴费证明（个人专用）查询打印</code>，用IE浏览器;</p>
</li>
<li><p> 近半年银行流水，携带本人二代居民身份证和银行卡到就近对应银行网点办理，待6个月流水账单打印完毕，必须要求盖银行业务公章流水账单才算生效，如果是招商银行的，手机APP可以支持打印；</p>
</li>
<li><p> 个人征信 <code>https://ipcrs.pbccrc.org.cn/</code> 用IE浏览器，如果是招商银行的，APP可以查看个人信用；</p>
</li>
<li><p>收入证明 去公司填电子流走流程审批。</p>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Home</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker run Apache</title>
    <url>/2021/04/14/Docker%20run%20Apache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下载镜像</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; docker pull httpd</span><br><span class="line">Using default <span class="keyword">ta</span><span class="variable">g:</span> latest</span><br><span class="line">lates<span class="variable">t:</span> Pulling from library/httpd</span><br><span class="line"><span class="number">75646</span>c2fb410: Pull <span class="built_in">complete</span></span><br><span class="line">a51c6e95ef2e: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">97251</span>e2deed4: Pull <span class="built_in">complete</span></span><br><span class="line"><span class="number">83942</span>ffdf87<span class="variable">a:</span> Pull <span class="built_in">complete</span></span><br><span class="line">fcf0f47f7ede: Pull <span class="built_in">complete</span></span><br><span class="line">Diges<span class="variable">t:</span> <span class="built_in">sha256</span>:<span class="number">31</span>ee85db3ebec898ae4e3e19ceb5c19ce622ea395d7e4844a13a8b1b141b62be</span><br><span class="line">Statu<span class="variable">s:</span> Downloaded newer image <span class="keyword">for</span> httpd:latest</span><br><span class="line">docker.io/library/httpd:latest</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>查看镜像</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">&gt; docker images</span><br><span class="line">REPOSITORY                         TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">httpd                              latest              d5995e280a0e       <span class="number"> 8 </span>days ago          138MB</span><br><span class="line">busybox                            latest              a9d583973f65       <span class="number"> 4 </span>weeks ago         1.23MB</span><br><span class="line">hello-world                        latest              d1165f221234       <span class="number"> 4 </span>weeks ago         13.3kB</span><br><span class="line">redis                              latest              bd571e6529f3       <span class="number"> 5 </span>months ago        104MB</span><br><span class="line">hub.c.163.com/lightingfire/nexus   2.13.0-01           95543f26ca31       <span class="number"> 4 </span>years ago         455MB</span><br></pre></td></tr></table></figure>
<p>运行容器，将C盘的<code>docker-data</code>文件 映射容器的 <code>/usr/local/apache2/htdocs/</code> 文件中</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&gt; docker run -it -d -p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> -v <span class="symbol">C:</span>/docker-data/<span class="symbol">:/usr/local/apache2/htdocs/</span> httpd</span><br><span class="line"><span class="number">796299</span>a44475b457c46e3a26b00aec389d2cdd669e0a1d525db79b70bd227903</span><br></pre></td></tr></table></figure>
<p>在本地<code>C:\docker-data</code> 新建<code> index.html</code>，打开<code> index.html</code>文件 编写 <code>hello world</code><br>查看容器<code>/usr/local/apache2/htdocs/</code> 文件，先进入容器，<code>ls</code> 查看文件，可以看到<code>index.html</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&gt; docker exec -it <span class="number">7962</span> bash</span><br><span class="line">root<span class="variable">@796299a44475</span><span class="symbol">:/usr/local/apache2</span><span class="comment"># ls</span></span><br><span class="line">bin  build  cgi-bin  conf  error  htdocs  icons  <span class="keyword">include</span>  logs  modules</span><br><span class="line">root<span class="variable">@796299a44475</span><span class="symbol">:/usr/local/apache2</span><span class="comment"># cd htdocs/</span></span><br><span class="line">root<span class="variable">@796299a44475</span><span class="symbol">:/usr/local/apache2/htdocs</span><span class="comment"># ls</span></span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <a href="http://localhost/">http://localhost:80</a> 查看结果</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2021/04/14/Docker/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://hub.docker.com/">docker 官方镜像</a><br><a href="https://c.163yun.com/hub#/home">网易云镜像</a></p>
<blockquote>
<p>基本命令</p>
</blockquote>
<p>搜索镜像 docker seach </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&gt; docker search <span class="keyword">busybox</span></span><br><span class="line"><span class="keyword">NAME </span>                     DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line"><span class="keyword">busybox </span>                  <span class="keyword">Busybox </span><span class="keyword">base </span>image.                             <span class="number">2168</span>                [OK]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注：BusyBox 将许多具有共性的小版本的UNIX工具结合到一个单一的可执行文件。这样的集合可以替代大部分常用工具比如的GNU fileutils ， shellutils等工具，BusyBox提供了一个比较完善的环境，可以适用于任何小的嵌入式系统</p>
<span id="more"></span>
<ul>
<li><strong>拉取镜像</strong> docker pull</li>
<li><strong>查看镜像</strong> docker images</li>
<li><strong>删除运行或停止的镜像</strong> docker rmi</li>
<li><strong>运行容器</strong> docker run </li>
<li><strong>查看运行中的容器</strong> docker ps 或者 docker container ls</li>
<li><strong>查看所有容器状态</strong> docker ps -a 或者 docker container ls -a<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">&gt; docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS                    NAMES</span><br><span class="line">dc8b9ba2efb6        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 7 </span>minutes ago       Created                                                tender_chatterjee</span><br><span class="line">cff3358881a2        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 20 </span>minutes ago      Exited (0)<span class="number"> 8 </span>minutes ago                               admiring_vaughan</span><br><span class="line">cc638be418cb        busybox             &quot;sh&quot;                    <span class="number"> 22 </span>minutes ago      Exited (127)<span class="number"> 20 </span>minutes ago                            trusting_yalow</span><br><span class="line">03cd134e1313        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 29 </span>minutes ago      Up<span class="number"> 29 </span>minutes                 0.0.0.0:6379-&gt;6379/tcp   competent_galois</span><br><span class="line">950da22b6340        95543f26ca31        &quot;/bin/sh -c &#x27;$&#123;JAVA_…&quot;  <span class="number"> 2 </span>days ago          Exited (143)<span class="number"> 2 </span>days ago                                nexus</span><br><span class="line">1c648c6719db        redis               &quot;docker-entrypoint.s…&quot;  <span class="number"> 5 </span>months ago        Exited (0)<span class="number"> 5 </span>months ago                                redis</span><br></pre></td></tr></table></figure></li>
<li><strong>停止容器</strong> docker stop</li>
<li><strong>快速停止容器</strong> docker kill</li>
<li><strong>启动容器</strong> docker start</li>
<li><strong>重启容器</strong> docker restart</li>
<li><strong>暂停容器，容器不占CPU</strong>  docker pause</li>
<li><strong>暂停恢复</strong> docker unpause</li>
<li><strong>删除容器</strong> docker rm 容器短ID1，容器短ID2，可以删除多个</li>
<li><strong>批量删除所有已经退出的容器</strong> <code>docker rm -v $(docker ps -ap -f status=exited)</code></li>
</ul>
<blockquote>
<p>运行容器参数  docker run -d -p 80:8080</p>
</blockquote>
<ul>
<li>-d 后台方式启动容器</li>
<li>-p 80:8080 端口映射</li>
<li>–name 容器命名</li>
<li>–restart 因错误停止或者正常退出将自动重启，docker stop 或者 docker kill 的退出不会自动重启</li>
<li>–restart=always 无论何种原因退出立即重启</li>
<li>–restart=on-failure:3 重启3次</li>
</ul>
<blockquote>
<p>进入/退出 容器</p>
</blockquote>
<ul>
<li>attach 直接进入容器启动命令的终端，不会启动新的进程</li>
<li>exec 在容器中打开新的终端，并且启动新的进程</li>
<li>exit 退出</li>
<li>run -it 容器启动后直接进入<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&gt; docker run -d -it -p <span class="number">6379</span>:<span class="number">6379</span>  redis</span><br><span class="line"><span class="number">03</span>cd134e1313edad3304154282262daa6839bc7bc6f1bed51f3404b09eca3580</span><br><span class="line">docker exec -it <span class="number">03</span>cd bash</span><br><span class="line">root@<span class="number">03</span>cd134e1313:/<span class="comment">#</span></span><br><span class="line">&gt; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">&gt; docker run -it redis</span><br><span class="line"><span class="number">1</span>:C <span class="number">07</span> Apr <span class="number">2021</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">07.859</span> # oO0OoO0OoO0Oo Redis <span class="built_in">is</span> starting oO0OoO0OoO0Oo</span><br><span class="line"><span class="number">1</span>:C <span class="number">07</span> Apr <span class="number">2021</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">07.859</span> # Redis version=<span class="number">6.0</span><span class="number">.8</span>, bits=<span class="number">64</span>, commit=<span class="number">00000000</span>, modified=<span class="number">0</span>, pid=<span class="number">1</span>, just started</span><br><span class="line"><span class="number">1</span>:C <span class="number">07</span> Apr <span class="number">2021</span> <span class="number">13</span>:<span class="number">49</span>:<span class="number">07.859</span> # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">                <span class="symbol">_</span>.<span class="symbol">_</span></span><br><span class="line">           <span class="symbol">_</span>.-``<span class="symbol">__</span> &#x27;&#x27;-.<span class="symbol">_</span></span><br><span class="line">      <span class="symbol">_</span>.-``    `.  `<span class="symbol">_</span>.  &#x27;&#x27;-.<span class="symbol">_</span>           Redis <span class="number">6.0</span><span class="number">.8</span> (<span class="number">00000000</span>/<span class="number">0</span>) <span class="number">64</span> bit</span><br><span class="line">  .-`` .-```.  ```\/    <span class="symbol">_</span>.,<span class="symbol">_</span> &#x27;&#x27;-.<span class="symbol">_</span></span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running <span class="keyword">in</span> standalone mode</span><br><span class="line"> |`-.<span class="symbol">_</span>`-...-` <span class="symbol">__</span>...-.``-.<span class="symbol">_</span>|&#x27;` <span class="symbol">_</span>.-&#x27;|     Port: <span class="number">6379</span></span><br><span class="line"> |    `-.<span class="symbol">_</span>   `.<span class="symbol">_</span>    /     <span class="symbol">_</span>.-&#x27;    |     PID: <span class="number">1</span></span><br><span class="line">  `-.<span class="symbol">_</span>    `-.<span class="symbol">_</span>  `-./  <span class="symbol">_</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line"> |`-.<span class="symbol">_</span>`-.<span class="symbol">_</span>    `-.<span class="symbol">__</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;|</span><br><span class="line"> |    `-.<span class="symbol">_</span>`-.<span class="symbol">_</span>        <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    |           http://redis.io</span><br><span class="line">  `-.<span class="symbol">_</span>    `-.<span class="symbol">_</span>`-.<span class="symbol">__</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line"> |`-.<span class="symbol">_</span>`-.<span class="symbol">_</span>    `-.<span class="symbol">__</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;|</span><br><span class="line"> |    `-.<span class="symbol">_</span>`-.<span class="symbol">_</span>        <span class="symbol">_</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    |</span><br><span class="line">  `-.<span class="symbol">_</span>    `-.<span class="symbol">_</span>`-.<span class="symbol">__</span>.-&#x27;<span class="symbol">_</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line">      `-.<span class="symbol">_</span>    `-.<span class="symbol">__</span>.-&#x27;    <span class="symbol">_</span>.-&#x27;</span><br><span class="line">          `-.<span class="symbol">_</span>        <span class="symbol">_</span>.-&#x27;</span><br><span class="line">              `-.<span class="symbol">__</span>.-&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache Line</title>
    <url>/2021/04/14/Cache-Line/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>缓存行 <code>Cache Line</code>  <code>CPU</code> 高速缓存中分配的最小存储单位。<code>CPU</code> 缓存分为 <code>Cache L1 L2 L3</code> 一级 二级 三级 缓存，查看本机缓存<br><code>pom.xml</code> 引入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">    <span class="section">&lt;groupId&gt;</span><span class="attribute">fr</span>.ujm.tse.lt<span class="number">2</span>c.satin&lt;/groupId&gt;</span><br><span class="line">    <span class="section">&lt;artifactId&gt;</span><span class="attribute">cachesize</span>&lt;/artifactId&gt;</span><br><span class="line">    <span class="section">&lt;version&gt;</span><span class="attribute">0</span>.<span class="number">2</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
<p>不同处理器的缓存行 <code>L1 L2 L3</code> 高速缓存行字节宽不一样 有 <code>32</code> 字节和 <code>64</code> 字节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CacheInfo info = CacheInfo.getInstance();</span><br><span class="line">CacheLevelInfo cacheLevelInfo = info.getCacheInformation(CacheLevel.L1, CacheType.INSTRUCTION_CACHE);</span><br><span class="line">System.out.println(<span class="string">&quot;L1 Cache info:&quot;</span> + cacheLevelInfo.toString());</span><br></pre></td></tr></table></figure>
<p>缓存行在内存中加载的地址是连续的 假如缓存行是 <code>64</code> 字节 有两个变量 <code>a</code> 和 <code>b</code> ，<code>a</code> + <code>b</code> 不足 64 字节，那么会在同一个缓存行造成伪共享，处理器修改 <code>a</code> 的时候，其他处理器读取 <code>b</code> 的时候该缓存行是失效的( <code>MESI</code> 协议)，其他处理器不得不重新从系统内存中加载。</p>
<span id="more"></span>
<p>处理伪共享 可以采取 <code>padding</code> 方式 ，当字节不足缓存行大小时进行填满  和 <code>Java8</code> 的 <code>@sum.misc.Contended</code> 使两个变量 在不同缓存行中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span> </span>&#123;</span><br><span class="line">     <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">     CounterCell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><code>ConcurrentHashMap</code> 的 <code>CounterCell</code> 上加了 <code>@Contended</code> 注解  解决了 <code>++</code> 操作产生伪共享</p>
<p>看下 <code>padding</code> 实现 , 使 <code>long</code> 变量进行填充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleProducerSequencerPad</span> <span class="keyword">extends</span> <span class="title">RingBufferProducer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// 4*7 = 28 字节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleProducerSequencerFields</span> <span class="keyword">extends</span> <span class="title">SingleProducerSequencerPad</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Set to -1 as sequence starting point */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> nextValue = RingBuffer.Sequence.INITIAL_VALUE; <span class="comment">// 28 + 4 = 32 字节</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> cachedValue = RingBuffer.Sequence.INITIAL_VALUE; <span class="comment">// 32 + 4 = 36 字节</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleProducerSequencer</span> <span class="keyword">extends</span> <span class="title">SingleProducerSequencerFields</span> </span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7; <span class="comment">// 36 + 28 = 64 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>volatile</code>  也会使处理器缓存回写到内存并且导致其他内存缓存无效，在 <code>64</code> 字节宽的处理器  早期<code>JDK</code>版本采取了追加字节的方式来进行性能优化</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Janor</title>
    <url>/2021/04/17/Jalor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Janor</code> 某公司内部框架，简单介绍下我项目中的流程<br>开始 -&gt; <code>TomCat</code> 请求接入 -&gt; 上下文构建 -&gt; 认证（JWT认证/SSO认证 -&gt; 初始化用户）-&gt; CXF -&gt; 鉴权 -&gt; 业务处理 </p>
<ul>
<li>业务处理 -&gt; <code>Mapper</code> 执行 -&gt; SQL 查询更新</li>
<li>业务处理 -&gt; 负载均衡 -&gt; <code>JWT Token</code> -&gt; 远程调用<span id="more"></span></li>
</ul>
<p>1.<code>tomcat</code> 请求接入，查看 <code>StandardEngineValve</code> 类 的 <code>invoke</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Request request, Response response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Select the Host to be used for this Request</span></span><br><span class="line">    Host host = request.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// HTTP 0.9 or HTTP 1.0 request without a host when no default host</span></span><br><span class="line">        <span class="comment">// is defined. This is handled by the CoyoteAdapter.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ask this Host to process this request</span></span><br><span class="line">    host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.上下文构建 <code>RequestContextFilter</code>，<code>Janor</code>的实现不一样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestContextFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否向子线程传播 LocaleContext 和 RequestAttributes,缺省为false，不传播</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> threadContextInheritable = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置是否向子线程传播 LocaleContext 和 RequestAttributes</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setThreadContextInheritable</span><span class="params">(<span class="keyword">boolean</span> threadContextInheritable)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.threadContextInheritable = threadContextInheritable;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回 false， 表示对异步派发线程也建立request context</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldNotFilterAsyncDispatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回 false， 表示对error派发也建立request context</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldNotFilterErrorDispatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 封装当前请求/响应对象到一个 ServletRequestAttributes</span></span><br><span class="line">		ServletRequestAttributes attributes = <span class="keyword">new</span> ServletRequestAttributes(request, response);</span><br><span class="line">       <span class="comment">// 将封装了的 ServletRequestAttributes 对象 attributes，当前请求的 locale 分别记录到对应当前线程的</span></span><br><span class="line">       <span class="comment">// RequestContextHolder 和 LocaleContextHolder</span></span><br><span class="line">		initContextHolders(request, attributes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面的逻辑为当前请求的处理在当前线程中做了locale和请求/响应对象的记录，下面继续执行</span></span><br><span class="line">        <span class="comment">// 过滤器链</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			filterChain.doFilter(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// 请求处理完成，再次返回到该过滤器，此时要清除当前线程中记录的locale和请求/响应对象</span></span><br><span class="line">           <span class="comment">// 信息，因为当前线程可能被放回线程池供处理其他请求使用</span></span><br><span class="line">			resetContextHolders();</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">&quot;Cleared thread-bound request context: &quot;</span> + request);</span><br><span class="line">			&#125;</span><br><span class="line">			attributes.requestCompleted();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将封装了的 ServletRequestAttributes 对象 attributes，当前请求的 locale 分别记录到对应当前线程的</span></span><br><span class="line">    <span class="comment">// RequestContextHolder 和 LocaleContextHolder</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initContextHolders</span><span class="params">(HttpServletRequest request, ServletRequestAttributes requestAttributes)</span> </span>&#123;</span><br><span class="line">		LocaleContextHolder.setLocale(request.getLocale(), <span class="keyword">this</span>.threadContextInheritable);</span><br><span class="line">		RequestContextHolder.setRequestAttributes(requestAttributes, <span class="keyword">this</span>.threadContextInheritable);</span><br><span class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">			logger.trace(<span class="string">&quot;Bound request context to thread: &quot;</span> + request);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除当前线程中记录的locale和请求/响应对象</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetContextHolders</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">		LocaleContextHolder.resetLocaleContext();</span><br><span class="line">		RequestContextHolder.resetRequestAttributes();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.<code>JWT</code> 认证 ，查看<code>Janor</code>框架的<code>JwtpequestFilter</code><br>4.<code>SSO</code> 认证 ，查看<code>Janor</code>框架的<code>SsoFilterPub</code><br>5.初始化用户，<code>LoginService</code> 与 <code>security</code> 模块集成，<code>LoginService</code> 继承<br><code>ILoginService</code></p>
<ul>
<li>初始化用户会话</li>
<li>重新初始化用户会话</li>
<li>清除用户信息等</li>
</ul>
<p>6.<code>CXF</code> ，查看<code>Janor</code>框架的<code>ServletController</code> 类的 <code>invoke</code> 方法<br>7.鉴权 ，查看<code>Janor</code>框架的<code>securityInterceptor</code> 类的 <code>invoke</code> 方法</p>
<ul>
<li>获取<code>JanorOpration</code>注解</li>
<li>创建安全上下文</li>
<li>执行授权检查（角色，权限点）</li>
<li>执行业务方法</li>
</ul>
<p>8.<code>Mapper</code> 执行，查看 <code>MapperMethod</code> 类 和 了解 <code>MapperFactoryBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line">  <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">    Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">    result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">case</span> SELECT:</span><br><span class="line">    <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">      executeWithResultHandler(sqlSession, args);</span><br><span class="line">      result = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">      result = executeForMany(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">      result = executeForMap(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">      result = executeForCursor(sqlSession, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">      <span class="keyword">if</span> (method.returnsOptional()</span><br><span class="line">          &amp;&amp; (result == <span class="keyword">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">        result = Optional.ofNullable(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> FLUSH:</span><br><span class="line">    result = sqlSession.flushStatements();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Unknown execution method for: &quot;</span> + command.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>9.SQL查询 SQL更新 查看 <code>SimpleExecutor</code> 类 的 <code>doUpdate</code> 和 <code>doQuery</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Configuration configuration = ms.getConfiguration();</span><br><span class="line">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">    <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  Connection connection = getConnection(statementLog);</span><br><span class="line">  stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">  handler.parameterize(stmt);</span><br><span class="line">  <span class="keyword">return</span> stmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>10.带容错功能的负载均衡，查看 <code>Janor</code>框架的 <code>AbstractLoadBalancerHandler</code> 类 的 <code>handler</code> 方法<br>11.<code>JWT</code> 安全客户端实现 查看 <code>Janor</code>框架的 <code>JwtSecurityConsumerComponent</code> 类<br>12.远程调用 查看 <code>Janor</code>框架的 <code>RestTemplateClientprotocal</code> 类，继承了 <code>Iprotocol</code> 接口 (协议组件名称，协议调用)</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Janor</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 撤销</title>
    <url>/2021/05/08/Git-%E6%92%A4%E9%94%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="清除没有执行过-git-add-的文件"><a href="#清除没有执行过-git-add-的文件" class="headerlink" title="清除没有执行过 git add 的文件"></a>清除没有执行过 git add 的文件</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">生成一个文件: <span class="built_in">echo</span> <span class="string">&#x27;test&#x27;</span> &gt; <span class="number">1</span>.<span class="built_in">log</span> </span><br><span class="line">清除: git clean -fdx </span><br><span class="line">Removing <span class="number">1</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h3 id="已被git-add暂存，但未执行git-commit提交，取消暂存"><a href="#已被git-add暂存，但未执行git-commit提交，取消暂存" class="headerlink" title="已被git add暂存，但未执行git commit提交，取消暂存"></a>已被git add暂存，但未执行git commit提交，取消暂存</h3><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">查看状态: git <span class="keyword">status</span></span><br><span class="line">添加 <span class="number">1.</span><span class="built_in">log</span> : git add <span class="number">1.</span><span class="built_in">log</span></span><br><span class="line">执行命令：git rm --cached -r <span class="number">1.</span><span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h3 id="已被git-add暂存，未执行git-commit提交，取消所有文件的暂存"><a href="#已被git-add暂存，未执行git-commit提交，取消所有文件的暂存" class="headerlink" title="已被git add暂存，未执行git commit提交，取消所有文件的暂存"></a>已被git add暂存，未执行git commit提交，取消所有文件的暂存</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git reset</span></span><br></pre></td></tr></table></figure>
<h3 id="未暂存，未执行git-commit提交，撤销修改"><a href="#未暂存，未执行git-commit提交，撤销修改" class="headerlink" title="未暂存，未执行git commit提交，撤销修改"></a>未暂存，未执行git commit提交，撤销修改</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git checkout <span class="number">1</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h3 id="已暂存，未执行git-commit提交，撤销修改及暂存"><a href="#已暂存，未执行git-commit提交，撤销修改及暂存" class="headerlink" title="已暂存，未执行git commit提交，撤销修改及暂存"></a>已暂存，未执行git commit提交，撤销修改及暂存</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">reset</span> <span class="number">1.</span><span class="built_in">log</span> 或者 git rm --cached -r <span class="number">1.</span><span class="built_in">log</span></span><br><span class="line">git checkout <span class="number">1.</span><span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h3 id="已经-git-commit，撤销commit，不撤销git-add，不删除改动的代码"><a href="#已经-git-commit，撤销commit，不撤销git-add，不删除改动的代码" class="headerlink" title="已经 git commit，撤销commit，不撤销git add，不删除改动的代码"></a>已经 git commit，撤销commit，不撤销git add，不删除改动的代码</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HEAD</span>~<span class="number">1</span>表示上一次提交 HEAD~<span class="number">2</span> 表示两次提交前</span><br><span class="line"><span class="attribute">git</span> reset --soft HEAD~<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="已经-git-commit，撤销commit，撤销git-add，删除改动的代码"><a href="#已经-git-commit，撤销commit，撤销git-add，删除改动的代码" class="headerlink" title="已经 git commit，撤销commit，撤销git add，删除改动的代码"></a>已经 git commit，撤销commit，撤销git add，删除改动的代码</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HEAD</span>~<span class="number">1</span>表示上一次提交 HEAD~<span class="number">2</span> 表示两次提交前</span><br><span class="line"><span class="attribute">git</span> reset --hard HEAD~<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>HEAD~1</code> 可以改成提交的<code>ID(sha1 hash值)</code>，<code>ID</code>也可以简写</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> log --pretty=oneline</span><br><span class="line"><span class="attribute">ff4a1ea8ea206bcef41bc2ea8818470497af46c5</span> (HEAD -&gt; master) 第一次提交</span><br><span class="line"><span class="attribute">git</span> reset --hard ff<span class="number">4</span>a<span class="number">1</span>ea<span class="number">8</span>ea<span class="number">206</span>bcef<span class="number">41</span>bc<span class="number">2</span>ea<span class="number">8818470497</span>af<span class="number">46</span>c<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">git</span> log --pretty=format:<span class="string">&quot;哈希值：%h 作者： %an, 时间：%ar : 备注：%s&quot;</span></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8</title>
    <url>/2021/04/14/Java8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下面举个例子 <code>Java8</code> 新语法实现思路的多种解法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/<span class="strong">**</span></span><br><span class="line"><span class="strong"> <span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> 1. 计数</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Collectors.counting</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> count</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 2. 最值</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.maxBy</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 3. 求和</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.summingInt</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 4. 求平均值</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.averagingInt</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 5. 连接字符串</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.joining</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 6. 一般归约</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.reducing</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 7. 转换</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.toCollection / Collectors.collectingAndThen</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 8. 数值流</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> IntStream、DoubleStream、LongStream</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* 9. 映射</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> Collectors.toMap</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Function.identity()</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> 10. 数据分区</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Collectors.partitioningBy</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> *</span> 11. 分组</span></span><br><span class="line"><span class="strong"> <span class="emphasis">* Collectors.groupingBy</span></span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Java8</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;People&gt; <span class="keyword">list</span> = Lists.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">1</span>L, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">30</span>, <span class="number">12</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">2</span>L, <span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">30</span>, <span class="number">10</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">3</span>L, <span class="string">&quot;刘亦菲&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">20</span>, <span class="number">15</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">4</span>L, <span class="string">&quot;蔡依林&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>, <span class="number">18</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">5</span>L, <span class="string">&quot;张杰&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">30</span>, <span class="number">20</span>),</span><br><span class="line">            <span class="keyword">new</span> People(<span class="number">6</span>L, <span class="string">&quot;薛之谦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">28</span>, <span class="number">30</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求集合薪资总和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    public <span class="literal">void</span> example1() &#123;</span><br><span class="line">        <span class="keyword">list</span>.stream<span class="function"><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">reduce</span><span class="params">((s1, s2) -&gt; s1 + s2)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Optional</span>&lt;<span class="title">Double</span>&gt; <span class="title">opDouble</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">collect</span><span class="params">(Collectors.reducing((s1, s2) -&gt; s1 + s2))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">opDouble</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Number</span> <span class="title">number</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.reducing(<span class="number">0</span>,People::getSalary,(s1,s2) -&gt; s1.doubleValue() + s2.doubleValue()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(number.doubleValue())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summingDouble(People::getSalary)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summarizingDouble(People::getSalary)).getSum())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().mapToDouble(People::getSalary).sum())</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 求集合薪资最大 <span class="params">(最小)</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example2</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.maxBy(Comparator.comparing(People::getSalary)))</span>.<span class="title">ifPresent</span><span class="params">(people -&gt; System.out.println(people.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">reduce</span><span class="params">(BinaryOperator.maxBy(Double::compareTo))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">minBy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">reduce</span><span class="params">((s1,s2) -&gt; s1 &gt; s2 ? s1 : s2)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // &lt;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getSalary).reduce(<span class="number">0d</span>,Double::max))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Optional</span>&lt;<span class="title">People</span>&gt;&gt; <span class="title">mapOp</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.reducing((p1,p2) -&gt; p1.getSalary() &gt; p2.getSalary() ? p1 : p2)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">mapOp</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">ifPresent</span><span class="params">(people -&gt; System.out.println(people.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">collect</span><span class="params">(Collectors.reducing((s1,s2) -&gt; s1 &gt; s2 ? s1 : s2))</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">max</span><span class="params">(Comparator.comparing(People::getSalary,Double::compare))</span>.<span class="title">ifPresent</span><span class="params">(p -&gt; System.out.println(p.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">max</span><span class="params">(Comparator.comparing(People::getSalary))</span>.<span class="title">ifPresent</span><span class="params">(p -&gt; System.out.println(p.getSalary()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">max</span><span class="params">(Double::compareTo)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">min</span></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summarizingDouble(People::getSalary)).getMax())</span>; //<span class="title">getMin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.comparing(People::getSalary).reversed())</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">reversed</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">sorted</span><span class="params">(Comparator.reverseOrder())</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>; // <span class="title">Comparator</span>.<span class="title">naturalOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">sorted</span><span class="params">(Comparator.comparingDouble(Double::doubleValue).reversed())</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">List</span>&lt;<span class="title">Double</span>&gt; <span class="title">doubles</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">(Objects::nonNull)</span>.<span class="title">map</span><span class="params">(People::getSalary)</span>.<span class="title">collect</span><span class="params">(Collectors.toList())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Collections</span>.<span class="title">sort</span><span class="params">(doubles, Double::compareTo)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(doubles.get(doubles.size() - <span class="number">1</span>))</span>; // <span class="title">get</span><span class="params">(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">Collections</span>.<span class="title">reverse</span><span class="params">(doubles)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">doubles</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">findFirst</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">People</span>&gt; <span class="title">map</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.comparing(People::getSalary, Double::compareTo))</span></span></span><br><span class="line"><span class="function">                .<span class="title">collect</span><span class="params">(Collectors.toMap(People::getSex, <span class="built_in">Function</span>.identity(), (p1, p2) -&gt; p2))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">double</span> <span class="title">d</span> = <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span> &gt;  <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;女&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span> ? <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span> : <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;女&quot;</span>)</span>.<span class="title">getSalary</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(d)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">mapToDouble</span><span class="params">(People::getSalary)</span>.<span class="title">max</span><span class="params">()</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().mapToDouble(People::getSalary).max().getAsDouble())</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Optional</span>&lt;<span class="title">Integer</span>&gt;&gt; <span class="title">collect</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.mapping(People::getAge, Collectors.maxBy(Comparator.comparing(<span class="built_in">Function</span>.identity())))))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">collect</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">ifPresent</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 男生数量 女生数量</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example3</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.counting()))</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).count())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).collect(Collectors.counting()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).collect(Collectors.reducing(<span class="number">0</span>L, e -&gt; <span class="number">1</span>L, Long::sum)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().filter(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>)).collect(Collectors.toList()).size())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;男:&quot;</span> + <span class="keyword">list</span>.stream().collect(Collectors.groupingBy(People::getSex)).get(<span class="string">&quot;男&quot;</span>).size())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">long</span> <span class="title">count</span>= <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.collectingAndThen(Collectors.groupingBy(People::getSex),<span class="keyword">map</span> -&gt; <span class="keyword">map</span>.get(<span class="string">&quot;男&quot;</span>).stream().count()))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(count)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 平均</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example4</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">double</span> <span class="title">avg</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.averagingDouble(People::getSalary))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(avg)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(Collectors.summarizingDouble(People::getSalary)).getAverage())</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getSalary).reduce((s1,s2) -&gt; s1 + s2).flatMap(sum -&gt; Optional.<span class="keyword">of</span>(sum / <span class="keyword">list</span>.size())).get())</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 排序处理<span class="title">null</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example5</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">add</span><span class="params">(<span class="literal">null</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">sort</span><span class="params">(Comparator.nullsFirst(Comparator.comparing(People::getSalary)))</span>; // <span class="title">null</span> 数据排前面</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">sort</span><span class="params">(Comparator.nullsLast(Comparator.comparing(People::getSalary)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">CopyOnWriteArrayList</span> <span class="title">list2</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.nullsLast(Comparator.comparing(People::getSalary)))</span>.<span class="title">collect</span><span class="params">(Collectors.toCollection(CopyOnWriteArrayList::<span class="keyword">new</span>))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list2</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Collections</span>.<span class="title">sort</span><span class="params">(<span class="keyword">list</span>,Comparator.nullsFirst(Comparator.comparing(People::getSalary)))</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 分组</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example6</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">Boolean</span>, <span class="title">Map</span>&lt;<span class="title">Integer</span>, <span class="title">List</span>&lt;<span class="title">People</span>&gt;&gt;&gt; <span class="title">map</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.partitioningBy(p -&gt; p.getSex().equals(<span class="string">&quot;男&quot;</span>), Collectors.groupingBy(People::getAge)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="literal">true</span>)</span>.<span class="title">get</span><span class="params">(<span class="number">30</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 30岁男生集合</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">get</span><span class="params">(<span class="literal">false</span>)</span>.<span class="title">get</span><span class="params">(<span class="number">20</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 20岁女生集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>, <span class="title">Map</span>&lt;<span class="title">Integer</span>, <span class="title">List</span>&lt;<span class="title">People</span>&gt;&gt;&gt; <span class="title">map1</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.groupingBy(People::getSex, Collectors.groupingBy(People::getAge)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map1</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">get</span><span class="params">(<span class="number">30</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 30岁男生集合</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">People</span>&gt; <span class="title">map2</span> =</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.collectingAndThen(Collectors.maxBy(Comparator.comparing(People::getSalary)),Optional::get)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(map2.get(<span class="string">&quot;男&quot;</span>))</span>; // 按照性别筛选工资最高的男生</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 按照性别筛选工资最高的男生</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().sorted(Comparator.comparing(People::getSalary)).collect(Collectors.toMap(People::getSex,<span class="built_in">Function</span>.identity(),(p1,p2) -&gt; p2)).get(<span class="string">&quot;男&quot;</span>))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Set</span>&lt;<span class="title">Integer</span>&gt;&gt; <span class="title">map3</span> =</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getSex,Collectors.mapping(People::getAge,Collectors.toSet())))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map3</span>.<span class="title">get</span><span class="params">(<span class="string">&quot;男&quot;</span>)</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 按照性别筛选有哪些年龄</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">(people -&gt; people.getSex().equals(<span class="string">&quot;男&quot;</span>))</span>.<span class="title">map</span><span class="params">(People::getAge)</span>.<span class="title">collect</span><span class="params">(Collectors.toSet())</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>; // 按照性别筛选有哪些年龄</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 按照年龄筛选分别对应有哪些人</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.toMap(People::getAge,People::getName,<span class="built_in">String</span>::concat))</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.toMap(People::getAge,People::getName,(name1,name2) -&gt; name1 + <span class="string">&quot;,&quot;</span> + name2))</span>.<span class="title">forEach</span><span class="params">((k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Map</span>&lt;<span class="title">Integer</span>,<span class="title">String</span>&gt; <span class="title">map4</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(People::getAge,</span></span></span><br><span class="line"><span class="function"><span class="params">                Collectors.reducing(<span class="string">&quot;&quot;</span>,People::getName,(name1, name2) -&gt; name1.length() == <span class="number">0</span> ? name2 : name1 + <span class="string">&quot;,&quot;</span> + name2)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(map4.get(<span class="number">30</span>))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        // 集合名字最长</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(p -&gt; p.getName().length()).reduce(<span class="number">0</span>,Integer::max))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getName)</span>.<span class="title">collect</span><span class="params">(Collectors.groupingBy(<span class="built_in">String</span>::length,Collectors.counting()))</span>.<span class="title">forEach</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                (k,v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v)</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span>; // 根据名字长度分组</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * <span class="title">flatMap</span><span class="params">(Optional/Stream)</span></span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example7</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getName)</span>.<span class="title">flatMap</span><span class="params">(str -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            List&lt;<span class="built_in">String</span>&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="built_in">String</span> temp = <span class="built_in">String</span>.valueOf(str.charAt(i));</span></span></span><br><span class="line"><span class="function"><span class="params">                stringList.add(temp);</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">return</span> stringList.stream();</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;)</span>.<span class="title">distinct</span><span class="params">()</span>.<span class="title">collect</span><span class="params">(Collectors.toList())</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">double</span> <span class="title">d</span> = <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">(people -&gt; people.getName().equals(<span class="string">&quot;张杰&quot;</span>))</span>.<span class="title">mapToDouble</span><span class="params">(People::getSalary)</span>.<span class="title">sum</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(Optional.ofNullable(d).flatMap(e -&gt; Optional.<span class="keyword">of</span>(e + <span class="number">5</span>)).flatMap(e -&gt; Optional.<span class="keyword">of</span>(e - <span class="number">2</span>)).get())</span>; // 张杰的薪资涨5后又减2</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    /**</span></span><br><span class="line"><span class="function">     * 字符串处理</span></span><br><span class="line"><span class="function">     */</span></span><br><span class="line"><span class="function">    @<span class="title">Test</span></span></span><br><span class="line"><span class="function">    <span class="title">public</span> <span class="title">void</span> <span class="title">example8</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="function">       // <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">sorted</span><span class="params">(Comparator.comparing(People::getAge).reversed().thenComparing(People::getSalary))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;(&quot;</span>,<span class="string">&quot;)&quot;</span>)))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Collector</span>&lt;<span class="title">People</span>,<span class="title">StringJoiner</span>,<span class="title">String</span>&gt; <span class="title">collector</span> = <span class="title">Collector</span>.<span class="title">of</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                () -&gt; <span class="keyword">new</span> StringJoiner(<span class="string">&quot;,&quot;</span>),</span></span></span><br><span class="line"><span class="function"><span class="params">                (stringJoiner,people) -&gt; stringJoiner.add(people.getName()),</span></span></span><br><span class="line"><span class="function"><span class="params">                StringJoiner::merge,</span></span></span><br><span class="line"><span class="function"><span class="params">                StringJoiner::toString</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().collect(collector))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">StringJoiner</span> <span class="title">field</span> = <span class="title">new</span> <span class="title">StringJoiner</span><span class="params">(<span class="string">&quot;,&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">list</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(People::getName)</span>.<span class="title">forEach</span><span class="params">(field::add)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(field.toString())</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="keyword">list</span>.stream().<span class="keyword">map</span>(People::getName).reduce((name1,name2) -&gt; name1.concat(<span class="string">&quot;,&quot;</span>).concat(name2)).orElse(<span class="string">&quot;&quot;</span>))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>List-String-Map</title>
    <url>/2021/04/24/List-String-Map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>日常工作中经常和 集合、数组、Map、字符串互相转换 打交道，这里记录一些  <a href="https://github.com/google/guava/wiki">Guava</a> 的用法。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1331819951&auto=1&height=66"></iframe>

<span id="more"></span>
<p>使用 <code>StringBuilder</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * listToStringByStringBuilder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分隔的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delimiter 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToStringByStringBuilder</span><span class="params">(List&lt;String&gt; list, String delimiter)</span> </span>&#123;</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    list.forEach(element -&gt; stringBuilder.append(element).append(delimiter));</span><br><span class="line">    stringBuilder.delete(stringBuilder.length()- delimiter.length(),stringBuilder.length()); <span class="comment">// delete(start, end);</span></span><br><span class="line">    <span class="keyword">return</span>  stringBuilder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Collectors.joining</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * listToStringByCollectorsJoining</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list 分隔的集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delimiter 分隔符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 前缀符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> suffix 后缀符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToStringByCollectorsJoining</span><span class="params">(List&lt;String&gt; list, String delimiter, String prefix, String suffix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.stream().collect(Collectors.joining(delimiter, prefix, suffix ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>StringJoiner</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * listToStringByStringJoiner</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> list 分隔的集合</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> prefix 前缀符号</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> suffix 后缀符号</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToStringByStringJoiner</span><span class="params">(List&lt;String&gt; list, String separator, String prefix, String suffix)</span> </span>&#123;</span><br><span class="line">     StringJoiner stringJoiner = <span class="keyword">new</span> StringJoiner(separator,prefix,suffix);</span><br><span class="line">     list.forEach(element -&gt; stringJoiner.add(element));</span><br><span class="line">     <span class="keyword">return</span>  stringJoiner.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>Joiner</code> ， <code>String.join()</code> 方法 也可以对集合或者数组进行分隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * arrayToString</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parts 分隔的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> skipNull 是否跳过NULL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> useForNull 是否替换NULL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nullText 替换NULL的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(Object[] parts,String separator,<span class="keyword">boolean</span> skipNull,<span class="keyword">boolean</span> useForNull,String nullText)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (skipNull) &#123;</span><br><span class="line">        <span class="keyword">return</span> Joiner.on(separator).skipNulls().join(parts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (useForNull) &#123;</span><br><span class="line">        <span class="keyword">return</span> Joiner.on(separator).useForNull(nullText).join(parts);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Joiner.on(separator).join(parts); <span class="comment">//   String.join() 也可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>keyValueSeparator</code> 为 <code>map</code> 中 <code>key</code> 和 <code>value</code> 的分隔符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mapToString</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 分隔的map</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyValueSeparator 键值对分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mapToString</span><span class="params">(Map map, String separator, String keyValueSeparator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Joiner.on(separator).withKeyValueSeparator(keyValueSeparator).join(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>aabbcc</code> ，按照长度为2，会分隔元素为 <code>[aa] [bb] [cc]</code> 的集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * stringToFixedLengthList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串 String 实现 CharSequence 接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 分隔的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt; 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">stringToFixedLengthList</span><span class="params">(CharSequence sequence, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    Iterable&lt;String&gt; iterable =  Splitter.fixedLength(length).split(sequence);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;String&gt; iterator = iterable.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">        list.add(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串转集合，方法有很多种。这里举两个，说明： <code>trimResults()</code> 去掉元素左右空字符串，<code>omitEmptyStrings</code> 去掉分隔符号之间的空元素。举个例子：<br><code>&quot; k ;;p&quot;</code> ，<code>trimResults</code>之后得到 <code>[k] [空] [p]</code> 三个元素，加上 <code>omitEmptyStrings </code> 会去除空元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * stringSplitToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt; 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">stringSplitToList</span><span class="params">(String separator,CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    Iterable&lt;String&gt; iterable = Splitter.on(separator).trimResults().omitEmptyStrings().split(sequence);</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Iterator&lt;String&gt; iterator = iterable.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        list.add(iterator.next());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Splitter.on(separator).trimResults().omitEmptyStrings().splitToList(sequence);</span><br><span class="line">    <span class="comment">// return list;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 <code>java8</code> 新特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">StringToList</span><span class="params">(String separator, String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(str.split(separator)).filter(e -&gt; !e.isEmpty()).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// return Splitter.on(separator).trimResults().splitToList(str);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>a,b,c,d,e,f,g</code> 限制长度为3，得到集合元素为 <code>[a] [b] [c,d,e,f,g]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * limitSplitToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分割符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> length 限制长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt; 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">limitSplitToList</span><span class="params">(String separator, <span class="keyword">int</span> length, CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Splitter.on(separator).limit(length).splitToList(sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>a,b:c,d;e</code> 有不同分隔符， 逗号、 冒号、 分号等，利用正则表达式 <code>[,|:|;]</code> 分隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * multiLimitSplitToList</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separatorPattern 多个分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;String&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">multiLimitSplitToList</span><span class="params">(String separatorPattern, CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Splitter.onPattern(separatorPattern).splitToList(sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字符串 <code>name=kangPan;age=10;six=boy</code> 最后不能带分隔符，否则报错。分隔符是分号，键值对分隔符是等号，会拆分<br><code>key是name,value是kangPan</code>等键值对的<code>map</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StringToMap</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> separator 分隔符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> withKeyValueSeparator 键值对分割符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sequence 分隔的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Map 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">StringToMap</span><span class="params">(String separator,String withKeyValueSeparator, CharSequence sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Splitter.on(separator).withKeyValueSeparator(withKeyValueSeparator).split(sequence);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/2021/04/14/Lombok/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Data</td>
<td align="left">用在类上，提供<code>Getter、Setter、equals、hasCode、toString</code> 、构造方法（参数：<code>@NonNull和final字段</code>）</td>
</tr>
<tr>
<td align="left">@AllArgsConstructor</td>
<td align="left">用在类上，提供全参数构造方法</td>
</tr>
<tr>
<td align="left">@NoArgsConstructor</td>
<td align="left">用在类上，提供无参构造方法</td>
</tr>
<tr>
<td align="left">@RequiredArgsConstructor</td>
<td align="left">用在类上，提供构造方法（参数：<code>@NonNull和final字段</code>）</td>
</tr>
<tr>
<td align="left">@Value</td>
<td align="left">用在类上，提供 <code>get、equals、hashCode、toString</code>、全参数构造方法</td>
</tr>
<tr>
<td align="left">@EqualsAndHashCode</td>
<td align="left">用在类上，提供<code>equals、hasCode</code>方法，继承父类使用 <code>@EqualsAndHashCode(callSuper = true)</code></td>
</tr>
<tr>
<td align="left">@NonNull</td>
<td align="left">用在字段上，提供无参构造方法，为空则抛出<code>NullPointerException</code></td>
</tr>
<tr>
<td align="left">@Cleanup</td>
<td align="left">用在字段上，释放资源，<code>try&#123;&#125;finally&#123;&#125;</code></td>
</tr>
<tr>
<td align="left">@SneakyThrows</td>
<td align="left">用在类上，捕获异常，指定异常<code>@SneakyThrows(Exception.class)</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<blockquote>
<p>注解 <code>@Getter @Setter</code>，<code>@Getter</code> 支持懒加载 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Getter &#123;</span><br><span class="line">	lombok.<span class="function">AccessLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> lombok.AccessLevel.PUBLIC</span>;</span><br><span class="line">	AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">lazy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Setter &#123;</span><br><span class="line">	lombok.<span class="function">AccessLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> lombok.AccessLevel.PUBLIC</span>;</span><br><span class="line">	AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	AnyAnnotation[] onParam() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">AccessLevel</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PUBLIC</td>
<td align="left">生成 <code>public</code> 修饰的 <code>getter    setter</code> 方法</td>
</tr>
<tr>
<td align="left">MODULE</td>
<td align="left">生成没有修饰符修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PROTECTED</td>
<td align="left">生成 <code>protected</code> 修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PACKAGE</td>
<td align="left">生成没有修饰符修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PRIVATE</td>
<td align="left">生成 <code>private</code> 修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">NONE</td>
<td align="left">不生成 <code>getter  setter</code> 方法</td>
</tr>
</tbody></table>
<blockquote>
<p>注解  <code>@EqualsAndHashCode</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EqualsAndHashCode &#123;</span><br><span class="line">	String[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	String[] of() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">callSuper</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">doNotUseGetters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">exclude</td>
<td align="left">在生成的 <code>equals</code> 和 <code>hashCode</code> 方法中排除的字段</td>
</tr>
<tr>
<td align="left">of</td>
<td align="left">在生成的 <code>equals</code> 和 <code>hashCode</code> 方法中列出的字段</td>
</tr>
<tr>
<td align="left">callSuper</td>
<td align="left">属性设置为 <code>true</code>，表示父类的 <code>equals</code> 和 <code>hashCode</code> 参与计算，默认为 <code>false</code></td>
</tr>
<tr>
<td align="left">doNotUseGetters</td>
<td align="left">通常都是通过字段的 <code>getter</code> 方法获取字段值，设置为 <code>true</code>，表示不通过 <code>getter</code> 方法获取，而是直接访问字段值，默认为 <code>false</code></td>
</tr>
</tbody></table>
<blockquote>
<p>注解 <code>@Accessors</code> ，配合 <code>@Setter、@Getter 、@Data </code>注解，用在类上和字段上</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fluent</td>
<td align="left">默认为 <code>false</code>，如果为 <code>true</code> 则生成的 <code>getter/setter</code> 方法没有 <code>set/get</code> 前缀，如果为 <code>true</code>, <code>chain</code> 未设置，则 <code>chain</code> 会被设置为 <code>true</code></td>
</tr>
<tr>
<td align="left">chain</td>
<td align="left">默认为 <code>false</code>， <code>setter</code> 方法返回是 <code>void</code>，如果为 <code>true</code> 则返回<code> this</code>，当 <code>fluent</code> 为 <code>true</code> 时，<code>chain</code> 会设置为 <code>true</code></td>
</tr>
<tr>
<td align="left">prefix</td>
<td align="left"><code>getter    setter </code>方法时会去掉指定的前缀</td>
</tr>
</tbody></table>
<blockquote>
<p>注解 <code>Log</code></p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@CommonsLog</td>
<td align="left"><code>org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@JBossLog</td>
<td align="left"><code>org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Log</td>
<td align="left"><code>java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName())</code></td>
</tr>
<tr>
<td align="left">@Log4j</td>
<td align="left"><code>org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Log4j2</td>
<td align="left"><code>org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Slf4j</td>
<td align="left"><code>org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@XSlf4j</td>
<td align="left"><code>org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class)</code></td>
</tr>
</tbody></table>
<p>详情见 <a href="https://blog.csdn.net/wb1046329430/article/details/106105767/">使用 Lombok 进行 Java 开发</a><br>使用 <code>@Data</code> 会遇到什么坑，看下 <code>Mybatis</code> 的 <code>PropertyNamer</code> 类 ，<code>methodToProperty</code> 方法转属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">methodToProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// is开头的一般是bool类型，直接从第二个(索引)开始截取</span></span><br><span class="line">  <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;is&quot;</span>)) &#123;</span><br><span class="line">    name = name.substring(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// set get的就从第三个(索引)开始截取</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;get&quot;</span>) || name.startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">    name = name.substring(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isTrue;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line">    <span class="keyword">private</span> Boolean isFalse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.getMName(); <span class="comment">// mName 属性的 get 方法</span></span><br><span class="line">        test.isTrue(); <span class="comment">// isTrue 属性的  get 方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;getMName&quot;</span>)); <span class="comment">// 打印 MName 属性 (错误)</span></span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;isTrue&quot;</span>)); <span class="comment">// 打印 true 属性 (错误)</span></span><br><span class="line"></span><br><span class="line">        test.getIsFalse();</span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;getIsFalse&quot;</span>)); <span class="comment">// 打印 isFalse 属性  (正确)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出 <code>Mybatis</code> 把 <code>@Data</code> 生成的方法转属性之后，跟原属性对不上，所以使用的时候， <code>boolean</code> 类型 不要 <code>is加大写字母</code>命名，其它基本类型属性不要 <code>第一个字母小写 第二个字母大写</code> 命名<br>如果类实现 <code>Serializable</code>接口，  <code>boolean</code> 类型的字段命令为  <code>isTrue</code> 的会有问题 ，字段序列号后是 <code>true</code></p>
<p>如果要 <code>Builder</code> 链式调用父类的字段 ，父类和子类都要加 <code>@SuperBuilder</code><br> <code>Coffee.builder().name(&quot;name&quot;).id(100L).build();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;name can not be null&quot;)</span> <span class="comment">//只能作用在 String 上,不能为null, 而且调用trim()后, 长度必须大于0</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua limit</title>
    <url>/2021/04/14/Lua-limit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Lua 是一种轻量小巧的脚本语言，定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Limit &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法名为key</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间，单位秒</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">period</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限制访问次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>限流切面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;Object, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LimitAspect</span><span class="params">(RedisTemplate&lt;Object, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置String key 和value序列化模式</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.kangpan.annotation.Limit)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) proceedingJoinPoint.getSignature();</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line">        Limit limit = method.getAnnotation(Limit.class);</span><br><span class="line">        String key = limit.key();</span><br><span class="line">        ImmutableList&lt;Object&gt; keys = ImmutableList.of(key);</span><br><span class="line">        String lua = <span class="string">&quot;local num&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n local key_local = redis.call(&#x27;setnx&#x27;,KEYS[1],0)&quot;</span> <span class="comment">// KEY存在不做任何事情 不存在赋值为0</span></span><br><span class="line">                + <span class="string">&quot;\n if (tonumber(key_local) == 1)&quot;</span> <span class="comment">// ==0 表示KEY存在 没有赋值  ==1 表示KEY不存在 赋值0了</span></span><br><span class="line">                + <span class="string">&quot;\n then&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n redis.call(&#x27;incr&#x27;,KEYS[1])&quot;</span> <span class="comment">// 存储在key中的数字值加1 如果key不存在 key的值先被设置为0 然后再执行加1操作</span></span><br><span class="line">                    + <span class="string">&quot;\n num = redis.call(&#x27;get&#x27;,KEYS[1])&quot;</span> <span class="comment">// 得到Key的值</span></span><br><span class="line">                        + <span class="string">&quot;\n if (tonumber(num) == 1)&quot;</span> <span class="comment">// 第一次赋值</span></span><br><span class="line">                        + <span class="string">&quot;\n then&quot;</span></span><br><span class="line">                            + <span class="string">&quot;\n redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2])&quot;</span> <span class="comment">// 设置有效时间</span></span><br><span class="line">                        + <span class="string">&quot;\n end&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n return tonumber(num);&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n else&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n redis.call(&#x27;incr&#x27;,KEYS[1])&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n num = redis.call(&#x27;get&#x27;,KEYS[1])&quot;</span></span><br><span class="line">                    + <span class="string">&quot;\n return tonumber(num);&quot;</span></span><br><span class="line">                + <span class="string">&quot;\n end&quot;</span>;</span><br><span class="line"></span><br><span class="line">        RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(lua, Number.class);</span><br><span class="line">        Number number = redisTemplate.execute(redisScript, keys, limit.count(), limit.period());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != number &amp;&amp; number.intValue() &lt;= limit.count()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;方法&#123;&#125;: 第&#123;&#125;次访问 有效时间为 &#123;&#125;&quot;</span>, limit.key(), number, redisTemplate.getExpire(limit.key()));</span><br><span class="line">            <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadRequestException(<span class="string">&quot;访问次数受限制&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>BadRequestException</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadRequestException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( message );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( message, cause );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BadRequestException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( cause );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>捕获 <code>BadRequestException</code> 处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.kangpan.controller&quot;)</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;ValidationException.class, BadRequestException.class&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.builder().time(LocalDateTime.now()).message(e.getMessage()).status(HttpStatus.BAD_REQUEST.value()).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义 <code>ResponseEntity</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy:MM:dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用 <code>controller</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/limitBuy&quot;)</span></span><br><span class="line"><span class="meta">@Limit(key = &quot;limitBuy&quot;, count = 10, period = 60)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;限次数购买&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">limitBuy</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">    orderService.save(order);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.builder().message(<span class="string">&quot;buy success&quot;</span>).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MultiValueMap</title>
    <url>/2021/04/14/MultiValueMap/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>org.springframework.util</code> 包下的 <code>MultiValueMap</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, <span class="meta">@Nullable</span> V value)</span></span>;</span><br></pre></td></tr></table></figure>

<p>看下 <code>LinkedMultiValueMap</code> 实现</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(K key, <span class="meta">@Nullable</span> V value)</span> </span>&#123;</span><br><span class="line">	List&lt;V&gt; values = <span class="keyword">this</span>.targetMap.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> LinkedList&lt;&gt;());</span><br><span class="line">	values.add(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>targetMap</code> 在 <code>LinkedMultiValueMap</code> 构造方法的时候初始化了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, List&lt;V&gt;&gt; targetMap;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedMultiValueMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.targetMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>介绍下 <code>computeIfAbsent</code>  当<code>get(key)</code> 是 <code>null</code> 的时候 我们 <code>put</code> 新的 <code>value</code>  如果不是 那么直接返回 <code>get(key)</code> 也就是 <code>LinkedList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">computeIfAbsent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">         Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>&#123;</span><br><span class="line">     Objects.requireNonNull(mappingFunction);</span><br><span class="line">     V v;</span><br><span class="line">     <span class="keyword">if</span> ((v = get(key)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">         V newValue;</span><br><span class="line">         <span class="keyword">if</span> ((newValue = mappingFunction.apply(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">             put(key, newValue);</span><br><span class="line">             <span class="keyword">return</span> newValue;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MultiValueMap&lt;String,String&gt; map = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">map.add(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.add(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><code>map</code> 对应的 <code>key</code> 是 <code>k</code>，  对应的 <code>value</code> 是一个 <code>LinkedList</code> ，里面元素有 <code>1</code> 和 <code>2</code></p>
<p><code>MultiValueMap</code> 应用在 <code>SpringFactoriesLoader</code> 这个类检索 <code>META-INF/spring.factories</code> 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">	MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">	<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</span><br><span class="line">				classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">				ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">		result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">		<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">			URL url = urls.nextElement();</span><br><span class="line">			UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">			Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">			<span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">				String factoryTypeName = ((String) entry.getKey()).trim();</span><br><span class="line">				<span class="keyword">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">					result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cache.put(classLoader, result);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">				FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Qualifier之Bean的名称首字母大写还是小写？</title>
    <url>/2021/05/06/Qualifier/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Thus “FooBah” becomes “fooBah” and “X” becomes “x”, but “URL” stays  as “URL”.<br>如果一个类名是以两个大写字母开头的，则首字母不变，其它情况下默认首字母变成小写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Utility method to take a string and convert it to normal Java variable</span></span><br><span class="line"><span class="comment"> * name capitalization.  This normally means converting the first</span></span><br><span class="line"><span class="comment"> * character from upper case to lower case, but in the (unusual) special</span></span><br><span class="line"><span class="comment"> * case when there is more than one character and both the first and</span></span><br><span class="line"><span class="comment"> * second characters are upper case, we leave it alone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Thus &quot;FooBah&quot; becomes &quot;fooBah&quot; and &quot;X&quot; becomes &quot;x&quot;, but &quot;URL&quot; stays</span></span><br><span class="line"><span class="comment"> * as &quot;URL&quot;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  name The string to be decapitalized.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The decapitalized version of the string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decapitalize</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name.length() &gt; <span class="number">1</span> &amp;&amp; Character.isUpperCase(name.charAt(<span class="number">1</span>)) &amp;&amp;</span><br><span class="line">                    Character.isUpperCase(name.charAt(<span class="number">0</span>)))&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> chars[] = name.toCharArray();</span><br><span class="line">    chars[<span class="number">0</span>] = Character.toLowerCase(chars[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis + Lua</title>
    <url>/2021/04/14/Redis-+-Lua/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建一个 <code>springboot</code> 的项目，引入  <code>spring-boot-starter-parent</code>父组件，<code> spring-boot-starter-web</code>组件， <code>lombok</code>组件，<code>jedis</code>客户端组件   ，谷歌的<code>guava</code> 组件</p>
<span id="more"></span>
<p>创建 <code>Runners</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runners</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        String lua = <span class="string">&quot;return ARGV[1]&quot;</span>; <span class="comment">// lua 脚本</span></span><br><span class="line">        String result = (String)jedis.eval(lua,<span class="number">0</span>,<span class="string">&quot;100&quot;</span>); <span class="comment">// 0个key 值100</span></span><br><span class="line">        log.info(<span class="string">&quot;result:&#123;&#125;&quot;</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 <code>result</code> 打印 <code>100</code><br>命令格式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">EVAL lua脚本 numkeys key <span class="selector-attr">[key ...]</span> arg <span class="selector-attr">[arg ...]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>numkeys</code> 指 key 的数量</li>
<li><code>key [key ...]</code>，键，多个，在<code>lua</code>脚本中通过<code>KEYS[1], KEYS[2]</code>获取</li>
<li><code>arg [arg ...]</code>，值，多个，在<code>lua</code>脚本中通过<code>ARGV[1], ARGV[2]</code>获取</li>
</ul>
<p><code>ScriptingCommands</code> 类 <code>jedis</code> 对 <code>lua</code> 命令的支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScriptingCommands</span> </span>&#123;</span><br><span class="line">  <span class="function">Object <span class="title">eval</span><span class="params">(String script, <span class="keyword">int</span> keyCount, String... params)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">eval</span><span class="params">(String script, List&lt;String&gt; keys, List&lt;String&gt; args)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">eval</span><span class="params">(String script)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1, List&lt;String&gt; keys, List&lt;String&gt; args)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1, <span class="keyword">int</span> keyCount, String... params)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Boolean <span class="title">scriptExists</span><span class="params">(String sha1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Boolean&gt; <span class="title">scriptExists</span><span class="params">(String... sha1)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">String <span class="title">scriptLoad</span><span class="params">(String script)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Runners</code> 类改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">String lua = <span class="string">&quot;redis.call(&#x27;set&#x27;, KEYS[1], ARGV[1])&quot;</span>;</span><br><span class="line">List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">keys.add(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">values.add(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">jedis.eval(lua,keys,values);</span><br></pre></td></tr></table></figure>
<p>打开 <code>redis</code> 客户端 </p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>
<p>或者 修改</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> lua = <span class="string">&quot;local str = redis.call(&#x27;get&#x27;, KEYS[1]);return str&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">String</span> result = (<span class="built_in">String</span>) jedis.<span class="built_in">eval</span>(lua,keys,values)<span class="comment">;</span></span><br><span class="line"><span class="built_in">log</span>.info(result)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>控制台打印 <code>100</code><br>使用 <code>Spring Data Redis</code> 组件，支持的客户端 <code>Jedis / Lettuce</code>，配置 <code>RedisTemplate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(RedisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认情况下的模板只能支持RedisTemplate&lt;String, String&gt;，也就是只能存入字符串，因此支持序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Serializable&gt; <span class="title">redisTemplate</span><span class="params">(LettuceConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Serializable&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> GenericJackson2JsonRedisSerializer());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runners</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String lua = <span class="string">&quot;redis.call(&#x27;EXPIRE&#x27;, KEYS[1], ARGV[2]);&quot;</span>; <span class="comment">// 这里使用的是第二个参数30， 101未用到</span></span><br><span class="line">        ImmutableList&lt;Object&gt; keys = ImmutableList.of(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(lua, Number.class);</span><br><span class="line">        redisTemplate.execute(redisScript,keys,<span class="string">&quot;101&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>key</code> 有效时间为 <code>30</code> 秒，<code>30</code> 秒之后查询 <code>nil</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<p>redis 可视化客户端 <code>https://github.com/qishibo/AnotherRedisDesktopManager</code>，查看有效时间<code>30</code>秒递减<br>更改 <code>Runners</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String lua = <span class="string">&quot; redis.call(&#x27;INCR&#x27;,KEYS[1]);&quot;</span>;</span><br><span class="line">ImmutableList&lt;Object&gt; keys = ImmutableList.of(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">RedisScript&lt;Number&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(lua, Number.class);</span><br><span class="line">redisTemplate.execute(redisScript,keys,<span class="string">&quot;100&quot;</span>,<span class="number">120</span>);</span><br></pre></td></tr></table></figure>
<p>执行命令，值增加 <code>1</code></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;100&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; get key</span><br><span class="line"><span class="string">&quot;101&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt;</span><br></pre></td></tr></table></figure>
<p>以上例子涉及 <code>redis</code> 四个命令 <code>SET</code>，<code>GET</code>， <code>EXPIRE</code>， <code>INCR</code></p>
<blockquote>
<p><code>INCR</code>    对存储在指定 <code>key</code>的数值执行原子的加<code>1</code>操作<br>如果指定的<code>key</code>不存在，那么在执行<code>incr</code>操作之前，会先将它的值设定为<code>0</code></p>
</blockquote>
<blockquote>
<p><code>EXPIRE</code> 设置<code>key</code>的过期时间，超过时间后，将会自动删除该<code>key</code></p>
</blockquote>
<p>查看其它命令 <code>http://www.redis.cn/commands.html</code><br>详细<code>lua</code>学习 <code>https://github.com/52fhy/lua-book</code></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nexus</title>
    <url>/2021/04/14/Nexus/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>nexus repository manager</code> ，<code>nexus </code>的 仓库管理<br><a href="https://repo.eclipse.org/#welcome">图片链接</a></p>
<p>使用 <code>nexus </code> 构建 <code>Maven</code> 私服，可以代理远程仓库和部署自己或第三方构件<br>gitHub 地址 <a href="https://github.com/sonatype/nexus/releases">https://github.com/sonatype/nexus/releases</a><br>官方地址 <a href="https://www.sonatype.com/">https://www.sonatype.com/</a></p>
<p>选择 <code>nexus repository</code> 查看 <code>repository</code> 构建架构<br>填写基本信息，邮件会收到验证信息，点击邮件内容的链接验证</p>
<span id="more"></span>
<p>点击 <code>Download: Nexus Repository</code> 下载，下载之后解压，有两个文件夹，<code>nexus-3.30.0-01</code>文件夹 是 <code>web</code> 服务器 ，<code> sonatype-work</code> 文件夹是私有仓库的目录，新建一个文件夹 <code>nexus </code> ，把这两个文件夹移动里面，进入  <code>\nexus\nexus-3.30.0-01\bin</code> 打开 <code>CMD</code> 窗口，运行 <code>nexus /run</code></p>
<p>运行完后 打开 <code>http://localhost:8081/</code></p>
<p><code>Browse</code> 默认生成的仓库，</p>
<table>
<thead>
<tr>
<th>type</th>
<th>介绍</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>proxy</td>
<td>代理仓库</td>
<td>中央仓库的私有仓库</td>
</tr>
<tr>
<td>hosted</td>
<td>本地开发的项目</td>
<td>releases 稳定版本仓库，snapshots 快照版本仓库</td>
</tr>
</tbody></table>
<p>点击右上角登录，复制 <code>admin.password</code> 的默认密码，默认账号是 <code>admin</code>，登录之后创建代理仓库<br>选择 <code>maven2 （proxy）</code></p>
<p><code>Version policy</code> 有三个选项 </p>
<table>
<thead>
<tr>
<th>type</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Mixed</td>
<td>混合</td>
</tr>
<tr>
<td>Release</td>
<td>发布</td>
</tr>
<tr>
<td>Snapshot</td>
<td>快照</td>
</tr>
</tbody></table>
<p><code>Layout policy</code> 有二个选项 </p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Strict</td>
<td>严格模式</td>
</tr>
<tr>
<td>Permissive</td>
<td>授权模式</td>
</tr>
</tbody></table>
<p><code>Remote storage</code> 填写 远程镜像仓库，<code>https://maven.aliyun.com/nexus/content/groups/public/</code>，<a href="https://maven.aliyun.com/mvn/guide">阿里云Maven</a><br>创建成功看到状态为在线等待连接<br>接下来创建发布仓库和快照仓库<br><code>Deployment policy</code> 有三个选项 </p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Allow redeploy</td>
<td>允许重复发布</td>
</tr>
<tr>
<td>Disabled redeploy</td>
<td>禁止发布</td>
</tr>
<tr>
<td>Read-only</td>
<td>只读</td>
</tr>
</tbody></table>
<p>配置代理仓库、快照仓库、发布仓库后，打开<code>maven</code>配置文件 <code>settings.xml</code>文件配置连接仓库的账号和密码，发布稳定版本和快照版本是需要连接<code>Nexus</code>，配置的是授权模式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyReleaseRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>MySnapshotsRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建一个 <code>maven</code>工程，配置 <code>pom.xml</code>，<code>url</code> <code>copy</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>MyNexus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置代理仓库   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyProxyRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MyProxyRepositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/MyProxyRepositories/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   设置稳定版本发布仓库    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>MyReleaseRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MyReleaseRepositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/MyReleaseRepositories/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   设置快照版本发布仓库    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>MySnapshotsRepositories<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>MySnapshotsRepositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/repository/MySnapshotsRepositories/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>pom </code>文件 的<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code> 改成<br>  <code>&lt;version&gt;1.0-RELEASE&lt;/version&gt;</code>，执行命令 <code>mvn deploy</code><br>查看<code>Browse</code>，稳定版本已经发布上去了<br><code>Maven &amp; Nexus</code> 使用参考 <a href="https://www.sonatype.com/resources/ebooks">https://www.sonatype.com/resources/ebooks</a><br>参考 <a href="https://galaxyyao.github.io/2019/09/18/Maven-%E7%BB%84%E7%BB%87%E5%86%85%E9%83%A8%E9%A1%B9%E7%9B%AE%E7%BB%9F%E4%B8%80%E9%85%8D%E7%BD%AEDistributionManagement/">Maven-组织内部项目统一配置DistributionManagement</a><br><a href="https://cloud.tencent.com/developer/article/1799571">聊聊项目打包发布到maven私仓常见的几种方式</a><br><a href="https://juejin.cn/post/6844904104032993293#heading-3">nexus私服 和 settings.xml</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplate</title>
    <url>/2021/04/14/RestTemplate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>Spring Cloud</code> 提供了一个接口 <code>DiscoveryClient</code> ， 为 <code>Eureka</code> 或者 <code>consul</code> 等注册中心去实现，  <code>getInstances</code> 方法获取注册的实例，一个实例对应一个工程</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;ServiceInstance&gt; <span class="title">getInstances</span><span class="params">(<span class="keyword">String</span> serviceId)</span></span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>看下接口 <code>ServiceInstance</code> 下面两个方法 获取 主机名（IP）/  端口</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">String</span> <span class="title">getHost</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>注册了实例之后，使用  阻塞式同步<code>RestTemplate</code> 调用 或者 异步非阻塞 <code>WebClient</code> 调用，<code>RestTemplate</code> 为每个HTTP请求创建一个线程，在响应之前一直是阻塞状态，占用系统内存资源。</p>
<p>多个实例  <code>@LoadBalaced</code> 为 <code>RestTemplate</code>  或者 <code>WebClient</code> 做负载均衡的支持，<code>LoadBalancerInterceptor</code> 实现 <code>ClientHttpRequestInterceptor</code> 接口 (<code>intercept</code> 方法)</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">ClientHttpResponse intercept(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution <span class="keyword">execution</span>)</span><br><span class="line">		<span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure>
<p>通过请求 <code>URL</code> 获取 <code>host</code>  然后使用 <code>LoadBalancerClient</code> 进行调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> LoadBalancerClient loadBalancer; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> URI originalUri = request.getURI();</span><br><span class="line">		String serviceName = originalUri.getHost();</span><br><span class="line">		Assert.state(serviceName != <span class="keyword">null</span>,</span><br><span class="line">				<span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer.execute(serviceName,</span><br><span class="line">				<span class="keyword">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>看下 <code>execute</code> 方法 默认引用的是 <code>RibbonLoadBalancerClient</code>  通过 <code>serviceId</code>  和 调用的实例 <code>ribbonServer</code>  及 请求<code>request</code> 做服务调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request, Object hint)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	ILoadBalancer loadBalancer = getLoadBalancer(serviceId);</span><br><span class="line">	Server server = getServer(loadBalancer, hint);</span><br><span class="line">	<span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No instances available for &quot;</span> + serviceId);</span><br><span class="line">	&#125;</span><br><span class="line">	RibbonServer ribbonServer = <span class="keyword">new</span> RibbonServer(serviceId, server,</span><br><span class="line">			isSecure(server, serviceId),</span><br><span class="line">			serverIntrospector(serviceId).getMetadata(server));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> execute(serviceId, ribbonServer, request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 <code>RestTemplate </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .setConnectTimeout(Duration.ofMillis(<span class="number">100</span>))</span><br><span class="line">                .setReadTimeout(Duration.ofMillis(<span class="number">500</span>))</span><br><span class="line">                .requestFactory(<span class="keyword">this</span>::requestFactory)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Problem About Spring</title>
    <url>/2021/04/26/Some-Problem-About-Spring/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>看下 <code>org.springframework.util</code> 包下的 <code>ClassUtils</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> PACKAGE_SEPARATOR = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPackageName</span><span class="params">(String fqClassName)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(fqClassName, <span class="string">&quot;Class name must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> lastDotIndex = fqClassName.lastIndexOf(PACKAGE_SEPARATOR);</span><br><span class="line">    <span class="keyword">return</span> (lastDotIndex != -<span class="number">1</span> ? fqClassName.substring(<span class="number">0</span>, lastDotIndex) : <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如果 <code>fqClassName</code> 参数是 <code>com.java</code> 那么返回结果为 <code>com</code> ，这里解答了我一个疑问，比如 <code>Spring</code> 启动类所在的包 和 <code>Controller</code>包 不在同一个包下，导致找不到 <code>Controller</code> 类。这里写下正常的包结构</p>
<ul>
<li>com<ul>
<li>controller</li>
<li>model</li>
<li>service</li>
<li>mapper</li>
<li>Application 启动类</li>
</ul>
</li>
</ul>
<p>如果 <code>Application</code> 启动类 在其它包下，例如放在 <code>app</code> 包下，那么启动会报错，找不到对应的 <code>Bean</code></p>
<ul>
<li>com<ul>
<li>controller</li>
<li>model</li>
<li>service</li>
<li>mapper</li>
</ul>
</li>
<li>app<ul>
<li>Application 启动类</li>
</ul>
</li>
</ul>
<p>那为啥在同一个包下就可以找到呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看下 <code>@SpringBootApplication</code> 注解，这里省略了其它代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">public @interface SpringBootApplication &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>@SpringBootApplication</code> 开启了很多功能，其中一个关键功能就是 <code>@ComponentScan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ComponentScan &#123;</span><br><span class="line">	<span class="meta">@AliasFor(&quot;basePackages&quot;)</span></span><br><span class="line">	String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里 <code>basePackages</code> 默认是 <code>&#123;&#125;</code>，那么默认是什么包呢，先看下 <code>ConfigurationClassParser</code> 类的其中一段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ComponentScanAnnotationParser componentScanParser;</span><br><span class="line"><span class="comment">// 拿到该类上面所有的@ComponentScan注解</span></span><br><span class="line">Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">				sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">                </span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">            <span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line"></span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>
<p>看下  <code>this.componentScanParser.parse()</code>, 这里涉及 <code>ComponentScanAnnotationParser</code> 类，以下省略了其它代码，看下它的 <code>parse</code> 方法，<code>declaringClass</code> 默认传的 <code>sourceClass.getMetadata().getClassName()</code> 也就是所在的包名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentScanAnnotationParser</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">parse</span><span class="params">(AnnotationAttributes componentScan, <span class="keyword">final</span> String declaringClass)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; basePackages = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">		String[] basePackagesArray = componentScan.getStringArray(<span class="string">&quot;basePackages&quot;</span>);</span><br><span class="line">        	<span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">			basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这应该明白了。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>json 处理</title>
    <url>/2021/05/10/json-%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cb08544bb19904a01ec34cabc5d9e85f58e108628640f0b82dabb47f3961ecdd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>docsify</title>
    <url>/2021/05/02/docsify/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://up.enterdesk.com/edpic/7c/b7/25/7cb7255d3a70c8b54723edb3263f8458.jpg"></p>
<h3 id="Docsify"><a href="#Docsify" class="headerlink" title="Docsify"></a>Docsify</h3><p>一个神奇的文档网站生成器。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>docsify</code> 可以快速帮你生成文档网站。不同于 <code>GitBook</code>、<code>Hexo</code> 的地方是它不会生成静态的 <code>.html</code> 文件，所有转换工作都是在运行时。如果你想要开始使用它，只需要创建一个 <code>index.html</code> 就可以开始编写文档并直接部署在 <code>GitHub Pages</code>。</p>
<p>查看快速开始了解详情:<a href="https://docsify.js.org/#/zh-cn/">https://docsify.js.org/#/zh-cn/</a></p>
<span id="more"></span>
<h3 id="安装-docsify-cli"><a href="#安装-docsify-cli" class="headerlink" title="安装 docsify-cli"></a>安装 docsify-cli</h3><p>建一个文件夹 <code>cloud-doc</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">C:\Users\cloud-doc (master)</span><br><span class="line">输入命令：npm i docsify-cli -g</span><br><span class="line">&gt; Thank you <span class="keyword">for</span> using docsify!</span><br><span class="line">If you rely on <span class="keyword">this</span> <span class="keyword">package</span>, please consider supporting our <span class="keyword">open</span> collective:</span><br><span class="line">&gt; https:<span class="comment">//opencollective.com/docsify/donate</span></span><br><span class="line"></span><br><span class="line">npm WARN <span class="symbol">ws@</span><span class="number">7.4</span><span class="number">.5</span> requires a peer of <span class="symbol">bufferutil@</span>^<span class="number">4.0</span><span class="number">.1</span> but none <span class="keyword">is</span> installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN <span class="symbol">ws@</span><span class="number">7.4</span><span class="number">.5</span> requires a peer of utf-<span class="number">8</span>-<span class="symbol">validate@</span>^<span class="number">5.0</span><span class="number">.2</span> but none <span class="keyword">is</span> installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <span class="symbol">fsevents@</span><span class="number">2.3</span><span class="number">.2</span> (node_modules\docsify-cli\node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> <span class="symbol">fsevents@</span><span class="number">2.3</span><span class="number">.2</span>: wanted &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;darwin&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;any&quot;</span>&#125; (current: &#123;<span class="string">&quot;os&quot;</span>:<span class="string">&quot;win32&quot;</span>,<span class="string">&quot;arch&quot;</span>:<span class="string">&quot;x64&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">+ docsify-<span class="symbol">cli@</span><span class="number">4.4</span><span class="number">.3</span></span><br><span class="line">added <span class="number">208</span> packages from <span class="number">91</span> contributors <span class="keyword">in</span> <span class="number">13.</span>718s</span><br></pre></td></tr></table></figure>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">docsify <span class="keyword">init</span> ./docs</span><br></pre></td></tr></table></figure>
<h3 id="开始写文档"><a href="#开始写文档" class="headerlink" title="开始写文档"></a>开始写文档</h3><p>初始化成功后，可以看到 <code>./docs</code> 目录下创建的几个文件</p>
<ul>
<li>index.html 入口文件</li>
<li>README.md 会做为主页内容渲染</li>
<li>nojekyll 用于阻止 GitHub Pages 忽略掉下划线开头的文件<br>直接编辑 <code>docs/README.md</code> 就能更新文档内容，当然也可以添加更多页面。</li>
</ul>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>通过运行 <code>docsify serve</code> 启动一个本地服务器，可以方便地实时预览效果。默认访问地址 <code>http://localhost:3000</code> 。</p>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>参考 <a href="https://docsify.js.org/#/zh-cn/themes">https://docsify.js.org/#/zh-cn/themes</a></p>
<p><a href="https://jhildenbiddle.github.io/docsify-themeable/#/">docsify-themeable</a> 一个用于docsify的，简单到令人愉悦的主题系统，参考<a href="https://codesandbox.io/s/xv36w4695o?file=/sidebar.md:0-167">https://codesandbox.io/s/xv36w4695o?file=/sidebar.md:0-167</a><br>直接粘贴复制它的文件，然后用 <code>vscode</code> 打开，浏览器可以实时查看到效果</p>
<h3 id="部署-Github"><a href="#部署-Github" class="headerlink" title="部署 Github"></a>部署 Github</h3><p>接下来自己修修改改改，然后上传到 <code>github</code>，访问 <a href="https://javakangpan.github.io/Blog/#/">https://javakangpan.github.io/Blog/#/</a><br>这里简单的介绍了如何使用，了解更多需要自己去探索。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>SourceTree</title>
    <url>/2021/04/14/SourceTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.sourcetreeapp.com/">SourceTree</a>SourceTree集成了Git Flow功能，能简单方便的操作和实现常规的工作流程。支持OSX和Windows平台。<a href="https://support.atlassian.com/sourcetree/">操作文档</a><br>在 <code>gitHub</code> 创建一个仓库 <code>javaBook</code><br>克隆到本地</p>
<span id="more"></span>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"> &gt; git clone git@github.com:javakangpan/javaBook.git</span><br><span class="line">Cloning <span class="keyword">into</span> <span class="string">&#x27;javaBook&#x27;</span>...</span><br><span class="line">warning: You appear <span class="built_in">to</span> have cloned <span class="keyword">an</span> <span class="literal">empty</span> repository.</span><br></pre></td></tr></table></figure>
<p>添加文件</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        Bean.md</span><br><span class="line">        CacheLine.md</span><br><span class="line">        Docker.md</span><br><span class="line">        Java8.md</span><br><span class="line"></span><br><span class="line">        &quot;<span class="symbol">\3</span>45<span class="symbol">\2</span>34<span class="symbol">\2</span>50<span class="symbol">\3</span>45<span class="symbol">\2</span>56<span class="symbol">\2</span>71<span class="symbol">\3</span>45<span class="symbol">\2</span>31<span class="symbol">\2</span>50<span class="symbol">\3</span>44<span class="symbol">\2</span>70<span class="symbol">\2</span>55<span class="symbol">\3</span>50<span class="symbol">\2</span>77<span class="symbol">\2</span>20<span class="symbol">\3</span>50<span class="symbol">\2</span>41<span class="symbol">\2</span>14Apache<span class="symbol">\3</span>46<span class="symbol">\2</span>34<span class="symbol">\2</span>15<span class="symbol">\3</span>45<span class="symbol">\2</span>12<span class="symbol">\2</span>41<span class="symbol">\3</span>45<span class="symbol">\2</span>31<span class="symbol">\2</span>50.md&quot;</span><br></pre></td></tr></table></figure>
<p>添加到暂存区</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; git <span class="built_in">add</span> .</span><br><span class="line">warning: LF will be replaced <span class="keyword">by</span> <span class="literal">CRLF</span> <span class="keyword">in</span> Docker.md.</span><br><span class="line">The <span class="built_in">file</span> will have its original <span class="built_in">line</span> endings <span class="keyword">in</span> your working <span class="built_in">directory</span></span><br></pre></td></tr></table></figure>
<p>提交</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">&gt; git commit -m <span class="string">&quot;add&quot;</span></span><br><span class="line">[<span class="keyword">master</span> <span class="title">(root-commit</span>) d46fbcc] add</span><br><span class="line"> <span class="number">47</span> files changed, <span class="number">3182</span> insertions(+)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>推送到远程分支</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; git push</span><br><span class="line">Enumerating object<span class="variable">s:</span> <span class="number">50</span>, done.</span><br><span class="line">Counting object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">50</span>/<span class="number">50</span>), done.</span><br><span class="line">Delta compression using <span class="keyword">up</span> <span class="keyword">to</span> <span class="number">8</span> threads</span><br><span class="line">Compressing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">50</span>/<span class="number">50</span>), done.</span><br><span class="line">Writing object<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">50</span>/<span class="number">50</span>), <span class="number">1.92</span> MiB | <span class="number">431.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">50</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving delta<span class="variable">s:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</span><br><span class="line">To github.<span class="keyword">com</span>:javakangpan/javaBook.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; master</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>SourceTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Application is finished, How to open the browser?</title>
    <url>/2021/04/15/When-the-Spring-Boot-Application-is-finished,-then-How-to-open-the-browser-/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterRun</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment environment;</span><br><span class="line">    <span class="meta">@EventListener(&#123;ApplicationReadyEvent.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String port = environment.getProperty(<span class="string">&quot;local.server.port&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;http://localhost:&quot;</span> + port;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;rundll32 url.dll,FileProtocolHandler &quot;</span> + url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><p><code>Environment</code>即环境，也可以叫做上下文。<code>Environment</code>在容器中是一个抽象的集合，是指应用环境的2个方面：<code>profiles</code>和<code>properties</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Environment</span> <span class="keyword">extends</span> <span class="title">PropertyResolver</span> </span>&#123;</span><br><span class="line">    String[] getActiveProfiles();</span><br><span class="line"></span><br><span class="line">    String[] getDefaultProfiles();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">acceptsProfiles</span><span class="params">(String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">acceptsProfiles</span><span class="params">(Profiles var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>environment</code> 获取当前端口拼接 <code>URL</code></p>
<h3 id="EventListener"><a href="#EventListener" class="headerlink" title="@EventListener"></a>@EventListener</h3><p><code>Spring</code>提供的一个事件监听、订阅的实现，内部实现原理是观察者设计模式；为的就是业务系统逻辑的解耦,提高可扩展性以及可维护性。事件发布者并不需要考虑谁去监听，监听具体的实现内容是什么，发布者的工作只是为了发布事件而已。<br>如下例子，控制台打印 <code>发布的消息:hello</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(App.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> MyEvent(<span class="keyword">this</span>,<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyEvent</span><span class="params">(Object source,String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDemoEvent</span><span class="params">(MyEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发布的消息:&#123;&#125;&quot;</span>, event.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ApplicationReadyEvent"><a href="#ApplicationReadyEvent" class="headerlink" title="ApplicationReadyEvent"></a>ApplicationReadyEvent</h3><p><code>spring boot</code>中支持的事件类型如下</p>
<ul>
<li><p>ApplicationFailedEvent：该事件为spring boot启动失败时的操作</p>
</li>
<li><p>ApplicationPreparedEvent：上下文context准备时触发</p>
</li>
<li><p>ApplicationReadyEvent：上下文已经准备完毕的时候触发</p>
</li>
<li><p>ApplicationStartedEvent：spring boot 启动监听类</p>
</li>
<li><p>SpringApplicationEvent：获取SpringApplication</p>
</li>
<li><p>ApplicationEnvironmentPreparedEvent：环境事先准备</p>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>curl 和 httpie</title>
    <url>/2021/05/01/curl-+-pip/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://th.bing.com/th/id/Rff497327687b3beefc1a899f5977af36?rik=fR6l3SLlCPEIpQ&riu=http://img02.tooopen.com/images/20160404/tooopen_sy_158232324333.jpg&ehk=AepGEizBMnTz/LkAqnXuFe8qpxMqUvKCTQe8IG0OQSg=&risl=&pid=ImgRaw"></p>
<h3 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a><code>CURL</code></h3><p>详情参考 <a href="https://catonmat.net/cookbooks/curl">curl</a><br><code>get</code>请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//</span>catonmat.net</span><br></pre></td></tr></table></figure>
<p>请求之后保存响应信息到文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -o response.txt https:<span class="regexp">//</span>catonmat.net</span><br></pre></td></tr></table></figure>
<p>发送一个空参数的 <code>post</code> 请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -X POST https:<span class="regexp">//</span>catonmat.net</span><br></pre></td></tr></table></figure>
<p> <code>Form</code> 表单数据的 <code>POST</code> 请求</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;login=emma&amp;password=123&#x27;</span> -X POST https:<span class="regexp">//g</span>oogle.com/login</span><br></pre></td></tr></table></figure>
<p><code>JSON</code> 数据的 <code>POST</code> 请求</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line">curl -d <span class="string">&#x27;&#123;&quot;</span>login<span class="string">&quot;: &quot;</span>emma<span class="string">&quot;, &quot;</span>pass<span class="string">&quot;: &quot;</span><span class="number">123</span><span class="string">&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> https:<span class="comment">//google.com/login</span></span><br></pre></td></tr></table></figure>
<p>自己搭建了一个 <code>SpringBoot</code> 项目，尝试用 curl 发送 POST 请求，但是调不通，报 <code>SEC_E_INVALID_TOKEN</code> 。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"> <span class="attribute">url</span> -H &#x27;Content-type:application/json&#x27; -d &#x27;&#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;kangpan&quot;</span>&#125;&#x27; https://localhost:<span class="number">8080</span>/</span><br><span class="line"><span class="attribute">curl</span>: (<span class="number">35</span>) schannel: next InitializeSecurityContext failed: SEC_E_INVALID_TOKEN (<span class="number">0</span>x<span class="number">80090308</span>) - 给函数提供的标志无效</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>查看本机 <code>curl</code>,猜想是不是使用了某种协议，需要权限才能访问</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span> -V</span><br><span class="line"><span class="attribute">curl</span> <span class="number">7</span>.<span class="number">55</span>.<span class="number">1</span> (Windows) libcurl/<span class="number">7</span>.<span class="number">55</span>.<span class="number">1</span> WinSSL</span><br><span class="line"><span class="attribute">Release</span>-Date:<span class="meta"> [unreleased]</span></span><br><span class="line"><span class="attribute">Protocols</span>: dict file ftp ftps http https imap imaps pop<span class="number">3</span> pop<span class="number">3</span>s smtp smtps telnet tftp</span><br><span class="line"><span class="attribute">Features</span>: AsynchDNS IPv<span class="number">6</span> Largefile SSPI Kerberos SPNEGO NTLM SSL</span><br></pre></td></tr></table></figure>
<h3 id="HTTPie-安装步骤"><a href="#HTTPie-安装步骤" class="headerlink" title="HTTPie 安装步骤"></a><code>HTTPie</code> 安装步骤</h3><p>没有找到解决办法，那么就换一个工具吧 <code>httpie</code> <a href="https://github.com/jkbr/httpie">https://github.com/jkbr/httpie</a><br>查看文档 <a href="https://httpie.io/docs#installation">https://httpie.io/docs#installation</a></p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Windows, etc.</span><br><span class="line">A universal installation <span class="function"><span class="keyword">method</span> <span class="params">(that works <span class="keyword">on</span> Windows, Mac OS X, Linux, …, <span class="keyword">and</span> always provides the latest version)</span> <span class="title">is</span> <span class="title">to</span> <span class="title">use</span> <span class="title">pip</span>:</span></span><br><span class="line"></span><br><span class="line"># Make sure we have an up-<span class="keyword">to</span>-date version <span class="keyword">of</span> pip <span class="keyword">and</span> setuptools:</span><br><span class="line">python -m pip install --upgrade pip setuptools</span><br><span class="line"></span><br><span class="line">python -m pip install --upgrade httpie</span><br><span class="line">(<span class="keyword">If</span> pip installation fails <span class="keyword">for</span> some reason, you can <span class="keyword">try</span> easy_install httpie <span class="keyword">as</span> a fallback.)</span><br><span class="line"></span><br><span class="line">Python version</span><br><span class="line">Python version <span class="number">3.6</span> <span class="keyword">or</span> greater <span class="keyword">is</span> required.</span><br></pre></td></tr></table></figure>
<p>大致是说，需要安装 <code>Python</code>，配置<code>Python</code>环境变量，再使用 <code>Python</code> 安装 <code>pip</code>，设置 <code>pip</code>环境变量，再使用 <code>pip</code> 安装 <code>httpie</code><br>进入 <code>Python</code> 官方下载地址 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a><br>选择安装的文件 <code>Windows installer (64-bit)</code></p>
<h3 id="Python-安装"><a href="#Python-安装" class="headerlink" title="Python 安装"></a><code>Python</code> 安装</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Files</span></span><br><span class="line"><span class="attribute">Version</span>	Operating System	Description	MD<span class="number">5</span> Sum	File Size	GPG</span><br><span class="line"><span class="attribute">Gzipped</span> source tarball	Source release		cc<span class="number">8507</span>b<span class="number">3799</span>ed<span class="number">4</span>d<span class="number">8</span>baa<span class="number">7534</span>cd<span class="number">8</span>d<span class="number">5</span>b<span class="number">35</span>f	<span class="number">25411523</span>	SIG</span><br><span class="line"><span class="attribute">XZ</span> compressed source tarball	Source release		<span class="number">2</span>a<span class="number">3</span>dba<span class="number">5</span>fc<span class="number">75</span>b<span class="number">695</span>c<span class="number">45</span>cf<span class="number">1806156</span>e<span class="number">1</span>a<span class="number">97</span>	<span class="number">18900304</span>	SIG</span><br><span class="line"><span class="attribute">macOS</span> <span class="number">64</span>-bit Intel installer	Mac OS X	for macOS <span class="number">10</span>.<span class="number">9</span> and later	<span class="number">2</span>b<span class="number">974</span>bfd<span class="number">787</span>f<span class="number">941</span>fb<span class="number">8</span>f<span class="number">80</span>b<span class="number">5</span>b<span class="number">8084</span>e<span class="number">569</span>	<span class="number">29866341</span>	SIG</span><br><span class="line"><span class="attribute">macOS</span> <span class="number">64</span>-bit universal<span class="number">2</span> installer	Mac OS X	for macOS <span class="number">10</span>.<span class="number">9</span> and later, including macOS <span class="number">11</span> Big Sur <span class="literal">on</span> Apple Silicon (experimental)	<span class="number">9</span>aa<span class="number">68872</span>b<span class="number">9582</span>c<span class="number">6</span>c<span class="number">71151</span>d<span class="number">5</span>dd<span class="number">4</span>f<span class="number">5</span>ebca	<span class="number">37648771</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> embeddable package (<span class="number">32</span>-bit)	Windows		b<span class="number">4</span>bd<span class="number">8</span>ec<span class="number">0891891158000</span>c<span class="number">6844222014</span>d	<span class="number">7580762</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> embeddable package (<span class="number">64</span>-bit)	Windows		<span class="number">5</span>c<span class="number">34</span>eb<span class="number">7</span>e<span class="number">79</span>cfe<span class="number">8</span>a<span class="number">92</span>bf<span class="number">56</span>b<span class="number">5168</span>a<span class="number">459</span>f<span class="number">4</span>	<span class="number">8419530</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> help file	Windows		aaacfe<span class="number">224768</span>b<span class="number">5</span>e<span class="number">4</span>aa<span class="number">7583</span>c<span class="number">12</span>af<span class="number">68</span>fb<span class="number">0</span>	<span class="number">8859759</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> installer (<span class="number">32</span>-bit)	Windows		b<span class="number">790</span>fdaff<span class="number">648</span>f<span class="number">757</span>bf<span class="number">0</span>f<span class="number">233</span>e<span class="number">4</span>d<span class="number">05</span>c<span class="number">053</span>	<span class="number">27222976</span>	SIG</span><br><span class="line"><span class="attribute">Windows</span> installer (<span class="number">64</span>-bit)	Windows	Recommended	ebc<span class="number">65</span>aaa<span class="number">142</span>b<span class="number">1</span>d<span class="number">6</span>de<span class="number">450</span>ce<span class="number">241</span>c<span class="number">50</span>e<span class="number">61</span>c	<span class="number">28323440</span>	SIG</span><br></pre></td></tr></table></figure>
<p>安装之后设置环境变量 打开<code>CMD</code>窗口，输入命令，<code>C:\Python\Python39</code> 安装的路径</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">path</span>=%path%<span class="comment">;C:\Python\Python39</span></span><br></pre></td></tr></table></figure>
<p>查看环境变量是否设置成功，<code>CMD</code> 输入 <code>python</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Python</span> <span class="number">3</span>.<span class="number">9</span>.<span class="number">4</span> (tags/v<span class="number">3</span>.<span class="number">9</span>.<span class="number">4</span>:<span class="number">1</span>f<span class="number">2</span>e<span class="number">308</span>, Apr  <span class="number">6</span> <span class="number">2021</span>, <span class="number">13</span>:<span class="number">40</span>:<span class="number">21</span>)<span class="meta"> [MSC v.1928 64 bit (AMD64)] on win32</span></span><br><span class="line"><span class="meta">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a><code>pip</code> 安装</h3><p>接下来使用 <code>python</code> 安装 <code>pip</code>，安装详情参考 <a href="https://pip.pypa.io/en/stable/installing/">https://pip.pypa.io/en/stable/installing/</a></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">Do I need to install pip?</span><br><span class="line">pip is already installed<span class="built_in"> if </span>you are using Python 2 &gt;=2.7.9<span class="built_in"> or </span>Python 3 &gt;=3.4 downloaded from python.org<span class="built_in"> or </span>if you are working in a Virtual Environment created by virtualenv<span class="built_in"> or </span>venv. Just make sure to upgrade pip.</span><br><span class="line"></span><br><span class="line">Use the following command to<span class="built_in"> check </span>whether pip is installed:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Unix/macOS</span><br><span class="line"></span><br><span class="line">Windows</span><br><span class="line">C:\&gt; py -m pip --version</span><br><span class="line">pip X.Y.Z from ...\site-packages\pip (python X.Y)</span><br></pre></td></tr></table></figure>
<p>找到 <code>C:\Python39\Scripts</code> 路径，设置 <code>pip</code> 环境变量</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">py</span> -m pip --version</span><br><span class="line"><span class="attribute">pip</span> <span class="number">20</span>.<span class="number">2</span>.<span class="number">3</span> from C:\Python\Python<span class="number">39</span>\lib\site-packages\pip (python <span class="number">3</span>.<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> -V</span><br><span class="line"><span class="attribute">pip</span> <span class="number">20</span>.<span class="number">2</span>.<span class="number">3</span> from c:\python\python<span class="number">39</span>\lib\site-packages\pip (python <span class="number">3</span>.<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p><code>pip</code> 使用详解</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">pip安装包 <span class="symbol">:pip</span> install 所需安装包名字</span><br><span class="line">pip查看已安装的包: pip show --files 安装包名字</span><br><span class="line">pip检查哪些包需要更新<span class="symbol">:pip</span> list --outdate</span><br><span class="line">pip升级包<span class="symbol">:pip</span> install --upgrade 安装包名字</span><br><span class="line">pip卸载安装包<span class="symbol">:pip</span> uninstall  安装包名字</span><br></pre></td></tr></table></figure>
<h3 id="httpie-安装"><a href="#httpie-安装" class="headerlink" title="httpie 安装"></a><code>httpie</code> 安装</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">pip install <span class="comment">--upgrade httpie</span></span><br><span class="line">Collecting httpie</span><br><span class="line">  Downloading httpie<span class="number">-2.4</span><span class="number">.0</span>-py3-<span class="keyword">none</span>-<span class="keyword">any</span>.whl (<span class="number">74</span> kB)</span><br><span class="line">     |████████████████████████████████| <span class="number">74</span> kB <span class="number">297</span> kB/s</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">WARNING</span>: You are <span class="keyword">using</span> pip <span class="keyword">version</span> <span class="number">20.2</span><span class="number">.3</span>; however, <span class="keyword">version</span> <span class="number">21.1</span><span class="number">.1</span> <span class="keyword">is</span> available.</span><br><span class="line">You should consider upgrading via the <span class="string">&#x27;c:\python\python39\python.exe -m pip install --upgrade p</span></span><br><span class="line"><span class="string">ip&#x27;</span> command.</span><br></pre></td></tr></table></figure>
<p>这里警告，用 <code>python -m pip install --upgrade httpie</code>，不过这样也安装成功了<br>使用 <code>httpie</code></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span> http://localhost:<span class="number">8080</span>/test/</span><br><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span></span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">44</span></span><br><span class="line"><span class="attribute">Content</span>-Type: text/plain;charset=UTF-<span class="number">8</span></span><br><span class="line"><span class="attribute">Date</span>: Sat, <span class="number">01</span> May <span class="number">2021</span> <span class="number">09</span>:<span class="number">57</span>:<span class="number">25</span> GMT</span><br><span class="line"></span><br><span class="line"><span class="attribute">service</span>: demo.generator.ServiceImpl@<span class="number">5</span>ada<span class="number">344</span>b</span><br></pre></td></tr></table></figure>
<p>跟 <code>curl</code> 对比</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span>  http://localhost:<span class="number">8080</span>/test/</span><br><span class="line"><span class="attribute">service</span>: demo.generator.ServiceImpl@<span class="number">7</span>a<span class="number">2</span>e<span class="number">4</span>ad</span><br></pre></td></tr></table></figure>
<p><code>post</code> 请求，<code>1.txt</code> 为 入参的 <code>json</code> 格式文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span> http://localhost:<span class="number">8080</span>/ &lt; C:<span class="number">1</span>.txt</span><br><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span></span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">6</span></span><br><span class="line"><span class="attribute">Content</span>-Type: application/json;charset=UTF-<span class="number">8</span></span><br><span class="line"><span class="attribute">Date</span>: Sat, <span class="number">01</span> May <span class="number">2021</span> <span class="number">22</span>:<span class="number">03</span>:<span class="number">05</span> GMT</span><br><span class="line"></span><br><span class="line"><span class="attribute">kangan</span></span><br></pre></td></tr></table></figure>
<h3 id="HTTPie-使用详解"><a href="#HTTPie-使用详解" class="headerlink" title="HTTPie 使用详解"></a>HTTPie 使用详解</h3><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><code>httpie</code> 是一个命令形式的<code>http</code>客户端，它提供了简单的<code>http</code>命令，返回带高亮的结果信息，可以很方便的在<code>http</code>交互场景下进行测试、调试等。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">http [<span class="keyword">flags</span>] [<span class="function"><span class="keyword">METHOD</span>] <span class="title">URL</span> [<span class="title">ITEM</span> [<span class="title">ITEM</span>]]</span></span><br><span class="line"><span class="function"><span class="title">METHOD</span>没有指定时，默认为 <span class="title">get</span></span></span><br><span class="line"><span class="function"><span class="title">URL</span>协议没有指定时，默认为 <span class="title">http</span>:</span><span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a><code>GET</code></h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">http</span> <span class="built_in">get</span> 请求url</span><br><span class="line">请求 `url`带参数 :<span class="keyword">http</span> 请求url <span class="built_in">param</span>==<span class="built_in">value</span></span><br></pre></td></tr></table></figure>
<h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="built_in">post</span>请求时表单用 = ，默认为<span class="built_in">post</span>：<span class="keyword">http</span> 请求url <span class="built_in">param</span>=<span class="built_in">value</span></span><br><span class="line"><span class="number">2.</span>传递json: 可以直接传一个json类型文件，用 =@ 和 :=G，<span class="keyword">http</span> 请求url <span class="built_in">param</span>=@C:\<span class="number">1.</span>txt</span><br><span class="line"><span class="number">3.</span>重定向传json：<span class="keyword">http</span> 请求url &lt; C:\<span class="number">1.</span>txt</span><br></pre></td></tr></table></figure>
<h3 id="更多参考-https-github-com-httpie-httpie"><a href="#更多参考-https-github-com-httpie-httpie" class="headerlink" title="更多参考 https://github.com/httpie/httpie"></a>更多参考 <a href="https://github.com/httpie/httpie">https://github.com/httpie/httpie</a></h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Custom HTTP method, HTTP headers <span class="keyword">and</span> JSON data:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> PUT pie.dev/<span class="built_in">put</span> X-API-Token:<span class="number">123</span> name=John</span><br><span class="line">Submitting forms:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> -f POST pie.dev/<span class="built_in">post</span> hello=World</span><br><span class="line">See <span class="keyword">the</span> request that is being sent <span class="keyword">using</span> <span class="literal">one</span> <span class="keyword">of</span> <span class="keyword">the</span> output options:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> -v pie.dev/<span class="built_in">get</span></span><br><span class="line">Build <span class="keyword">and</span> print <span class="keyword">a</span> request <span class="keyword">without</span> sending <span class="keyword">it</span> <span class="keyword">using</span> offline mode:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--offline pie.dev/post hello=offline</span></span><br><span class="line">Use GitHub API <span class="built_in">to</span> <span class="built_in">post</span> <span class="keyword">a</span> comment <span class="keyword">on</span> <span class="title">an</span> <span class="title">issue</span> <span class="title">with</span> <span class="title">authentication</span>:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> -<span class="keyword">a</span> USERNAME POST <span class="keyword">https</span>://api.github.com/repos/httpie/httpie/issues/<span class="number">83</span>/comments body=<span class="string">&#x27;HTTPie is awesome! :heart:&#x27;</span></span><br><span class="line">Upload <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">using</span> redirected input:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> pie.dev/<span class="built_in">post</span> &lt; <span class="built_in">files</span>/data.json</span><br><span class="line">Download <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">and</span> save <span class="keyword">it</span> via redirected output:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> pie.dev/image/png &gt; image.png</span><br><span class="line">Download <span class="keyword">a</span> <span class="built_in">file</span> wget style:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--download pie.dev/image/png</span></span><br><span class="line">Use named sessions <span class="built_in">to</span> make certain aspects <span class="keyword">of</span> <span class="keyword">the</span> communication persistent between requests <span class="built_in">to</span> <span class="keyword">the</span> same host:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--session=logged-in -a username:password pie.dev/get API-Key:123</span></span><br><span class="line">$ <span class="keyword">http</span> <span class="comment">--session=logged-in pie.dev/headers</span></span><br><span class="line">Set <span class="keyword">a</span> custom Host header <span class="built_in">to</span> work around missing DNS records:</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">http</span> localhost:<span class="number">8000</span> Host:example.com</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator Mybatis</title>
    <url>/2021/04/24/generator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1363948882&auto=1&height=66"></iframe>
<span id="more"></span>

<p>上一篇介绍自己写<code>XML</code>模板的文章，日常开发迭代快，可能需要高效的完成 <code>CRUD</code>。这里简单介绍两种常见的生成 <code>Mapper接口</code> <code>Model模型</code> <code>MapperXML</code> 。<br>首先建一个简单的工程 <code>mybatis-demo</code>，<code>pom.xml</code> 文件引入相关组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接着在<code>resources</code> 文件新建 <code>mybatis.xml</code> 配置生成规则，这里注意<code>XML</code>中的<code>&amp;</code>需要转义<code>&amp;amp;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 本地数据库驱动程序jar包的全路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:/Users/康盼Java开发工程师/.m2/repository/mysql/mysql-connector-java/8.0.15/mysql-connector-java-8.0.15.jar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;context&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--定义生成的java类的编码格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 数据库的相关配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/kangpan?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useAffectedRows=true&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 实体类生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- *Mapper.xml 文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mapper 接口文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 相关表的配置   tableName 表名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_user&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;true&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;true&quot;</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ignoreQualifiersAtRuntime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>点击<code>IDEA</code> 右侧栏里面的 <code>Maven -&gt; Plugins </code>双击运行。<br>第二种方式，直接上代码 <code>pom</code> 文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>resources</code> 中新建 <code>generatorConfig.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- classPathEntry:数据库的JDBC驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:/Users/康盼Java开发工程师/.m2/repository/mysql/mysql-connector-java/8.0.15/mysql-connector-java-8.0.15.jar&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DBTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.FluentBuilderMethodsPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.RowBoundsPlugin&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 去除自动生成的注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/kangpan?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useAffectedRows=true&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成model代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成mappers代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/resources/mapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:自动生成dao代码的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;MIXEDMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;demo.generator.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">&quot;./src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName:用于自动生成代码的数据库表;domainObjectName:对应于数据库表的javaBean类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_coffee&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Coffee&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动类中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       mybatisGenerator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mybatisGenerator</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ConfigurationParser configurationParser = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">        Configuration configuration = configurationParser</span><br><span class="line">                .parseConfiguration(<span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">&quot;/generatorConfig.xml&quot;</span>));</span><br><span class="line">        DefaultShellCallback defaultShellCallback = <span class="keyword">new</span> DefaultShellCallback(<span class="keyword">true</span>);</span><br><span class="line">        MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(configuration, defaultShellCallback, warnings);</span><br><span class="line">        myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>pom</code> 文件引入了 <code>mybatis-spring-boot-starter</code>组件，需要在<code>application.properties</code>文件中配置数据源</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/kangpan?useSSL=<span class="literal">false</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line">spring.datasource.password=</span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=classpath*:/mapper/**/*.xml</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>junitperf</title>
    <url>/2021/04/14/junitperf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>pom </code>文件引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.houbb/junitperf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.houbb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junitperf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>测试 <code>stringBuilder </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JunitPerfConfig( warmUp = 1000, reporter = &#123;HtmlReporter.class, ConsoleReporter.class&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            stringBuilder.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下  <code>JunitPerfConfig </code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JunitPerfConfig &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threads</span><span class="params">()</span> <span class="keyword">default</span> 1</span>; <span class="comment">// 执行时使用多少线程执行</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">warmUp</span><span class="params">()</span> <span class="keyword">default</span> 0L</span>; <span class="comment">// 准备时间 （单位：毫秒）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">duration</span><span class="params">()</span> <span class="keyword">default</span> 60000L</span>; <span class="comment">// 执行时间 (单位：毫秒)  (不包括准备时间) 默认值1分钟</span></span><br><span class="line"></span><br><span class="line">    Class&lt;? extends StatisticsCalculator&gt; statistics() <span class="keyword">default</span> DefaultStatisticsCalculator.class; <span class="comment">// 统计信息</span></span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Reporter&gt;[] reporter() <span class="keyword">default</span> &#123;ConsoleReporter.class&#125;; <span class="comment">// 报告信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考 <a href="https://github.com/houbb/junitperf">junitperf</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+prometheus+grafana</title>
    <url>/2021/04/14/springboot+prometheus+grafana/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安利一款好用的谷歌<code>json</code>格式化插件 <code>jsonview</code>，地址 <a href="https://jsonview.com/">https://jsonview.com/</a><br>搭建 <code>springboot</code> 项目 引入 <code>actuator</code> 组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p> <code>actuator</code> 目的：监控并管理应用程序，详情见官方文档 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready</a></p>
<p>一些常用的 <code>Endpoint</code></p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">说明</th>
<th align="center">默认开启</th>
<th align="center">默认HTTP</th>
<th align="center">默认JMX</th>
</tr>
</thead>
<tbody><tr>
<td align="center">beans</td>
<td align="center">显示容器的Bean</td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">health</td>
<td align="center">显示健康信息</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">info</td>
<td align="center">应用信息</td>
<td align="center">Y</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
<tr>
<td align="center">cache</td>
<td align="center">应用缓存</td>
<td align="center">Y</td>
<td align="center">N</td>
<td align="center">Y</td>
</tr>
</tbody></table>
<p><code>application.properties</code> 配置打开所有监控</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">management<span class="selector-class">.endpoints</span><span class="selector-class">.web</span><span class="selector-class">.exposure</span>.include=*</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8080/actuator/health</code> 打印</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">status:</span> <span class="string">&quot;UP&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进入 安装的<code>JDK/bin</code> 目录 ，<code>cmd</code> 输入 <code>jconsole</code> 可以看到 <code>Actuator EndPoint</code> 信息<br><code>Spring boot</code> 健康检查 通过实现 <code>HealthIndicator</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HealthIndicator</span> <span class="keyword">extends</span> <span class="title">HealthContributor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> Health <span class="title">getHealth</span><span class="params">(<span class="keyword">boolean</span> includeDetails)</span> </span>&#123;</span><br><span class="line">		Health health = health();</span><br><span class="line">		<span class="keyword">return</span> includeDetails ? health : health.withoutDetails();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Health <span class="title">health</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子 数据库的健康检查 <code>DataSourceHealthIndicator</code> 类，构造的时候传入  <code>DataSource</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DataSourceHealthIndicator</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(dataSource, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>健康检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">		builder.up().withDetail(<span class="string">&quot;database&quot;</span>, <span class="string">&quot;unknown&quot;</span>); <span class="comment">// 没有数据库 就当是健康的 并提示 unknown</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		doDataSourceHealthCheck(builder);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>doDataSourceHealthCheck</code> 方法判断当前数据库健康状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDataSourceHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	String product = getProduct(); <span class="comment">// 什么数据库</span></span><br><span class="line">	builder.up().withDetail(<span class="string">&quot;database&quot;</span>, product);</span><br><span class="line">	String validationQuery = getValidationQuery(product);</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// Avoid calling getObject as it breaks MySQL on Java 7</span></span><br><span class="line">		List&lt;Object&gt; results = <span class="keyword">this</span>.jdbcTemplate.query(validationQuery, <span class="keyword">new</span> SingleColumnRowMapper()); <span class="comment">// 通过 jdbcTemplate 查询</span></span><br><span class="line">		Object result = DataAccessUtils.requiredSingleResult(results); <span class="comment">// 取得结果</span></span><br><span class="line">		builder.withDetail(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">finally</span> &#123;</span><br><span class="line">		builder.withDetail(<span class="string">&quot;validationQuery&quot;</span>, validationQuery);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现自己程序的健康状态 定义 <code>HealthIndicatorTest</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthIndicatorTest</span> <span class="keyword">implements</span> <span class="title">HealthIndicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Health <span class="title">health</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这里根据你的业务逻辑去判断</span></span><br><span class="line">        map.put(<span class="string">&quot;血压&quot;</span>,<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;体重&quot;</span>,<span class="number">120</span>);</span><br><span class="line">        <span class="keyword">return</span> Health.up().withDetails(map).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8080/actuator/health</code> 查看结果</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">healthIndicatorTest:</span> &#123;</span><br><span class="line"><span class="symbol">status:</span> <span class="string">&quot;UP&quot;</span>,</span><br><span class="line"><span class="symbol">details:</span> &#123;</span><br><span class="line">  体重: <span class="number">120</span>,</span><br><span class="line">  血压: <span class="string">&quot;正常&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面通过 <code>Actuator Health</code> 了解程序是否健康，在程序中还需要收集更多的度量指标，比如操作系统 或者 JVM、业务指标 等，通过 <code>Micrometer</code> 收集这些信息，官方网站 <a href="https://micrometer.io/">https://micrometer.io/</a> ，应用在 <code>Spring Boot</code>， 查看文档  <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics</a></p>
<p>利用 <code>Micrometer</code> 后端埋点 统计接口请求次数<br><code>pom</code> 引入组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建 <code>Test</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">MeterBinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        counter.increment(); <span class="comment">// 埋点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindTo</span><span class="params">(MeterRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="keyword">this</span>.counter = registry.counter(<span class="string">&quot;counter.number&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器 输入 <code>http://localhost:8081/test/</code> 请求服务<br>输入 <code>http://localhost:8081/actuator/metrics/counter.number</code> 查看请求次数<br> <figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;counter.number&quot;</span>,</span><br><span class="line"><span class="symbol">description:</span> null,</span><br><span class="line"><span class="symbol">baseUnit:</span> null,</span><br><span class="line"><span class="symbol">measurements:</span> [</span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">statistic:</span> <span class="string">&quot;COUNT&quot;</span>,</span><br><span class="line"><span class="symbol">value:</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="symbol">availableTags:</span> [ ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> <code>windows</code> 安装 <code>grafana</code> ，地址 ： <a href="https://grafana.com/grafana/download?platform=windows">https://grafana.com/grafana/download?platform=windows</a><br>安装之后，打开 <code>\grafana\conf</code> 文件 查看配置</p>
<ul>
<li>默认配置文件是在/conf/defaults.ini</li>
<li>用户配置文件是在/conf/custom.ini<br>更改 端口<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">http_port</span> = <span class="number">8888</span></span><br></pre></td></tr></table></figure>
更改 账号密码<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">security</span>]</span><br><span class="line"></span><br><span class="line"># <span class="keyword">default</span> <span class="keyword">admin</span> <span class="keyword">user</span>, created <span class="keyword">on</span> startup</span><br><span class="line">admin_user = <span class="keyword">admin</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">default</span> <span class="keyword">admin</span> <span class="keyword">password</span>, can be changed <span class="keyword">before</span> first <span class="keyword">start</span> <span class="keyword">of</span> grafana, <span class="keyword">or</span> <span class="keyword">in</span> profile settings</span><br><span class="line">admin_password = <span class="keyword">admin</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>进入目录 <code>grafana\bin</code> 运行 <code>grafana-server.exe</code><br>浏览器输入 <code>http://localhost:8888/</code> ，输入 <code>admin admin</code></p>
<p> <code>windows</code> 安装 <code>prometheus</code> ，地址 ：<a href="https://prometheus.io/download/">https://prometheus.io/download/</a><br>配置 任务和实例，打开 <code>prometheus.yml</code> 文件，详情见 <a href="https://www.prometheus.wang/quickstart/prometheus-job-and-instance.html">任务和实例</a></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">scrape_config<span class="variable">s:</span></span><br><span class="line">  # The job name <span class="keyword">is</span> added <span class="keyword">as</span> <span class="keyword">a</span> label `job=<span class="symbol">&lt;job_name&gt;</span>` <span class="keyword">to</span> any timeseries scraped from this config.</span><br><span class="line">  - job_name: <span class="string">&#x27;prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">    # metrics_path defaults <span class="keyword">to</span> <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">    # scheme defaults <span class="keyword">to</span> <span class="string">&#x27;http&#x27;</span>.</span><br><span class="line">    </span><br><span class="line">    metrics_path: <span class="string">&#x27;/actuator/prometheus&#x27;</span></span><br><span class="line"></span><br><span class="line">    static_config<span class="variable">s:</span></span><br><span class="line">    - target<span class="variable">s:</span> [<span class="string">&#x27;localhost:8080&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">  - job_name: <span class="string">&#x27;node&#x27;</span></span><br><span class="line"></span><br><span class="line">    # metrics_path defaults <span class="keyword">to</span> <span class="string">&#x27;/metrics&#x27;</span></span><br><span class="line">    # scheme defaults <span class="keyword">to</span> <span class="string">&#x27;http&#x27;</span>.</span><br><span class="line">    </span><br><span class="line">    static_config<span class="variable">s:</span></span><br><span class="line">    - target<span class="variable">s:</span> [<span class="string">&#x27;localhost:9182&#x27;</span>]</span><br></pre></td></tr></table></figure>


<p>浏览器输入 <code>http://localhost:9090/targets</code> ，<code>prometheus</code> 默认端口 <code>9090</code>，看到这两个实例都是 <code>down</code> 状态</p>
<p>了解下  <code>prometheus</code> 架构，<code>prometheus</code> 主要是通过定时拉取应用程序中暴露的时间序列进行工作的，可以在 <code>prometheus.yml</code> 文件配置 <code>Jobs/Exporters</code></p>
<p>为什么要监控应用程序的各个指标，推荐文章 <a href="https://www.infoq.cn/article/metrics-driven-development">度量驱动开发</a> 感兴趣的可以看下</p>
<p><code>springboot</code> 引入  <code>micrometer-jvm-extras</code> 组件，查看 JVM 相关信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.mweirauch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-jvm-extras<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动项目，看到 <code>springboot</code> 项目实例 状态是 <code>up</code></p>
<p>点击 <code>Endpoint</code> 可以看到 <code>JVM</code> 各项指标</p>
<p>通过 <code>grafana</code> 图形化展示，<code>JVM</code> 堆内存 进程内存  <code>HTTP</code>请求持续时间  详情见 <code>4701</code> 指标 </p>
<p><a href="https://grafana.com/grafana/dashboards">https://grafana.com/grafana/dashboards</a> </p>
<p>参考文章<br><a href="https://bigjar.github.io/2018/08/19/Spring-Boot-Actuator-%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E3%80%81%E5%AE%A1%E8%AE%A1%E3%80%81%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%9B%91%E6%8E%A7/">Spring Boot Actuator:健康检查、审计、统计和监控</a><br><a href="https://bigjar.github.io/2018/08/19/Spring-Boot-Metrics%E7%9B%91%E6%8E%A7%E4%B9%8BPrometheus-Grafana/">Spring Boot Metrics监控之Prometheus&amp;Grafana</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>原型 Bean 被固定</title>
    <url>/2021/04/28/%E5%8E%9F%E5%9E%8B-Bean-%E8%A2%AB%E5%9B%BA%E5%AE%9A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="原型-Bean-被固定"><a href="#原型-Bean-被固定" class="headerlink" title="原型 Bean 被固定"></a>原型 Bean 被固定</h3><p>明明定义的是多例<code>SCOPE_PROTOTYPE</code>，为啥每次服务请求打印的地址都是同一个呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入<code>http://localhost:8080/test</code> 打印的都是同一个地址 <code>service:demo.generator.ServiceImpl@3501ee32</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceImpl service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;test&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service:&quot;</span> + service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>当一个属性成员 <code>service</code> 声明为 <code>@Autowired</code> 后，那么在创建 <code>Controller</code> 这个 <code>Bean</code> 时，会先使用构造器反射出实例，然后来装配各个标记为 <code>@Autowired</code> 的属性成员（装配方法参考 <code>AbstractAutowireCapableBeanFactory #populateBean</code>）。具体到执行过程，它会使用很多 <code>BeanPostProcessor</code> 来做完成工作，其中一种是 <code>AutowiredAnnotationBeanPostProcessor</code>，它会通过 <code>DefaultListableBeanFactory#findAutowireCandidates</code> 寻找到 <code>ServiceImp</code> 类型的 <code>Bean</code>，然后设置给对应的属性（即 <code>service</code> 成员）。<br>关键执行步骤可参考 <code>AutowiredAnnotationBeanPostProcessor.AutowiredFieldElement#inject</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object bean, <span class="meta">@Nullable</span> String beanName, <span class="meta">@Nullable</span> PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">   Field field = (Field) <span class="keyword">this</span>.member;</span><br><span class="line">   Object value;</span><br><span class="line">   <span class="comment">//寻找“bean”</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.cached) &#123;</span><br><span class="line">      value = resolvedCachedArgument(beanName, <span class="keyword">this</span>.cachedFieldValue);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//省略其他非关键代码</span></span><br><span class="line">     value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//将bean设置给成员字段</span></span><br><span class="line">      ReflectionUtils.makeAccessible(field);</span><br><span class="line">      field.set(bean, value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>待我们寻找到要自动注入的 <code>Bean</code> 后，即可通过反射设置给对应的 <code>field</code>。这个<code>field</code> 的执行只发生了一次，所以后续就固定起来了，它并不会因为 <code>ServiceImpl</code> 标记了 <code>SCOPE_PROTOTYPE</code> 而改变。</p>
<p>所以，当一个单例的 <code>Bean</code>，使用 <code>autowired</code> 注解标记其属性时，（这里指单例的 <code>Controller</code> 这个 <code>Bean</code>），你一定要注意这个属性值 （这里指<code>service</code>）会被固定下来。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过上述源码分析，我们可以知道要修正这个问题，肯定是不能将 <code>ServiceImpl</code> 的 <code>Bean</code> 固定到属性上的，而应该是每次使用时都会重新获取一次。所以这里我提供了两种修正方式：</p>
<h4 id="自动注入-Context"><a href="#自动注入-Context" class="headerlink" title="自动注入 Context"></a>自动注入 <code>Context</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;test&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="string">&quot;service: &quot;</span> + getService();</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceImpl <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(ServiceImpl.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用-Lookup-注解"><a href="#使用-Lookup-注解" class="headerlink" title="使用 Lookup 注解"></a>使用 Lookup 注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;test&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;service:&quot;</span> + getService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lookup</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceImpl <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>在修正代码中，我们看到 <code>getService()</code> 方法的实现返回值是 null，这或许很难说服自己，为啥返回<code>null</code>可以生成新的实例对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lookup</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServiceImpl <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//下面的日志会输出么？</span></span><br><span class="line">    log.info(<span class="string">&quot;executing this method&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>以上代码，添加了一行代码输出日志。测试后，我们会发现并没有日志输出。<br>那它是怎么实现的呢，看下<code>CglibSubclassingInstantiationStrategy</code>的内部类<code>LookupOverrideMethodInterceptor</code>的 <code>intercept</code> 方法，这里省略了代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BeanFactory owner;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy mp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.owner.getBean(method.getReturnType())); <span class="comment">// 方法的返回类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>BeanFactory</code> 来获取 <code>Bean</code>，<code>getBean(method.getReturnType())</code>。当使用 <code>Lookup</code> 注解一个方法时，这个方法的具体实现已并不重要，里面代码随便怎么写都可以。</p>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>可以使用<code>scope</code>注解的<code>proxyMode</code>，设置成<code>target_class</code>，这样注入到<code>controller</code>的<code>bean</code>就是代理对象了，每次都会从<code>beanfactory</code>里面重新拿过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;prototype&quot;,proxyMode = ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Scope-注解说明"><a href="#Scope-注解说明" class="headerlink" title="Scope 注解说明"></a>Scope 注解说明</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Scope</span>(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE)这个是说在每次注入的时候回自动创建一个新的bean实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=ConfigurableBeanFactory.SCOPE_SINGLETON)单例模式，在整个应用中只能创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_GLOBAL_SESSION)全局session中的一般不常用</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_APPLICATION)在一个web应用中只创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_REQUEST)在一个请求中创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="variable">@Scope</span>(value=WebApplicationContext.SCOPE_SESSION)每次创建一个会话中创建一个实例</span><br><span class="line"></span><br><span class="line"><span class="built_in">`Scope`</span> 里面还有个属性</span><br><span class="line"></span><br><span class="line">proxyMode=ScopedProxyMode.INTERFACES创建一个JDK代理模式</span><br><span class="line"></span><br><span class="line">proxyMode=ScopedProxyMode.TARGET_CLASS基于类的代理模式</span><br><span class="line"></span><br><span class="line">proxyMode=ScopedProxyMode.NO（默认）不进行代理</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>java 8 Stream Tutoriala</title>
    <url>/2021/04/15/java-8-Stream-Tutoriala/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java学习网站 <a href="https://www.logicbig.com/">logicbig</a></p>
<p> <a href="https://www.logicbig.com/tutorials/core-java-tutorial/java-util-stream/stream-api-intro.html">java 8 Stream Tutoriala</a></p>
<p>介绍下几个常用的函数接口</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> Consumer&lt;T&gt; andThen(Consumer&lt;? <span class="keyword">super</span> T&gt; <span class="keyword">after</span>) &#123;</span><br><span class="line">        Objects.requireNonNull(<span class="keyword">after</span>);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Predicate&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">boolean</span> test(T t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="function"><span class="title">and</span>(<span class="params">Predicate&lt;? <span class="built_in">super</span> T&gt; other</span>)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="function"><span class="title">negate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="function"><span class="title">or</span>(<span class="params">Predicate&lt;? <span class="built_in">super</span> T&gt; other</span>)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="function"><span class="title">isEqual</span>(<span class="params"><span class="built_in">Object</span> targetRef</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : <span class="built_in">object</span> -&gt; targetRef.equals(<span class="built_in">object</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface <span class="built_in">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line">    R apply(T t);</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="built_in">Function</span>&lt;V, R&gt; compose(<span class="built_in">Function</span>&lt;? <span class="built_in">super</span> V, ? <span class="keyword">extends</span> T&gt; before) &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">(V v)</span> -&gt;</span> apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="built_in">Function</span>&lt;T, V&gt; andThen(<span class="built_in">Function</span>&lt;? <span class="built_in">super</span> R, ? <span class="keyword">extends</span> V&gt; after) &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">(T t)</span> -&gt;</span> after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="built_in">Function</span>&lt;T, T&gt; identity() &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p> <code>Predicate</code>的运用，可以组合条件筛选数据，可以去重等</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> Predicate&lt;<span class="keyword">String</span>&gt;</span><br><span class="line">            p1 = s -&gt; s.<span class="built_in">contains</span>(<span class="string">&quot;bar&quot;</span>),</span><br><span class="line">            p2 = s -&gt; s.<span class="built_in">length</span>() &lt; <span class="number">5</span>,</span><br><span class="line">            p3 = s -&gt; s.<span class="built_in">contains</span>(<span class="string">&quot;foo&quot;</span>),</span><br><span class="line">            p4 = p1.<span class="built_in">negate</span>().<span class="built_in"><span class="keyword">and</span></span>(p2).<span class="built_in"><span class="keyword">or</span></span>(p3);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Stream</span>.<span class="built_in">of</span>(<span class="string">&quot;bar&quot;</span>,<span class="string">&quot;foobar&quot;</span>,<span class="string">&quot;barBaz&quot;</span>).<span class="built_in">filter</span>(p4).forEach(System.out::println); <span class="comment">// 打印 foobar</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;Bean&gt; list = Lists.newArrayList(<span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>),<span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>),<span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="built_in">String</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="function"><span class="title">distinct</span>(<span class="params"><span class="built_in">Function</span>&lt;? <span class="built_in">super</span> T,?&gt; <span class="keyword">function</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">Object</span>&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> t -&gt; set.add(<span class="keyword">function</span>.apply(t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        list.stream().filter(distinct(Bean::getName)).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Function</code> 的运用，如求正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积<code>function(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>，斐波那契数列 <code>0、1、1、2、3、5、8、13、21、34</code>，柯里化等</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    static <span class="keyword">Function</span>&lt;<span class="type">Integer</span>, <span class="type">Integer</span>&gt; <span class="keyword">function</span>;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">         <span class="keyword">function</span> = n -&gt; n == <span class="number">0</span> ? <span class="number">1</span> : n * <span class="keyword">function</span>.apply(n - <span class="number">1</span>);</span><br><span class="line">         IntStream.range(<span class="number">0</span>,<span class="number">10</span>).<span class="keyword">forEach</span>(i -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply(i)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    static <span class="keyword">Function</span>&lt;<span class="type">Integer</span>, <span class="type">Integer</span>&gt; <span class="keyword">function</span>;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">         <span class="keyword">function</span> = n -&gt; n == <span class="number">0</span> ? <span class="number">0</span> : n == <span class="number">1</span> ? <span class="number">1</span> : <span class="keyword">function</span>.apply(n - <span class="number">1</span>) + <span class="keyword">function</span>.apply(n - <span class="number">2</span>);</span><br><span class="line">         IntStream.range(<span class="number">0</span>,<span class="number">10</span>).<span class="keyword">forEach</span>(i -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">function</span>.apply(i)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> Function&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; f1 = s -&gt; s.<span class="built_in">toLowerCase</span>(),</span><br><span class="line">    f2 = s -&gt; s.<span class="built_in">replaceAll</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>),f3 = f1.<span class="built_in">andThen</span>(f2),f4= f1.<span class="built_in">compose</span>(f2);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(f3.<span class="built_in">apply</span>(<span class="string">&quot;A&quot;</span>)); <span class="comment">// a</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(f4.<span class="built_in">apply</span>(<span class="string">&quot;A&quot;</span>)); <span class="comment">// b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">Function</span>&lt;<span class="built_in">String</span>, <span class="built_in">Function</span>&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt;&gt; f = a -&gt; b -&gt; a + b;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        System.out.println(f.apply(<span class="string">&quot;hello&quot;</span>).apply(<span class="string">&quot;java&quot;</span>)); <span class="comment">// hello java</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Supplier</code> 的运用，如反射实例化对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySupplier</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; <span class="keyword">type</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">MySupplier</span>(<span class="params">Class&lt;T&gt; <span class="keyword">type</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = <span class="keyword">type</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span>.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Supplier&lt;T&gt; <span class="function"><span class="title">newInstance</span>(<span class="params">Class&lt;T&gt; <span class="keyword">type</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MySupplier&lt;&gt;(<span class="keyword">type</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">       Bean bean = newInstance(Bean.class).get(); <span class="comment">// 无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="title">implements</span> <span class="title">Supplier</span>&lt;</span>Integer&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> item;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Stream</span>.<span class="built_in">generate</span>(<span class="keyword">new</span> <span class="built_in">Test</span>()).<span class="built_in">limit</span>(<span class="number">10</span>).forEach(System.out::println); <span class="comment">// 0~9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举一些比较冷门的例子<br><code> merge</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        HashMap&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; <span class="keyword">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.merge<span class="function"><span class="params">(<span class="string">&quot;k&quot;</span>,<span class="string">&quot;v&quot;</span>,(oldV,newV) -&gt; oldV.concat(newV))</span>;</span></span><br><span class="line"><span class="function">        <span class="title">map</span>.<span class="title">entrySet</span><span class="params">()</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>reduce</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        HashMap&lt;<span class="built_in">String</span>,<span class="built_in">String</span>&gt; <span class="keyword">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        <span class="keyword">map</span>.put(<span class="string">&quot;k2&quot;</span>,<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        <span class="built_in">String</span> result = <span class="keyword">map</span>.entrySet<span class="function"><span class="params">()</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">map</span><span class="params">(<span class="built_in">Map</span>.Entry::getKey)</span>.<span class="title">reduce</span><span class="params">((k1,k2) -&gt; k1.concat(k2))</span>.<span class="title">get</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(result)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Collectors.mapping</code> 下游收集器，对姓名进行分组，然后收集<code>count</code>最大的数据</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.<span class="built_in">newArrayList</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Bean</span>(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Optional&lt;Integer&gt;&gt; map =  list</span><br><span class="line">                .<span class="built_in">stream</span>()</span><br><span class="line">                .<span class="built_in">collect</span>(Collectors.<span class="built_in">groupingBy</span>(Bean::getName,</span><br><span class="line">                        Collectors.<span class="built_in">mapping</span>(Bean::getCount,Collectors.<span class="built_in">maxBy</span>(</span><br><span class="line">                        Comparator.<span class="built_in">comparing</span>(Function.<span class="built_in">identity</span>())))));</span><br><span class="line">        System.out.<span class="built_in">println</span>(map.<span class="built_in">get</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// 200</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(map.<span class="built_in">get</span>(<span class="string">&quot;c&quot;</span>)); <span class="comment">// 200</span></span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> &#123;</span></span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>collectingAndThen</code> 下游收集器 ，对名字进行分组，然后收集最大的 <code>count</code> 数据，并取得最大的结果，<br> <code>collectingAndThen</code> 是为了对分组的数据进一步处理，而 <code>Collectors.mapping</code> 和 <code>.map</code> 类似，是对数据的一种转换，映射，看下面第二个例子， <code>collectingAndThen</code>  和 <code>toMap</code> 类似，看下面第三个例子</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.<span class="keyword">new</span><span class="type">ArrayList</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Integer&gt; map =  list</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.groupingBy(Bean:<span class="type"></span>:getName,</span><br><span class="line">                        Collectors.collectingAndThen(Collectors.mapping(Bean:<span class="type"></span>:getCount,Collectors.maxBy(Comparator.comparing(Function.identity()))),Optional:<span class="type"></span>:<span class="keyword">get</span>)));</span><br><span class="line">        map.entrySet().forEach(System.out:<span class="type"></span>:println); <span class="comment">// 打印 a=200 c=200</span></span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果和 <code>list.stream().map(Bean::getCount).collect(Collectors.toList());</code> 一样</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.newArrayList(</span><br><span class="line">                <span class="built_in">new</span> Bean(&quot;a&quot;,<span class="number">100</span>),</span><br><span class="line">                <span class="built_in">new</span> Bean(&quot;a&quot;,<span class="number">200</span>),</span><br><span class="line">                <span class="built_in">new</span> Bean(&quot;c&quot;,<span class="number">200</span>));</span><br><span class="line">        Collector&lt;Bean,<span class="type">Integer</span>,List&lt;<span class="type">Integer</span>&gt;&gt; collector = (Collector&lt;Bean, <span class="type">Integer</span>, List&lt;<span class="type">Integer</span>&gt;&gt;) Collectors.<span class="keyword">mapping</span>(Bean::getCount,Collectors.toList());</span><br><span class="line">        List&lt;<span class="type">Integer</span>&gt; <span class="keyword">temp</span> = list.stream().collect(collector);</span><br><span class="line">        <span class="keyword">temp</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    static <span class="keyword">class</span> Bean &#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        String <span class="type">name</span>;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="type">Integer</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Bean&gt; <span class="keyword">list</span> = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">      Map&lt;<span class="keyword">String</span>,<span class="keyword">Integer</span>&gt; map = <span class="keyword">list</span>.stream().collect(Collectors.toMap(Bean::getName,Bean::getCount,<span class="keyword">Integer</span>::max));</span><br><span class="line">      map.entrySet().stream().<span class="keyword">forEach</span>(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="built_in">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">Integer</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Collectors.partitioningBy</code> 条件分组，满足条件为 <code>true</code>，举个例子</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">Boolean</span>, List&lt;Bean&gt;&gt; map =</span><br><span class="line">              list.stream().collect(Collectors.partitioningBy(bean -&gt; bean.getCount() &gt; <span class="number">100</span>,</span><br><span class="line">                      Collectors.mapping(<span class="built_in">Function</span>.identity(),Collectors.toList())));</span><br><span class="line">    map.entrySet().stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="built_in">String</span> name;</span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台打印</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span>=[Test.Bean(<span class="attribute">name</span>=a, <span class="attribute">count</span>=100)]</span><br><span class="line"><span class="literal">true</span>=[Test.Bean(<span class="attribute">name</span>=a, <span class="attribute">count</span>=200), Test.Bean(<span class="attribute">name</span>=c, <span class="attribute">count</span>=200)]</span><br></pre></td></tr></table></figure>
<p><code>Collectors.reducing</code>  对名字进行分组，然后收集最大的 <code>count</code> 数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Bean&gt; <span class="keyword">list</span> = Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> Bean(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        BinaryOperator&lt;<span class="keyword">Integer</span>&gt; beanBinaryOperator = BinaryOperator.maxBy(<span class="keyword">Integer</span>::compareTo);</span><br><span class="line">            Map&lt;<span class="keyword">String</span>,<span class="keyword">Integer</span>&gt; map  =  <span class="keyword">list</span>.stream().collect(Collectors.groupingBy(Bean::getName,Collectors.reducing(<span class="number">0</span>,Bean::getCount,beanBinaryOperator)));</span><br><span class="line">        map.entrySet().stream().<span class="keyword">forEach</span>(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="built_in">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">Integer</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span>=<span class="number">200</span></span><br><span class="line"><span class="attr">c</span>=<span class="number">200</span></span><br></pre></td></tr></table></figure>


<p><code>Collector.of()</code>  看下部分源码，<code>supplier</code> 提供者<code>A</code>，一般是提供操作的容器，元素等工具，<code>accumulator</code> 是 <code>A</code> 对 <code>T</code> 元素进行一个操作，<code>combiner</code> 是<code>A</code>对 <code>T</code> 操作的结果进行一个合并，<code>finisher</code> 将 <code>A</code> 进行转换返回结果 <code>R</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span><span class="operator">&lt;</span><span class="type">T</span>, <span class="type">A</span>, <span class="type">R</span><span class="operator">&gt;</span> <span class="type">Collector</span>&lt;<span class="type">T</span>, <span class="type">A</span>, <span class="type">R</span>&gt; of(<span class="type">Supplier</span>&lt;<span class="type">A</span>&gt; supplier,</span><br><span class="line">                                             <span class="type">BiConsumer</span>&lt;<span class="type">A</span>, <span class="type">T</span>&gt; accumulator,</span><br><span class="line">                                             <span class="type">BinaryOperator</span>&lt;<span class="type">A</span>&gt; combiner,</span><br><span class="line">                                             <span class="type">Function</span>&lt;<span class="type">A</span>, <span class="type">R</span>&gt; finisher</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        List&lt;Bean&gt; list = Lists.<span class="keyword">new</span><span class="type">ArrayList</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;a&quot;</span>,<span class="number">200</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">Bean</span>(<span class="string">&quot;c&quot;</span>,<span class="number">200</span>));</span><br><span class="line">        Collector&lt;Bean,StringJoiner,<span class="keyword">String</span>&gt; collector = Collector.of(</span><br><span class="line">                () -&gt; <span class="keyword">new</span> <span class="type">StringJoiner</span>(<span class="string">&quot;,&quot;</span>),</span><br><span class="line">                (stringJoiner,bean) -&gt; stringJoiner.add(bean.getName()),</span><br><span class="line">                StringJoiner:<span class="type"></span>:merge,</span><br><span class="line">                StringJoiner:<span class="type"></span>:toString</span><br><span class="line">        );</span><br><span class="line">        System.out.println(list.stream().collect(collector));</span><br><span class="line">    &#125;</span><br><span class="line">    @Data</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        @NonNull</span><br><span class="line">        <span class="keyword">String</span> name;</span><br><span class="line">        @NonNull</span><br><span class="line">        Integer count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考</p>
<p> <a href="https://winterbe.com/posts/2014/03/16/java-8-tutorial/">java-8-tutorial</a><br><a href="https://www.kancloud.cn/hanxt/javacrazy/">恕我直言：你可能真的不会java编程</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2021/04/21/mybatis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1807381939&auto=1&height=66"></iframe>
 <span id="more"></span>

<p>项目中<code>CRUD</code>，写好<code>XML</code>很重要<br>个人经常使用的模板</p>
<ul>
<li>定义全属性的 <code>ResultMap</code></li>
<li>使用 <code>&lt;sql&gt;&lt;/sql&gt;</code> 抽离片段<br><code>&lt;include&gt;&lt;/include&gt;</code> 重复使用 <ul>
<li>表名 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;tableName&quot;</span>&gt;</span></span><br><span class="line">    表名</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>order by 条件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;condition&quot;</span>&gt;</span></span><br><span class="line">    表字段</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>表字段<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;sql <span class="built_in">id</span>=<span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">    <span class="built_in">id</span>,</span><br><span class="line">    <span class="built_in">name</span>,</span><br><span class="line">    ...</span><br><span class="line">    表字段</span><br><span class="line">&lt;/sql&gt;</span><br></pre></td></tr></table></figure></li>
<li>表字段赋值<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;allValues&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    #</span><span class="template-variable">&#123;id,jdbcType = BIGINT&#125;</span><span class="xml">,...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>主键赋值<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;uniquekeyField&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    #</span><span class="template-variable">&#123;id,jdbcType = BIGINT&#125;</span><span class="xml">；</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>条件赋值<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;setValues&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        id = #</span><span class="template-variable">&#123;id,jdbcType = BIGINT&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">   ...</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>搜索条件赋值 <code>prefixOverrides</code> 当第一个条件不满足，自动去除<code>AND 或者 OR</code>  <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">sql</span> id = &quot;searchFields&quot;&gt;</span><br><span class="line">    trim prefix=&quot;where&quot; prefixOverrides=&quot;and|or&quot;&gt;  </span><br><span class="line">        &lt;<span class="keyword">if</span> test=&quot;name!=null&quot;&gt;  </span><br><span class="line">            <span class="keyword">AND</span> <span class="type">name</span> <span class="keyword">like</span> concat(<span class="string">&#x27;%&#x27;</span>,#&#123;<span class="type">name</span>,jdbcType=<span class="type">VARCHAR</span>&#125;,<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">    &lt;/trim&gt;  </span><br><span class="line">&lt;/<span class="keyword">sql</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>分页查询<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id = <span class="string">&quot;findByPage&quot;</span> resultMap = <span class="string">&quot;resultMap&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span> /&gt;</span><br><span class="line">    <span class="keyword">from</span> 表名</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;searchFields&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">limit</span> #&#123;开始&#125;,#&#123;分页大小&#125;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>查询数量<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id = <span class="string">&quot;findByCount&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> 表名</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;searchFields&quot;</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>查询所有字段<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;findAllFields&quot;</span>&gt;</span><br><span class="line">   <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">   <span class="keyword">from</span> 表名</span><br><span class="line">   &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allValues&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>根据 <code>id</code> 查询，复用 <code>uniquekeyField</code> <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;findById&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量查询<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=<span class="string">&quot;batchSelect&quot;</span> resultType=<span class="string">&quot;&quot;</span> parameterType=<span class="string">&quot;java.util.List&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">from</span> 表名 </span><br><span class="line">        &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">           id <span class="keyword">in</span></span><br><span class="line">            &lt;<span class="built_in">trim</span> prefix=<span class="string">&quot;(&quot;</span> suffix=<span class="string">&quot;)&quot;</span>&gt;</span><br><span class="line">                &lt;foreach <span class="keyword">collection</span>=<span class="string">&quot;list&quot;</span> item=<span class="string">&quot;item&quot;</span>  <span class="keyword">index</span>=<span class="string">&quot;index&quot;</span>  separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">                    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line">                &lt;/foreach&gt;</span><br><span class="line">            &lt;/<span class="built_in">trim</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> &lt;<span class="keyword">include</span> refid = <span class="string">&quot;condition&quot;</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">select</span> id=&quot;findByArray&quot; parameterType=&quot;Object[]&quot; resultType=&quot;&quot;&gt;</span><br><span class="line">      <span class="keyword">select</span> &lt;<span class="keyword">include</span> refid = &quot;allFields&quot;&gt;</span><br><span class="line">      <span class="keyword">from</span> 表名</span><br><span class="line">        &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">          &lt;<span class="keyword">if</span> test=&quot;array!=null&quot;&gt;</span><br><span class="line">              &lt;<span class="keyword">foreach</span> collection=&quot;array&quot; <span class="keyword">index</span>=&quot;index&quot; item=&quot;item&quot;</span><br><span class="line">                           <span class="keyword">open</span>=&quot;and id in(&quot;separator=&quot;,&quot;<span class="keyword">close</span>=&quot;)&quot;&gt;</span><br><span class="line">                      #&#123;item.id&#125;</span><br><span class="line">              &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>插入  <figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">insert</span> id = <span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> 表名</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;allFields&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">    &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line"> &lt;/<span class="keyword">insert</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量插入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">     insert into 表名 </span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span> = <span class="string">&quot;allFields&quot;</span>&gt;</span></span><br><span class="line">     values</span><br><span class="line">     <span class="comment">&lt;!--mybatis 参数映射为list @Param 可以指定入参名称--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span> = <span class="string">&quot;setValues&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>批量主键删除<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">delete</span> id=&quot;batchDelete&quot; parameterType=&quot;long&quot;&gt;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id <span class="keyword">in</span></span><br><span class="line">    &lt;<span class="keyword">foreach</span> collection=&quot;array&quot; item=&quot;item&quot; <span class="keyword">open</span>=&quot;(&quot; separator=&quot;,&quot; <span class="keyword">close</span>=&quot;)&quot;&gt;</span><br><span class="line">    &lt;<span class="keyword">include</span> refid = &quot;uniquekeyField&quot;&gt;</span><br><span class="line">    &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">delete</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>主键删除<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">delete</span> id=<span class="string">&quot;delete&quot;</span> parameterType=<span class="string">&quot;long&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id = &lt;<span class="keyword">include</span> refid = <span class="string">&quot;uniquekeyField&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">delete</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量删除 <code>map.put(&quot;ids&quot;,&quot;1,2,3&quot;);map.put(&quot;name&quot;,&quot;kangpan&quot;)</code> <figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;batchDelete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.Map&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  delete from 表名</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            id in (#</span><span class="template-variable">&#123;ids,jdbcType=BIGINT&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null &amp;&amp; name != &#x27;&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            and name = #</span><span class="template-variable">&#123;name,jdbcType=VARCHAR&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>更新<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">update</span> id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">update</span> 表名 </span><br><span class="line">    &lt;<span class="keyword">set</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> t.id = &lt;<span class="keyword">include</span> refid = <span class="string">&quot;uniquekeyField&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">update</span> id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;&quot;</span>&gt;  </span><br><span class="line">      <span class="keyword">update</span> 表名  </span><br><span class="line">      &lt;<span class="built_in">trim</span> prefix=<span class="string">&quot;SET&quot;</span> suffixOverrides=<span class="string">&quot;,&quot;</span>&gt;  </span><br><span class="line">      &lt;<span class="keyword">include</span> refid = <span class="string">&quot;setValues&quot;</span>&gt;</span><br><span class="line">      &lt;/<span class="built_in">trim</span>&gt;  </span><br><span class="line">      <span class="keyword">where</span> id = &lt;<span class="keyword">include</span> refid = <span class="string">&quot;uniquekeyField&quot;</span>&gt; </span><br><span class="line">  &lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>批量更新<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> &lt;<span class="keyword">update</span> id=&quot;batchUpdate&quot; parameterType=&quot;java.util.List&quot;&gt;</span><br><span class="line">    &lt;<span class="keyword">foreach</span> collection=&quot;list&quot; item=&quot;item&quot; <span class="keyword">index</span>=&quot;index&quot; <span class="keyword">open</span>=&quot;&quot; <span class="keyword">close</span>=&quot;&quot; separator=&quot;;&quot;&gt;</span><br><span class="line">        <span class="keyword">update</span> 表名 </span><br><span class="line">        &lt;<span class="keyword">set</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">include</span> refid = &quot;setValues&quot;&gt;</span><br><span class="line">        &lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">        <span class="keyword">where</span> t.id = &lt;<span class="keyword">include</span> refid = &quot;uniquekeyField&quot;&gt;</span><br><span class="line">    &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>
<a href="https://mybatis.org/mybatis-3/zh/">了解更多</a></li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>在容器中搭建运行FTP服务器</title>
    <url>/2021/04/29/%E5%9C%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%90%AD%E5%BB%BA%E8%BF%90%E8%A1%8CFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h3><h4 id="查看-docker-search-vsftpd"><a href="#查看-docker-search-vsftpd" class="headerlink" title="查看 docker search vsftpd"></a>查看 <code>docker search vsftpd</code></h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NAME</span>                                     DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line"><span class="attribute">fauria</span>/vsftpd                            vsftpd Docker image based <span class="literal">on</span> Centos <span class="number">7</span>. Suppo…   <span class="number">153</span>                                    <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">panubo</span>/vsftpd                            vsftpd - Secure, fast FTP server                <span class="number">36</span>                                     <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">vimagick</span>/vsftpd                                                                          <span class="number">13</span>                                     <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">odiobill</span>/vsftpd                          Very light vsftpd installation based <span class="literal">on</span> Debi…   <span class="number">7</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">million12</span>/vsftpd                         VSFTPD Server in a Docker                       <span class="number">7</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">emilybache</span>/vsftpd-server                                                                 <span class="number">6</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">avenus</span>/vsftpd-alpine                     Docker image of vsftpd server based <span class="literal">on</span> Alpin…   <span class="number">5</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">wildscamp</span>/vsftpd                         An FTP server designed to simplify local dev…   <span class="number">4</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">loicmathieu</span>/vsftpd                       vsftpd container                                <span class="number">2</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">akue</span>/vsftpd                              vsftpd Docker image based <span class="literal">on</span> Centos <span class="number">7</span>. Suppo…   <span class="number">1</span></span><br><span class="line"><span class="attribute">hiproz</span>/vsftpd                            an vsftpd that support virtual user which ha…   <span class="number">1</span></span><br><span class="line"><span class="attribute">benssson</span>/vsftpd                          copy of wildscamp/vsftpd but with pasv_addr_…   <span class="number">1</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">instantlinux</span>/vsftpd                      A clean, easy-to-use, tiny yet full-featured…   <span class="number">1</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">mikenye</span>/vsftpd-anon-uploads              A generic, ready-to-go anonymous ftp server …   <span class="number">1</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">undying</span>/vsftpd                           Vsftpd Docker Container                         <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">ledermann</span>/vsftpd                         Clone of helderco/docker-vsftpd, just to pro…   <span class="number">0</span></span><br><span class="line"><span class="attribute">dmanas</span>/vsftpd-mysql                                                                      <span class="number">0</span></span><br><span class="line"><span class="attribute">dolphyvn</span>/vsftpd_priv                                                                     <span class="number">0</span></span><br><span class="line"><span class="attribute">markhobson</span>/vsftpd                                                                        <span class="number">0</span></span><br><span class="line"><span class="attribute">valus</span>/vsftpd                             vsftpd <span class="literal">on</span> CentOS <span class="number">7</span> for internal usage.          <span class="number">0</span></span><br><span class="line"><span class="attribute">shourai</span>/vsftpd-alpine                    vsftpd based <span class="literal">on</span> alpine                          <span class="number">0</span></span><br><span class="line"><span class="attribute">ernestas</span>/vsftpd-server                   simple vsftpd server                            <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">openmicroscopy</span>/vsftpd-anonymous-upload   Vsftpd Docker image for anonymous FTP upload…   <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"><span class="attribute">zloystrelok</span>/vsftpd                       fixed fork vsftpd                               <span class="number">0</span></span><br><span class="line"><span class="attribute">vistrcm</span>/vsftpd                           This Docker container implements a vsftpd se…   <span class="number">0</span>                                      <span class="meta"> [OK]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="拉取镜像-docker-pull-fauria-vsftpd"><a href="#拉取镜像-docker-pull-fauria-vsftpd" class="headerlink" title="拉取镜像 docker pull fauria/vsftpd"></a>拉取镜像 <code>docker pull fauria/vsftpd</code></h4><figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Using default tag</span>: latest</span><br><span class="line"><span class="attribute">latest</span>: Pulling from fauria/vsftpd</span><br><span class="line"><span class="attribute">75f829a71a1c</span>: Downloading [=&gt;                                                 ]   2.15MB/75.86MB</span><br><span class="line"><span class="attribute">a1a6b490d7c7</span>: Downloading [=====&gt;                                             ]  719.8kB/6.415MB</span><br><span class="line"><span class="attribute">ad2cabfec967</span>: Downloading [======&gt;                                            ]  986.3kB/7.923MB</span><br><span class="line"><span class="attribute">c7a98e8d62f5</span>: Waiting</span><br><span class="line"><span class="attribute">10d192add873</span>: Waiting</span><br><span class="line"><span class="attribute">fc18a09c86d0</span>: Waiting</span><br><span class="line"><span class="attribute">5397e9c5e314</span>: Waiting</span><br><span class="line"><span class="attribute">e89f582c70f5</span>: Waiting</span><br><span class="line"><span class="attribute">8b8bdebbfc97</span>: Waiting</span><br><span class="line"><span class="attribute">026ae919720d</span>: Waiting</span><br></pre></td></tr></table></figure>
<h3 id="获取本机地址-ipconfig"><a href="#获取本机地址-ipconfig" class="headerlink" title="获取本机地址 ipconfig"></a>获取本机地址 <code>ipconfig</code></h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">以太网适配器 vEthernet (Default Switch):</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : <span class="type">fe80</span>::f55c:<span class="number">61e5</span>:<span class="number">557</span>f:<span class="number">503</span>d%<span class="number">39</span></span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.231.193</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.240</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure>
<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>参数说明：<br><code>C:/docker-data/:/home/vsftpd</code> :映射 <code>docker</code> 容器 <code>ftp</code> 文件根目录（冒号前面是宿主机的目录<br><code>-p</code>：映射 <code>docker</code> 端口（冒号前面是宿主机的端口）<br><code>-e FTP_USER=test -e FTP_PASS=test </code>：设置默认的用户名密码<br><code>PASV_ADDRESS</code>：宿主机 <code>ip</code>，当需要使用被动模式时必须设置。<br><code>PASV_MIN_PORT~ PASV_MAX_PORT</code>：给客服端提供下载服务随机端口号范围，默认 <code>21100-21110</code>，与前面的 <code>docker</code> 端口映射设置成一样。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -v C:/docker-data/:/home/vsftpd -p <span class="number">20</span>:<span class="number">20</span> -p <span class="number">21</span>:<span class="number">21</span> -p <span class="number">21100</span>-<span class="number">21110</span>:<span class="number">21100</span>-<span class="number">21110</span> -e FTP_USER=test -e FTP_PASS=test -e PASV_ADDRESS=<span class="number">192</span>. <span class="number">168</span>.<span class="number">231</span>.<span class="number">193</span> -e PASV_MIN_PORT=<span class="number">21100</span> -e PASV_MAX_PORT=<span class="number">21110</span> --name vsftpd --restart=always fauria/vsftpd</span><br></pre></td></tr></table></figure>
<h3 id="进入容器-docker-exec-i-t-vsftpd-bash"><a href="#进入容器-docker-exec-i-t-vsftpd-bash" class="headerlink" title="进入容器 docker exec -i -t vsftpd bash"></a>进入容器 <code>docker exec -i -t vsftpd bash</code></h3><p>进入 <code>home/vsftpd</code> 文件，查看创建的用户 <code>test</code>，进入<code>test</code> 目录， 创建 <code>1.txt 2.txt</code>，或者在宿主机的 <code>C:/docker-data/test</code> 文件里面手动创建，创建之后自动更新 <code>home/vsftpd/test</code>里面的文件。</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">[root@bfdc203461de /]# ls</span><br><span class="line">anaconda-post.log  bin  dev  etc  home  lib  lib64  media  mnt  opt  <span class="keyword">proc</span><span class="title">  root</span> <span class="title"> run</span> <span class="title"> sbin</span> <span class="title"> srv</span> <span class="title"> sys</span> <span class="title"> tmp</span> <span class="title"> usr</span> <span class="title"> var</span></span><br><span class="line"><span class="title">[root@bfdc203461de</span> /]#<span class="title"> cd</span> home/</span><br><span class="line">[root@bfdc203461de<span class="title"> home]#</span> ls</span><br><span class="line">vsftpd</span><br><span class="line">[root@bfdc203461de<span class="title"> home]#</span> cd<span class="title"> vsftpd/</span></span><br><span class="line"><span class="title">[root@bfdc203461de</span> vsftpd]#<span class="title"> ls</span></span><br><span class="line"><span class="title">index.html</span> <span class="title"> test</span></span><br><span class="line"><span class="title">[root@bfdc203461de</span> vsftpd]#<span class="title"> cd</span> test/</span><br><span class="line">[root@bfdc203461de<span class="title"> test]#</span> ls</span><br><span class="line">1.txt  2.txt</span><br><span class="line">[root@bfdc203461de<span class="title"> test]#</span> exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>使用<code>IE</code>浏览器 输入 <code>ftp://192.168.231.193/</code>可以查看到我们新建的文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">FTP 根位于 <span class="number">192.168</span>.<span class="number">231.193</span></span><br><span class="line">若要在文件资源管理器中查看此 FTP 站点，请单击“视图”，然后单击“在文件资源管理器中打开 FTP 站点”。 </span><br><span class="line"><span class="number">04</span><span class="regexp">/29/</span><span class="number">2021</span> <span class="number">01</span>:<span class="number">10</span>下午              <span class="number">0</span> <span class="number">1</span>.txt</span><br><span class="line"><span class="number">04</span><span class="regexp">/29/</span><span class="number">2021</span> <span class="number">01</span>:<span class="number">12</span>下午              <span class="number">0</span> <span class="number">2</span>.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写没有web容器的Sping程序</title>
    <url>/2021/05/09/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B2%A1%E6%9C%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Callback used to run the bean.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args incoming application arguments</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Callback used to run the bean.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args incoming main method arguments</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception on error</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>pom</code> 引入，这里引入了 <code>web</code> 组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 <code>application.properties</code> 配置文件中添加</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">spring</span>.main.web-application-<span class="keyword">type</span>=none</span><br></pre></td></tr></table></figure>
<p>或者使用 <code>WebApplicationType.NONE</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(WebApplicationType.NONE).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WebApplicationType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment">	 * embedded web server.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	NONE,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment">	 * embedded servlet web server.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	SERVLET,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment">	 * embedded reactive web server.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	REACTIVE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用工具类"><a href="#使用工具类" class="headerlink" title="使用工具类"></a>使用工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationRun</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ApplicationRun&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineRun</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;CommandLineRun&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(3)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExitRun</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> code = SpringApplication.exit(applicationContext);</span><br><span class="line">        log.info(<span class="string">&quot;ExitRun:&#123;&#125;&quot;</span>,code);</span><br><span class="line">        System.exit(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自定义程序退出码"><a href="#自定义程序退出码" class="headerlink" title="自定义程序退出码"></a>自定义程序退出码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> <span class="keyword">implements</span> <span class="title">ExitCodeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface ExitCodeGenerator &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * Returns the <span class="keyword">exit</span> code that should be returned from the application.</span><br><span class="line">	 * @return the <span class="keyword">exit</span> code.</span><br><span class="line">	 */</span><br><span class="line">	int getExitCode();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查看-SpringApplication-类的-exit-方法"><a href="#查看-SpringApplication-类的-exit-方法" class="headerlink" title="查看 SpringApplication 类的 exit 方法"></a>查看 SpringApplication 类的 exit 方法</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static <span class="built_in">int</span> exit(ApplicationContext context,</span><br><span class="line">		ExitCodeGenerator... exitCodeGenerators) &#123;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">Assert</span>.</span></span>not<span class="constructor">Null(<span class="params">context</span>, <span class="string">&quot;Context must not be null&quot;</span>)</span>;</span><br><span class="line">	<span class="built_in">int</span> exitCode = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ExitCodeGenerators generators = <span class="keyword">new</span> <span class="constructor">ExitCodeGenerators()</span>;</span><br><span class="line">			Collection&lt;ExitCodeGenerator&gt; beans = context</span><br><span class="line">					.get<span class="constructor">BeansOfType(ExitCodeGenerator.<span class="params">class</span>)</span>.values<span class="literal">()</span>;</span><br><span class="line">			generators.add<span class="constructor">All(<span class="params">exitCodeGenerators</span>)</span>;</span><br><span class="line">			generators.add<span class="constructor">All(<span class="params">beans</span>)</span>;</span><br><span class="line">			exitCode = generators.get<span class="constructor">ExitCode()</span>;</span><br><span class="line">			<span class="keyword">if</span> (exitCode != <span class="number">0</span>) &#123;</span><br><span class="line">				context.publish<span class="constructor">Event(<span class="params">new</span> ExitCodeEvent(<span class="params">context</span>, <span class="params">exitCode</span>)</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		finally &#123;</span><br><span class="line">			close(context);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	catch (Exception ex) &#123;</span><br><span class="line">		ex.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		exitCode = (exitCode != <span class="number">0</span>) ? exitCode : <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	return exitCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Adapter</title>
    <url>/2021/04/19/%E9%80%82%E9%85%8D%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>AOP</code>中，使用 <code>Advice</code>（通知）来实现被代理类的功能,使用代理模式，代理类在方法中通过执行拦截器，实现面向切面编程。</p>
<span id="more"></span>
<p>举个例子 前置处理 备注：源代码中省去了一些代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeforeAdvice</span> <span class="keyword">extends</span> <span class="title">Advice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advisor</span> </span>&#123;</span><br><span class="line">	<span class="function">Advice <span class="title">getAdvice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodBeforeAdvice</span> <span class="keyword">extends</span> <span class="title">BeforeAdvice</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, <span class="meta">@Nullable</span> Object target)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现<code>Advisor</code>接口的子类适配，获取 <code>Advice</code> 通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceAdapter</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> MethodInterceptor <span class="title">getInterceptor</span><span class="params">(Advisor advisor)</span> </span>&#123;</span><br><span class="line">		MethodBeforeAdvice advice = (MethodBeforeAdvice) advisor.getAdvice();</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MethodBeforeAdviceInterceptor(advice);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 <code>MethodBeforeAdviceInterceptor</code> 类 ，调用了 <code>before</code> 方法，实现方法前拦截</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">BeforeAdvice</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis());</span><br><span class="line">		<span class="keyword">return</span> mi.proceed();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看源代码<code>before</code>最终调用的是 <code>Method</code> 类的 <code>invoke</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MethodAccessor ma = methodAccessor;             </span><br><span class="line">    <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通知通过代码如何实现AOP"><a href="#通知通过代码如何实现AOP" class="headerlink" title="通知通过代码如何实现AOP"></a>通知通过代码如何实现AOP</h3><p>举例 <code>spring AOP</code> <code>JDK</code> 动态代理方式的实现</p>
<ul>
<li>配置 <code>MethodBeforeAdvice</code> 的实现类</li>
<li><code>JDK</code>通过实现接口的方式实现动态代理，那么定义一个接口</li>
<li>编写接口实现类</li>
<li>配置代理类，通过 <code>ProxyFactoryBean</code> 生成需要的<ul>
<li>拦截器（这里举例的是前置通知 <code>MethodBeforeAdvice</code> 的实现类）</li>
<li>代理接口(<code>JDK</code>通过实现接口的方式实现动态代理，定义的接口)</li>
<li>目标对象(接口实现类)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactoryBean</span> <span class="keyword">extends</span> <span class="title">ProxyCreatorSupport</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Object</span>&gt;, <span class="title">BeanClassLoaderAware</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterceptorNames</span><span class="params">(String... interceptorNames)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setInterceptorNames(interceptorNames);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//没有设置目标对象的代理接口，则使用CGLIB创建代理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProxyInterfaces</span><span class="params">(Class&lt;?&gt;[] proxyInterfaces)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setProxyInterfaces(proxyInterfaces);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetName</span><span class="params">(String targetName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setTargetName(targetName);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql Base Operate</title>
    <url>/2021/04/14/MySql-Base/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  Windows服务</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 启动MySQL</span></span><br><span class="line">    net <span class="built_in">start</span> mysql</span><br><span class="line"><span class="comment">-- 创建Windows服务</span></span><br><span class="line">    sc <span class="built_in">create</span> mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>连接与断开服务器</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> PROCESSLIST <span class="comment">-- 显示哪些线程正在运行</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="comment">-- 显示系统变量信息</span></span><br></pre></td></tr></table></figure>
<p> 数据库操作</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br><span class="line"><span class="comment">-- 显示当前时间、用户名、数据库版本</span></span><br><span class="line">    <span class="keyword">SELECT</span> now(), <span class="keyword">user</span>(), version();</span><br><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 数据库选项</span><br><span class="line">    数据库选项：</span><br><span class="line">        <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">        <span class="keyword">COLLATE</span> collation_name</span><br><span class="line"><span class="comment">-- 查看已有库</span></span><br><span class="line">    <span class="keyword">SHOW</span> DATABASES[ <span class="keyword">LIKE</span> <span class="string">&#x27;PATTERN&#x27;</span>]</span><br><span class="line"><span class="comment">-- 查看当前库信息</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 数据库名</span><br><span class="line"><span class="comment">-- 修改库的选项信息</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> 库名 选项信息</span><br><span class="line"><span class="comment">-- 删除库</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">DATABASE</span>[ <span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 数据库名</span><br><span class="line">        同时删除该数据库相关的目录及其目录内容</span><br></pre></td></tr></table></figure>
<p> 表的操作</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">    <span class="meta">CREATE</span> [TEMPORARY] <span class="meta">TABLE</span>[ <span class="meta">IF</span> <span class="meta">NOT</span> EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]</span><br><span class="line">        每个字段必须有数据类型</span><br><span class="line">        最后一个字段后不能有逗号</span><br><span class="line">        TEMPORARY 临时表，会话结束时表自动消失</span><br><span class="line">        对于字段的定义：</span><br><span class="line">            字段名 数据类型 [<span class="meta">NOT</span> <span class="meta">NULL</span> | <span class="meta">NULL</span>] [DEFAULT default_value] [AUTO_INCREMENT] [<span class="meta">UNIQUE</span> [<span class="meta">KEY</span>] | [<span class="meta">PRIMARY</span>] <span class="meta">KEY</span>] [COMMENT <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">-- 表选项</span><br><span class="line">    -- 字符集</span><br><span class="line">        CHARSET = charset_name</span><br><span class="line">        如果表没有设定，则使用数据库字符集</span><br><span class="line">    -- 存储引擎</span><br><span class="line">        ENGINE = engine_name</span><br><span class="line">        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同</span><br><span class="line">        常见的引擎：InnoDB MyISAM Memory/Heap BDB <span class="meta">Merge</span> Example CSV MaxDB Archive</span><br><span class="line">        不同的引擎在保存表的结构和数据时采用不同的方式</span><br><span class="line">        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引</span><br><span class="line">        InnoDB表文件含义：.frm表定义，表空间数据和日志文件</span><br><span class="line">        SHOW ENGINES -- 显示存储引擎的状态信息</span><br><span class="line">        SHOW ENGINE 引擎名 &#123;LOGS|STATUS&#125; -- 显示存储引擎的日志或状态信息</span><br><span class="line">    -- 自增起始数</span><br><span class="line">        AUTO_INCREMENT = 行数</span><br><span class="line">    -- 数据文件目录</span><br><span class="line"><span class="keyword">        DATA </span>DIRECTORY = <span class="string">&#x27;目录&#x27;</span></span><br><span class="line">    -- 索引文件目录</span><br><span class="line">        <span class="meta">INDEX</span> DIRECTORY = <span class="string">&#x27;目录&#x27;</span></span><br><span class="line">    -- 表注释</span><br><span class="line">        COMMENT = <span class="string">&#x27;string&#x27;</span></span><br><span class="line">    -- 分区选项</span><br><span class="line">        PARTITION <span class="meta">BY</span> ... (详细见手册)</span><br><span class="line">-- 查看所有表</span><br><span class="line">    SHOW TABLES[ <span class="meta">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br><span class="line">    SHOW TABLES <span class="meta">FROM</span> 表名</span><br><span class="line">-- 查看表机构</span><br><span class="line">    SHOW <span class="meta">CREATE</span> <span class="meta">TABLE</span> 表名 （信息更详细）</span><br><span class="line">    DESC 表名 / <span class="meta">DESCRIBE</span> 表名 / EXPLAIN 表名 / SHOW COLUMNS <span class="meta">FROM</span> 表名 [<span class="meta">LIKE</span> <span class="string">&#x27;PATTERN&#x27;</span>]</span><br><span class="line">    SHOW <span class="meta">TABLE</span> STATUS [<span class="meta">FROM</span> db_name] [<span class="meta">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]</span><br><span class="line">-- 修改表</span><br><span class="line">    -- 修改表本身的选项</span><br><span class="line">        <span class="meta">ALTER</span> <span class="meta">TABLE</span> 表名 表的选项</span><br><span class="line">        eg: <span class="meta">ALTER</span> <span class="meta">TABLE</span> 表名 ENGINE=MYISAM;</span><br><span class="line">    -- 对表进行重命名</span><br><span class="line">        <span class="meta">RENAME</span> <span class="meta">TABLE</span> 原表名 TO 新表名</span><br><span class="line">        <span class="meta">RENAME</span> <span class="meta">TABLE</span> 原表名 TO 库名.表名 （可将表移动到另一个数据库）</span><br><span class="line">        -- <span class="meta">RENAME</span>可以交换两个表名</span><br><span class="line">    -- 修改表的字段机构（13.1.2. <span class="meta">ALTER</span> <span class="meta">TABLE</span>语法）</span><br><span class="line">        <span class="meta">ALTER</span> <span class="meta">TABLE</span> 表名 操作名</span><br><span class="line">        -- 操作名</span><br><span class="line">            <span class="meta">ADD</span>[ COLUMN] 字段定义       -- 增加字段</span><br><span class="line">                AFTER 字段名          -- 表示增加在该字段名后面</span><br><span class="line">                FIRST               -- 表示增加在第一个</span><br><span class="line">            <span class="meta">ADD</span> <span class="meta">PRIMARY</span> <span class="meta">KEY</span>(字段名)   -- 创建主键</span><br><span class="line">            <span class="meta">ADD</span> <span class="meta">UNIQUE</span> [索引名] (字段名)-- 创建唯一索引</span><br><span class="line">            <span class="meta">ADD</span> <span class="meta">INDEX</span> [索引名] (字段名) -- 创建普通索引</span><br><span class="line">            <span class="meta">DROP</span>[ COLUMN] 字段名      -- 删除字段</span><br><span class="line">            <span class="meta">MODIFY</span>[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)</span><br><span class="line">            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改</span><br><span class="line">            <span class="meta">DROP</span> <span class="meta">PRIMARY</span> <span class="meta">KEY</span>    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)</span><br><span class="line">            <span class="meta">DROP</span> <span class="meta">INDEX</span> 索引名 -- 删除索引</span><br><span class="line">            <span class="meta">DROP</span> <span class="meta">FOREIGN</span> <span class="meta">KEY</span> 外键    -- 删除外键</span><br><span class="line">-- 删除表</span><br><span class="line">    <span class="meta">DROP</span> <span class="meta">TABLE</span>[ <span class="meta">IF</span> EXISTS] 表名 ...</span><br><span class="line">-- 清空表数据</span><br><span class="line">    TRUNCATE [<span class="meta">TABLE</span>] 表名</span><br><span class="line">-- 复制表结构</span><br><span class="line">    <span class="meta">CREATE</span> <span class="meta">TABLE</span> 表名 <span class="meta">LIKE</span> 要复制的表名</span><br><span class="line">-- 复制表结构和数据</span><br><span class="line">    <span class="meta">CREATE</span> <span class="meta">TABLE</span> 表名 [<span class="meta">AS</span>] <span class="meta">SELECT</span> <span class="comment">* FROM 要复制的表名</span></span><br><span class="line"><span class="comment">-- 检查表是否有错误</span></span><br><span class="line"><span class="comment">    CHECK TABLE tbl_name [, tbl_name] ... [option] ...</span></span><br><span class="line"><span class="comment">-- 优化表</span></span><br><span class="line"><span class="comment">    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span><br><span class="line"><span class="comment">-- 修复表</span></span><br><span class="line"><span class="comment">    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]</span></span><br><span class="line"><span class="comment">-- 分析表</span></span><br><span class="line"><span class="comment">    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...</span></span><br></pre></td></tr></table></figure>
<p>数据操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增</span></span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 [(字段列表)] <span class="keyword">VALUES</span> (值列表)[, (值列表), ...]</span><br><span class="line">        <span class="comment">-- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。</span></span><br><span class="line">        <span class="comment">-- 可同时插入多条数据记录！</span></span><br><span class="line">        REPLACE 与 <span class="keyword">INSERT</span> 完全一样，可互换。</span><br><span class="line">    <span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>值[, 字段名<span class="operator">=</span>值, ...]</span><br><span class="line"><span class="comment">-- 查</span></span><br><span class="line">    <span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名[ 其他子句]</span><br><span class="line">        <span class="comment">-- 可来自多个表的多个字段</span></span><br><span class="line">        <span class="comment">-- 其他子句可以不使用</span></span><br><span class="line">        <span class="comment">-- 字段列表可以用*代替，表示所有字段</span></span><br><span class="line"><span class="comment">-- 删</span></span><br><span class="line">    <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名[ 删除条件子句]</span><br><span class="line">        没有条件子句，则会删除全部</span><br><span class="line"><span class="comment">-- 改</span></span><br><span class="line">    UPDATE 表名 <span class="keyword">SET</span> 字段名<span class="operator">=</span>新值[, 字段名<span class="operator">=</span>新值] [更新条件]</span><br></pre></td></tr></table></figure>
<p>字符集编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL、数据库、表、字段均可设置编码</span></span><br><span class="line"><span class="comment">-- 数据编码与客户端编码不需一致</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_%&#x27;</span>   <span class="comment">-- 查看所有字符集编码项</span></span><br><span class="line">    character_set_client        客户端向服务器发送数据时使用的编码</span><br><span class="line">    character_set_results       服务器端将结果返回给客户端所使用的编码</span><br><span class="line">    character_set_connection    连接层编码</span><br><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 变量值</span><br><span class="line">    <span class="keyword">SET</span> character_set_client <span class="operator">=</span> gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_results <span class="operator">=</span> gbk;</span><br><span class="line">    <span class="keyword">SET</span> character_set_connection <span class="operator">=</span> gbk;</span><br><span class="line"><span class="keyword">SET</span> NAMES GBK;  <span class="comment">-- 相当于完成以上三个设置</span></span><br><span class="line"><span class="comment">-- 校对集</span></span><br><span class="line">    校对集用以排序</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]<span class="operator">/</span><span class="keyword">SHOW</span> CHARSET [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]   查看所有字符集</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">COLLATION</span> [<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>]     查看所有校对集</span><br><span class="line">    CHARSET 字符集编码     设置字符集编码</span><br><span class="line">    <span class="keyword">COLLATE</span> 校对集编码     设置校对集编码</span><br></pre></td></tr></table></figure>
<p>数据类型（列类型）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 数值类型</span><br><span class="line"></span><br><span class="line"><span class="comment">-- a. 整型 ----------</span></span><br><span class="line">    类型         字节     范围（有符号位）</span><br><span class="line">    tinyint     <span class="number">1</span>字节    <span class="number">-128</span> <span class="operator">~</span> <span class="number">127</span>      无符号位：<span class="number">0</span> <span class="operator">~</span> <span class="number">255</span></span><br><span class="line">    <span class="type">smallint</span>    <span class="number">2</span>字节    <span class="number">-32768</span> <span class="operator">~</span> <span class="number">32767</span></span><br><span class="line">    mediumint   <span class="number">3</span>字节    <span class="number">-8388608</span> <span class="operator">~</span> <span class="number">8388607</span></span><br><span class="line">    <span class="type">int</span>         <span class="number">4</span>字节</span><br><span class="line">    <span class="type">bigint</span>      <span class="number">8</span>字节</span><br><span class="line">    <span class="type">int</span>(M)  M表示总位数</span><br><span class="line">    <span class="operator">-</span> 默认存在符号位，unsigned 属性修改</span><br><span class="line">    <span class="operator">-</span> 显示宽度，如果某个数不够定义字段时设置的位数，则前面以<span class="number">0</span>补填，zerofill 属性修改</span><br><span class="line">        例：<span class="type">int</span>(<span class="number">5</span>)   插入一个数<span class="string">&#x27;123&#x27;</span>，补填后为<span class="string">&#x27;00123&#x27;</span></span><br><span class="line">    <span class="operator">-</span> 在满足要求的情况下，越小越好。</span><br><span class="line">    <span class="operator">-</span> <span class="number">1</span>表示bool值真，<span class="number">0</span>表示bool值假。MySQL没有布尔类型，通过整型<span class="number">0</span>和<span class="number">1</span>表示。常用tinyint(<span class="number">1</span>)表示布尔型。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. 浮点型 ----------</span></span><br><span class="line">    类型             字节     范围</span><br><span class="line">    <span class="type">float</span>(单精度)     <span class="number">4</span>字节</span><br><span class="line">    <span class="keyword">double</span>(双精度)    <span class="number">8</span>字节</span><br><span class="line">    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。</span><br><span class="line">        不同于整型，前后均会补填<span class="number">0.</span></span><br><span class="line">    定义浮点型时，需指定总位数和小数位数。</span><br><span class="line">        <span class="type">float</span>(M, D)     <span class="keyword">double</span>(M, D)</span><br><span class="line">        M表示总位数，D表示小数位数。</span><br><span class="line">        M和D的大小会决定浮点数的范围。不同于整型的固定范围。</span><br><span class="line">        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。</span><br><span class="line">        支持科学计数法表示。</span><br><span class="line">        浮点数表示近似值。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c. 定点数 ----------</span></span><br><span class="line">    <span class="type">decimal</span> <span class="comment">-- 可变长度</span></span><br><span class="line">    <span class="type">decimal</span>(M, D)   M也表示总位数，D表示小数位数。</span><br><span class="line">    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。</span><br><span class="line">    将浮点数转换为字符串来保存，每<span class="number">9</span>位数字保存为<span class="number">4</span>个字节。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 字符串类型</span><br><span class="line"></span><br><span class="line"><span class="comment">-- a. char, varchar ----------</span></span><br><span class="line">    <span class="type">char</span>    定长字符串，速度快，但浪费空间</span><br><span class="line">    <span class="type">varchar</span> 变长字符串，速度慢，但节省空间</span><br><span class="line">    M表示能存储的最大长度，此长度是字符数，非字节数。</span><br><span class="line">    不同的编码，所占用的空间不同。</span><br><span class="line">    <span class="type">char</span>,最多<span class="number">255</span>个字符，与编码无关。</span><br><span class="line">    <span class="type">varchar</span>,最多<span class="number">65535</span>字符，与编码有关。</span><br><span class="line">    一条有效记录最大不能超过<span class="number">65535</span>个字节。</span><br><span class="line">        utf8 最大为<span class="number">21844</span>个字符，gbk 最大为<span class="number">32766</span>个字符，latin1 最大为<span class="number">65532</span>个字符</span><br><span class="line">    <span class="type">varchar</span> 是变长的，需要利用存储空间保存 <span class="type">varchar</span> 的长度，如果数据小于<span class="number">255</span>个字节，则采用一个字节来保存长度，反之需要两个字节来保存。</span><br><span class="line">    <span class="type">varchar</span> 的最大有效长度由最大行大小和使用的字符集确定。</span><br><span class="line">    最大有效长度是<span class="number">65532</span>字节，因为在<span class="type">varchar</span>存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是<span class="number">64432</span><span class="number">-1</span><span class="number">-2</span><span class="operator">=</span><span class="number">65532</span>字节。</span><br><span class="line">    例：若一个表定义为 <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb(c1 <span class="type">int</span>, c2 <span class="type">char</span>(<span class="number">30</span>), c3 <span class="type">varchar</span>(N)) charset<span class="operator">=</span>utf8; 问N的最大值是多少？ 答：(<span class="number">65535</span><span class="number">-1</span><span class="number">-2</span><span class="number">-4</span><span class="number">-30</span><span class="operator">*</span><span class="number">3</span>)<span class="operator">/</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- b. blob, text ----------</span></span><br><span class="line">    <span class="type">blob</span> 二进制字符串（字节字符串）</span><br><span class="line">        tinyblob, <span class="type">blob</span>, mediumblob, longblob</span><br><span class="line">    text 非二进制字符串（字符字符串）</span><br><span class="line">        tinytext, text, mediumtext, longtext</span><br><span class="line">    text 在定义时，不需要定义长度，也不会计算总长度。</span><br><span class="line">    text 类型在定义时，不可给<span class="keyword">default</span>值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- c. binary, varbinary ----------</span></span><br><span class="line">    类似于<span class="type">char</span>和<span class="type">varchar</span>，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。</span><br><span class="line">    <span class="type">char</span>, <span class="type">varchar</span>, text 对应 <span class="type">binary</span>, <span class="type">varbinary</span>, blob.</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 日期时间类型</span><br><span class="line">    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。</span><br><span class="line">    datetime    <span class="number">8</span>字节    日期及时间     <span class="number">1000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> 到 <span class="number">9999</span><span class="number">-12</span><span class="number">-31</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    <span class="type">date</span>        <span class="number">3</span>字节    日期         <span class="number">1000</span><span class="number">-01</span><span class="number">-01</span> 到 <span class="number">9999</span><span class="number">-12</span><span class="number">-31</span></span><br><span class="line">    <span class="type">timestamp</span>   <span class="number">4</span>字节    时间戳        <span class="number">19700101000000</span> 到 <span class="number">2038</span><span class="number">-01</span><span class="number">-19</span> <span class="number">03</span>:<span class="number">14</span>:<span class="number">07</span></span><br><span class="line">    <span class="type">time</span>        <span class="number">3</span>字节    时间         <span class="number">-838</span>:<span class="number">59</span>:<span class="number">59</span> 到 <span class="number">838</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">    <span class="keyword">year</span>        <span class="number">1</span>字节    年份         <span class="number">1901</span> <span class="operator">-</span> <span class="number">2155</span></span><br><span class="line">datetime    YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD hh:mm:ss</span><br><span class="line"><span class="type">timestamp</span>   YY<span class="operator">-</span>MM<span class="operator">-</span>DD hh:mm:ss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line">            YYYYMMDDhhmmss</span><br><span class="line">            YYMMDDhhmmss</span><br><span class="line"><span class="type">date</span>        YYYY<span class="operator">-</span>MM<span class="operator">-</span>DD</span><br><span class="line">            YY<span class="operator">-</span>MM<span class="operator">-</span>DD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line">            YYYYMMDD</span><br><span class="line">            YYMMDD</span><br><span class="line"><span class="type">time</span>        hh:mm:ss</span><br><span class="line">            hhmmss</span><br><span class="line">            hhmmss</span><br><span class="line"><span class="keyword">year</span>        YYYY</span><br><span class="line">            YY</span><br><span class="line">            YYYY</span><br><span class="line">            YY</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 枚举和集合</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 枚举(enum) ----------</span></span><br><span class="line">enum(val1, val2, val3...)</span><br><span class="line">    在已知的值中进行单选。最大数量为<span class="number">65535.</span></span><br><span class="line">    枚举值在保存时，以<span class="number">2</span>个字节的整型(<span class="type">smallint</span>)保存。每个枚举值，按保存的位置顺序，从<span class="number">1</span>开始逐一递增。</span><br><span class="line">    表现为字符串类型，存储却是整型。</span><br><span class="line">    <span class="keyword">NULL</span>值的索引是<span class="keyword">NULL</span>。</span><br><span class="line">    空字符串错误值的索引值是<span class="number">0</span>。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 集合（set） ----------</span></span><br><span class="line"><span class="keyword">set</span>(val1, val2, val3...)</span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( gender <span class="keyword">set</span>(<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;无&#x27;</span>) );</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="string">&#x27;男, 女&#x27;</span>);</span><br><span class="line">    最多可以有<span class="number">64</span>个不同的成员。以<span class="type">bigint</span>存储，共<span class="number">8</span>个字节。采取位运算的形式。</span><br><span class="line">    当创建表时，<span class="keyword">SET</span>成员值的尾部空格将自动被删除。</span><br></pre></td></tr></table></figure>
<p>列属性（列约束）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">PRIMARY</span> 主键</span><br><span class="line">    <span class="operator">-</span> 能唯一标识记录的字段，可以作为主键。</span><br><span class="line">    <span class="operator">-</span> 一个表只能有一个主键。</span><br><span class="line">    <span class="operator">-</span> 主键具有唯一性。</span><br><span class="line">    <span class="operator">-</span> 声明字段时，用 <span class="keyword">primary</span> key 标识。</span><br><span class="line">        也可以在字段列表之后声明</span><br><span class="line">            例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( id <span class="type">int</span>, stu <span class="type">varchar</span>(<span class="number">10</span>), <span class="keyword">primary</span> key (id));</span><br><span class="line">    <span class="operator">-</span> 主键字段的值不能为<span class="keyword">null</span>。</span><br><span class="line">    <span class="operator">-</span> 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。</span><br><span class="line">        例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( id <span class="type">int</span>, stu <span class="type">varchar</span>(<span class="number">10</span>), age <span class="type">int</span>, <span class="keyword">primary</span> key (stu, age));</span><br><span class="line"><span class="number">2.</span> <span class="keyword">UNIQUE</span> 唯一索引（唯一约束）</span><br><span class="line">    使得某字段的值也不能重复。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">NULL</span> 约束</span><br><span class="line">    <span class="keyword">null</span>不是数据类型，是列的一个属性。</span><br><span class="line">    表示当前列是否可以为<span class="keyword">null</span>，表示什么都没有。</span><br><span class="line">    <span class="keyword">null</span>, 允许为空。默认。</span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">null</span>, 不允许为空。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;val&#x27;</span>);</span><br><span class="line">        <span class="comment">-- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null</span></span><br><span class="line"><span class="number">4.</span> <span class="keyword">DEFAULT</span> 默认值属性</span><br><span class="line">    当前字段的默认值。</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tab <span class="keyword">values</span> (<span class="keyword">default</span>, <span class="string">&#x27;val&#x27;</span>);    <span class="comment">-- 此时表示强制使用默认值。</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> tab ( add_time <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> );</span><br><span class="line">        <span class="comment">-- 表示将当前时间的时间戳设为默认值。</span></span><br><span class="line">        <span class="built_in">current_date</span>, <span class="built_in">current_time</span></span><br><span class="line"><span class="number">5.</span> AUTO_INCREMENT 自动增长约束</span><br><span class="line">    自动增长必须为索引（主键或<span class="keyword">unique</span>）</span><br><span class="line">    只能存在一个字段为自动增长。</span><br><span class="line">    默认为<span class="number">1</span>开始自动增长。可以通过表属性 auto_increment <span class="operator">=</span> x进行设置，或 <span class="keyword">alter</span> <span class="keyword">table</span> tbl auto_increment <span class="operator">=</span> x;</span><br><span class="line"><span class="number">6.</span> COMMENT 注释</span><br><span class="line">    例：<span class="keyword">create</span> <span class="keyword">table</span> tab ( id <span class="type">int</span> ) comment <span class="string">&#x27;注释内容&#x27;</span>;</span><br><span class="line"><span class="number">7.</span> <span class="keyword">FOREIGN</span> KEY 外键约束</span><br><span class="line">    用于限制主表与从表数据完整性。</span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> <span class="keyword">constraint</span> `t1_t2_fk` <span class="keyword">foreign</span> key (t1_id) <span class="keyword">references</span> t2(id);</span><br><span class="line">        <span class="comment">-- 将表t1的t1_id外键关联到表t2的id字段。</span></span><br><span class="line">        <span class="comment">-- 每个外键都有一个名字，可以通过 constraint 指定</span></span><br><span class="line">    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。</span><br><span class="line">    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。</span><br><span class="line">    MySQL中，可以对InnoDB引擎使用外键约束：</span><br><span class="line">    语法：</span><br><span class="line">    <span class="keyword">foreign</span> key (外键字段） <span class="keyword">references</span> 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</span><br><span class="line">    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有<span class="keyword">not</span> <span class="keyword">null</span>。</span><br><span class="line">    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。</span><br><span class="line">    如果指定了 <span class="keyword">on</span> update 或 <span class="keyword">on</span> <span class="keyword">delete</span>：在删除或更新时，有如下几个操作可以选择：</span><br><span class="line">    <span class="number">1.</span> cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">set</span> <span class="keyword">null</span>，设置为<span class="keyword">null</span>。主表数据被更新（主键值更新），从表的外键被设置为<span class="keyword">null</span>。主表记录被删除，从表相关记录外键被设置成<span class="keyword">null</span>。但注意，要求该外键列，没有<span class="keyword">not</span> <span class="keyword">null</span>属性约束。</span><br><span class="line">    <span class="number">3.</span> restrict，拒绝父表删除和更新。</span><br><span class="line">    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。</span><br></pre></td></tr></table></figure>

<p>SELECT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] select_expr <span class="keyword">FROM</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> [合计函数] <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">-</span><span class="operator">&gt;</span> LIMIT</span><br><span class="line">a. select_expr</span><br><span class="line">    <span class="comment">-- 可以用 * 表示所有字段。</span></span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以使用表达式（计算公式、函数调用、字段也是个表达式）</span></span><br><span class="line">        <span class="keyword">select</span> stu, <span class="number">29</span><span class="operator">+</span><span class="number">25</span>, now() <span class="keyword">from</span> tb;</span><br><span class="line">    <span class="comment">-- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。</span></span><br><span class="line">        <span class="operator">-</span> 使用 <span class="keyword">as</span> 关键字，也可省略 as.</span><br><span class="line">        <span class="keyword">select</span> stu<span class="operator">+</span><span class="number">10</span> <span class="keyword">as</span> add10 <span class="keyword">from</span> tb;</span><br><span class="line">b. <span class="keyword">FROM</span> 子句</span><br><span class="line">    用于标识查询来源。</span><br><span class="line">    <span class="comment">-- 可以为表起别名。使用as关键字。</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1 <span class="keyword">AS</span> tt, tb2 <span class="keyword">AS</span> bb;</span><br><span class="line">    <span class="comment">-- from子句后，可以同时出现多个表。</span></span><br><span class="line">        <span class="comment">-- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb1, tb2;</span><br><span class="line">    <span class="comment">-- 向优化符提示如何选择索引</span></span><br><span class="line">        USE INDEX、IGNORE INDEX、FORCE INDEX</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 USE INDEX (key1,key2) <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> key3<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 IGNORE INDEX (key3) <span class="keyword">WHERE</span> key1<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> key2<span class="operator">=</span><span class="number">2</span> <span class="keyword">AND</span> key3<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">c. <span class="keyword">WHERE</span> 子句</span><br><span class="line">    <span class="comment">-- 从from获得的数据源中进行筛选。</span></span><br><span class="line">    <span class="comment">-- 整型1表示真，0表示假。</span></span><br><span class="line">    <span class="comment">-- 表达式由运算符和运算数组成。</span></span><br><span class="line">        <span class="comment">-- 运算数：变量（字段）、值、函数返回值</span></span><br><span class="line">        <span class="comment">-- 运算符：</span></span><br><span class="line">            <span class="operator">=</span>, <span class="operator">&lt;=&gt;</span>, <span class="operator">&lt;&gt;</span>, <span class="operator">!=</span>, <span class="operator">&lt;=</span>, <span class="operator">&lt;</span>, <span class="operator">&gt;=</span>, <span class="operator">&gt;</span>, <span class="operator">!</span>, <span class="operator">&amp;&amp;</span>, <span class="operator">||</span>,</span><br><span class="line">            <span class="keyword">in</span> (<span class="keyword">not</span>) <span class="keyword">null</span>, (<span class="keyword">not</span>) <span class="keyword">like</span>, (<span class="keyword">not</span>) <span class="keyword">in</span>, (<span class="keyword">not</span>) <span class="keyword">between</span> <span class="keyword">and</span>, <span class="keyword">is</span> (<span class="keyword">not</span>), <span class="keyword">and</span>, <span class="keyword">or</span>, <span class="keyword">not</span>, xor</span><br><span class="line">            <span class="keyword">is</span><span class="operator">/</span><span class="keyword">is</span> <span class="keyword">not</span> 加上ture<span class="operator">/</span><span class="literal">false</span><span class="operator">/</span><span class="literal">unknown</span>，检验某个值的真假</span><br><span class="line">            <span class="operator">&lt;=&gt;</span>与<span class="operator">&lt;&gt;</span>功能相同，<span class="operator">&lt;=&gt;</span>可用于<span class="keyword">null</span>比较</span><br><span class="line">d. <span class="keyword">GROUP</span> <span class="keyword">BY</span> 子句, 分组子句</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> 字段<span class="operator">/</span>别名 [排序方式]</span><br><span class="line">    分组后会进行排序。升序：<span class="keyword">ASC</span>，降序：<span class="keyword">DESC</span></span><br><span class="line">    以下[合计函数]需配合 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 使用：</span><br><span class="line">    count 返回不同的非<span class="keyword">NULL</span>值数目  <span class="built_in">count</span>(<span class="operator">*</span>)、<span class="built_in">count</span>(字段)</span><br><span class="line">    sum 求和</span><br><span class="line">    max 求最大值</span><br><span class="line">    min 求最小值</span><br><span class="line">    avg 求平均值</span><br><span class="line">    group_concat 返回带有来自一个组的连接的非<span class="keyword">NULL</span>值的字符串结果。组内字符串连接。</span><br><span class="line">e. <span class="keyword">HAVING</span> 子句，条件子句</span><br><span class="line">    与 <span class="keyword">where</span> 功能、用法相同，执行时机不同。</span><br><span class="line">    <span class="keyword">where</span> 在开始时执行检测数据，对原数据进行过滤。</span><br><span class="line">    <span class="keyword">having</span> 对筛选出的结果再次进行过滤。</span><br><span class="line">    <span class="keyword">having</span> 字段必须是查询出来的，<span class="keyword">where</span> 字段必须是数据表存在的。</span><br><span class="line">    <span class="keyword">where</span> 不可以使用字段的别名，<span class="keyword">having</span> 可以。因为执行<span class="keyword">WHERE</span>代码时，可能尚未确定列值。</span><br><span class="line">    <span class="keyword">where</span> 不可以使用合计函数。一般需用合计函数才会用 <span class="keyword">having</span></span><br><span class="line">    <span class="keyword">SQL</span>标准要求<span class="keyword">HAVING</span>必须引用<span class="keyword">GROUP</span> <span class="keyword">BY</span>子句中的列或用于合计函数中的列。</span><br><span class="line">f. <span class="keyword">ORDER</span> <span class="keyword">BY</span> 子句，排序子句</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> 排序字段<span class="operator">/</span>别名 排序方式 [,排序字段<span class="operator">/</span>别名 排序方式]...</span><br><span class="line">    升序：<span class="keyword">ASC</span>，降序：<span class="keyword">DESC</span></span><br><span class="line">    支持多个字段的排序。</span><br><span class="line">g. LIMIT 子句，限制结果数量子句</span><br><span class="line">    仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从<span class="number">0</span>开始。</span><br><span class="line">    limit 起始位置, 获取条数</span><br><span class="line">    省略第一个参数，表示从索引<span class="number">0</span>开始。limit 获取条数</span><br><span class="line">h. <span class="keyword">DISTINCT</span>, <span class="keyword">ALL</span> 选项</span><br><span class="line">    <span class="keyword">distinct</span> 去除重复记录</span><br><span class="line">    默认为 <span class="keyword">all</span>, 全部记录</span><br></pre></td></tr></table></figure>
<p>UNION</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    将多个<span class="keyword">select</span>查询的结果组合成一个结果集合。</span><br><span class="line">    <span class="keyword">SELECT</span> ... <span class="keyword">UNION</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] <span class="keyword">SELECT</span> ...</span><br><span class="line">    默认 <span class="keyword">DISTINCT</span> 方式，即所有返回的行都是唯一的</span><br><span class="line">    建议，对每个<span class="keyword">SELECT</span>查询加上小括号包裹。</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序时，需加上 LIMIT 进行结合。</span><br><span class="line">    需要各<span class="keyword">select</span>查询的字段数量一样。</span><br><span class="line">    每个<span class="keyword">select</span>查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条<span class="keyword">select</span>语句为准。</span><br><span class="line">子查询</span><br><span class="line">    <span class="operator">-</span> 子查询需用括号包裹。</span><br><span class="line"><span class="comment">-- from型</span></span><br><span class="line">    <span class="keyword">from</span>后要求是一个表，必须给子查询结果取个别名。</span><br><span class="line">    <span class="operator">-</span> 简化每个查询内的条件。</span><br><span class="line">    <span class="operator">-</span> <span class="keyword">from</span>型需将结果生成一个临时表格，可用以原表的锁定的释放。</span><br><span class="line">    <span class="operator">-</span> 子查询返回一个表，表型子查询。</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">0</span>) <span class="keyword">as</span> subfrom <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- where型</span></span><br><span class="line">    <span class="operator">-</span> 子查询返回一个值，标量子查询。</span><br><span class="line">    <span class="operator">-</span> 不需要给子查询取别名。</span><br><span class="line">    <span class="operator">-</span> <span class="keyword">where</span>子查询内的表，不能直接用以更新。</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb <span class="keyword">where</span> money <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">max</span>(money) <span class="keyword">from</span> tb);</span><br><span class="line">    <span class="comment">-- 列子查询</span></span><br><span class="line">        如果子查询结果返回的是一列。</span><br><span class="line">        使用 <span class="keyword">in</span> 或 <span class="keyword">not</span> <span class="keyword">in</span> 完成查询</span><br><span class="line">        <span class="keyword">exists</span> 和 <span class="keyword">not</span> <span class="keyword">exists</span> 条件</span><br><span class="line">            如果子查询返回数据，则返回<span class="number">1</span>或<span class="number">0</span>。常用于判断条件。</span><br><span class="line">            <span class="keyword">select</span> column1 <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2);</span><br><span class="line">    <span class="comment">-- 行子查询</span></span><br><span class="line">        查询条件是一个行。</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> (id, gender) <span class="keyword">in</span> (<span class="keyword">select</span> id, gender <span class="keyword">from</span> t2);</span><br><span class="line">        行构造符：(col1, col2, ...) 或 <span class="type">ROW</span>(col1, col2, ...)</span><br><span class="line">        行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。</span><br><span class="line">    <span class="comment">-- 特殊运算符</span></span><br><span class="line">    <span class="operator">!=</span> <span class="keyword">all</span>()    相当于 <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">    <span class="operator">=</span> <span class="keyword">some</span>()    相当于 <span class="keyword">in</span>。<span class="keyword">any</span> 是 <span class="keyword">some</span> 的别名</span><br><span class="line">    <span class="operator">!=</span> <span class="keyword">some</span>()   不等同于 <span class="keyword">not</span> <span class="keyword">in</span>，不等于其中某一个。</span><br><span class="line">    <span class="keyword">all</span>, <span class="keyword">some</span> 可以配合其他运算符一起使用。</span><br></pre></td></tr></table></figure>


<p>连接查询(join)</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">    将多个表的字段进行连接，可以指定连接条件。</span><br><span class="line"><span class="comment">-- 内连接(inner join)</span></span><br><span class="line">    - 默认就是内连接，可省略<span class="keyword">inner</span>。</span><br><span class="line">    - 只有数据存在时才能发送连接。即连接结果不能出现空行。</span><br><span class="line">    <span class="keyword">on</span> 表示连接条件。其条件表达式与<span class="keyword">where</span>类似。也可以省略条件（表示条件永远为真）</span><br><span class="line">    也可用<span class="keyword">where</span>表示连接条件。</span><br><span class="line">    还有 <span class="keyword">using</span>, 但需字段名相同。 <span class="keyword">using</span>(字段名)</span><br><span class="line">    <span class="comment">-- 交叉连接 cross join</span></span><br><span class="line">        即，没有条件的内连接。</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> tb1 <span class="keyword">cross</span> <span class="keyword">join</span> tb2;</span><br><span class="line"><span class="comment">-- 外连接(outer join)</span></span><br><span class="line">    - 如果数据不存在，也会出现在连接结果中。</span><br><span class="line">    <span class="comment">-- 左外连接 left join</span></span><br><span class="line">        如果数据不存在，左表记录会出现，而右表为<span class="keyword">null</span>填充</span><br><span class="line">    <span class="comment">-- 右外连接 right join</span></span><br><span class="line">        如果数据不存在，右表记录会出现，而左表为<span class="keyword">null</span>填充</span><br><span class="line"><span class="comment">-- 自然连接(natural join)</span></span><br><span class="line">    自动判断连接条件完成连接。</span><br><span class="line">    相当于省略了<span class="keyword">using</span>，会自动查找相同字段名。</span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">left join</span></span><br><span class="line">    <span class="keyword">natural</span> <span class="keyword">right join</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">info</span>.id, <span class="keyword">info</span>.name, <span class="keyword">info</span>.stu_num, extra_info.hobby, extra_info.sex <span class="keyword">from</span> <span class="keyword">info</span>, extra_info <span class="keyword">where</span> <span class="keyword">info</span>.stu_num = extra_info.stu_id;</span><br></pre></td></tr></table></figure>
<p>INSERT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>语句获得的数据可以用<span class="keyword">insert</span>插入。</span><br><span class="line">可以省略对列的指定，要求 <span class="keyword">values</span> () 括号内，提供给了按照列顺序出现的所有字段的值。</span><br><span class="line">    或者使用<span class="keyword">set</span>语法。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SET</span> field<span class="operator">=</span><span class="keyword">value</span>,...；</span><br><span class="line">可以一次性使用多个值，采用(), (), ();的形式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (), (), ();</span><br><span class="line">可以在列值指定时，使用表达式。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="number">10</span><span class="operator">+</span><span class="number">10</span>, now());</span><br><span class="line">可以使用一个特殊值 <span class="keyword">DEFAULT</span>，表示该列使用默认值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span> (field_value, <span class="keyword">DEFAULT</span>);</span><br><span class="line">可以通过一个查询的结果，作为需要插入的值。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">SELECT</span> ...;</span><br><span class="line">可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_name <span class="keyword">VALUES</span><span class="operator">/</span><span class="keyword">SET</span><span class="operator">/</span><span class="keyword">SELECT</span> <span class="keyword">ON</span> DUPLICATE KEY UPDATE 字段<span class="operator">=</span>值, …;</span><br></pre></td></tr></table></figure>
<p>DELETE</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_definition] [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...] [<span class="keyword">LIMIT</span> row_count]</span><br><span class="line">按照条件删除。<span class="keyword">where</span></span><br><span class="line">指定删除的最多记录数。<span class="keyword">limit</span></span><br><span class="line">可以通过排序条件删除。<span class="keyword">order</span> <span class="keyword">by</span> + <span class="keyword">limit</span></span><br><span class="line">支持多表删除，使用类似连接语法。</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 需要删除数据多表<span class="number">1</span>，表<span class="number">2</span> <span class="keyword">using</span> 表连接操作 条件。</span><br></pre></td></tr></table></figure>
<p>TRUNCATE</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] tbl_name</span><br><span class="line">清空数据</span><br><span class="line">删除重建表</span><br><span class="line">区别：</span><br><span class="line"><span class="number">1</span>，<span class="keyword">truncate</span> 是删除表再创建，<span class="keyword">delete</span> 是逐条删除</span><br><span class="line"><span class="number">2</span>，<span class="keyword">truncate</span> 重置auto_increment的值。而<span class="keyword">delete</span>不会</span><br><span class="line"><span class="number">3</span>，<span class="keyword">truncate</span> 不知道删除了几条，而<span class="keyword">delete</span>知道。</span><br><span class="line"><span class="number">4</span>，当被用于带分区的表时，<span class="keyword">truncate</span> 会保留分区</span><br></pre></td></tr></table></figure>
<p>备份与还原</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">备份，将数据的结构与表内数据保存起来。</span><br><span class="line">利用 mysqldump 指令完成。</span><br><span class="line"><span class="comment">-- 导出</span></span><br><span class="line">mysqldump [<span class="keyword">options</span>] db_name [<span class="keyword">tables</span>]</span><br><span class="line">mysqldump [<span class="keyword">options</span>] <span class="comment">---database DB1 [DB2 DB3...]</span></span><br><span class="line">mysqldump [<span class="keyword">options</span>] <span class="comment">--all--database</span></span><br><span class="line"><span class="number">1.</span> 导出一张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.<span class="keyword">sql</span>)</span><br><span class="line"><span class="number">2.</span> 导出多张表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 表<span class="number">1</span> 表<span class="number">2</span> 表<span class="number">3</span> &gt; 文件名(D:/a.<span class="keyword">sql</span>)</span><br><span class="line"><span class="number">3.</span> 导出所有表</span><br><span class="line">　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.<span class="keyword">sql</span>)</span><br><span class="line"><span class="number">4.</span> 导出一个库</span><br><span class="line">　　mysqldump -u用户名 -p密码 <span class="comment">--lock-all-tables --database 库名 &gt; 文件名(D:/a.sql)</span></span><br><span class="line">可以-w携带<span class="keyword">WHERE</span>条件</span><br><span class="line"><span class="comment">-- 导入</span></span><br><span class="line"><span class="number">1.</span> 在登录mysql的情况下：</span><br><span class="line">　　source  备份文件</span><br><span class="line"><span class="number">2.</span> 在不登录的情况下</span><br><span class="line">　　mysql -u用户名 -p密码 库名 &lt; 备份文件</span><br></pre></td></tr></table></figure>
<p>视图</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">什么是视图：</span><br><span class="line">    视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。</span><br><span class="line">    视图具有表结构文件，但不存在数据文件。</span><br><span class="line">    对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。</span><br><span class="line">    视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。</span><br><span class="line">-- 创建视图</span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="built_in">REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE&#125;] <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">    - 视图名必须唯一，同时不能与表重名。</span><br><span class="line">    - 视图可以使用<span class="keyword">select</span>语句查询到的列名，也可以自己指定相应的列名。</span><br><span class="line">    - 可以指定视图执行的算法，通过ALGORITHM指定。</span><br><span class="line">    - column_list如果存在，则数目必须等于<span class="keyword">SELECT</span>语句检索的列数</span><br><span class="line">-- 查看结构</span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br><span class="line">-- 删除视图</span><br><span class="line">    - 删除视图后，数据依然存在。</span><br><span class="line">    - 可同时删除多个视图。</span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name ...</span><br><span class="line">-- 修改视图结构</span><br><span class="line">    - 一般不修改视图，因为不是所有的更新视图都会映射到表上。</span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name [(column_list)] <span class="keyword">AS</span> select_statement</span><br><span class="line">-- 视图作用</span><br><span class="line">    <span class="number">1.</span> 简化业务逻辑</span><br><span class="line">    <span class="number">2.</span> 对客户端隐藏真实的表结构</span><br><span class="line">-- 视图算法(ALGORITHM)</span><br><span class="line">    <span class="keyword">MERGE</span>       合并</span><br><span class="line">        将视图的查询语句，与外部查询需要先合并再执行！</span><br><span class="line">    TEMPTABLE   临时表</span><br><span class="line">        将视图执行完毕后，形成临时表，再做外层查询！</span><br><span class="line">    UNDEFINED   未定义(默认)，指的是MySQL自主去选择相应的算法。</span><br></pre></td></tr></table></figure>
<p>事务(transaction)</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。</span><br><span class="line">    - 支持连续<span class="keyword">SQL</span>的集体成功或集体撤销。</span><br><span class="line">    - 事务是数据库在数据晚自习方面的一个功能。</span><br><span class="line">    - 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。</span><br><span class="line">    - InnoDB被称为事务安全型引擎。</span><br><span class="line"><span class="comment">-- 事务开启</span></span><br><span class="line">    <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>; 或者 <span class="keyword">BEGIN</span>;</span><br><span class="line">    开启事务后，所有被执行的<span class="keyword">SQL</span>语句均被认作当前事务内的<span class="keyword">SQL</span>语句。</span><br><span class="line"><span class="comment">-- 事务提交</span></span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 事务回滚</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span>;</span><br><span class="line">    如果部分操作发生问题，映射到事务开启前。</span><br><span class="line"><span class="comment">-- 事务的特性</span></span><br><span class="line">    <span class="number">1.</span> 原子性（Atomicity）</span><br><span class="line">        事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</span><br><span class="line">    <span class="number">2.</span> 一致性（Consistency）</span><br><span class="line">        事务前后数据的完整性必须保持一致。</span><br><span class="line">        - 事务开始和结束时，外部数据一致</span><br><span class="line">        - 在整个事务过程中，操作是连续的</span><br><span class="line">    <span class="number">3.</span> 隔离性（<span class="keyword">Isolation</span>）</span><br><span class="line">        多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。</span><br><span class="line">    <span class="number">4.</span> 持久性（Durability）</span><br><span class="line">        一个事务一旦被提交，它对数据库中的数据改变就是永久性的。</span><br><span class="line"><span class="comment">-- 事务的实现</span></span><br><span class="line">    <span class="number">1.</span> 要求是事务支持的表类型</span><br><span class="line">    <span class="number">2.</span> 执行一组相关的操作前开启事务</span><br><span class="line">    <span class="number">3.</span> 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。</span><br><span class="line"><span class="comment">-- 事务的原理</span></span><br><span class="line">    利用InnoDB的自动提交(autocommit)特性完成。</span><br><span class="line">    普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。</span><br><span class="line">    而事务是暂时关闭“自动提交”机制，需要<span class="keyword">commit</span>提交持久化数据操作。</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。</span><br><span class="line">    <span class="number">2.</span> 事务不能被嵌套</span><br><span class="line"><span class="comment">-- 保存点</span></span><br><span class="line">    <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 设置一个事务保存点</span></span><br><span class="line">    <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 回滚到保存点</span></span><br><span class="line">    <span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> 保存点名称 <span class="comment">-- 删除保存点</span></span><br><span class="line"><span class="comment">-- InnoDB自动提交特性设置</span></span><br><span class="line">    <span class="keyword">SET</span> autocommit = <span class="number">0</span>|<span class="number">1</span>;   <span class="number">0</span>表示关闭自动提交，<span class="number">1</span>表示开启自动提交。</span><br><span class="line">    - 如果关闭了，那普通操作的结果对其他客户端也不可见，需要<span class="keyword">commit</span>提交后才能持久化数据操作。</span><br><span class="line">    - 也可以关闭自动提交来开启事务。但与<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>不同的是，</span><br><span class="line">        <span class="keyword">SET</span> autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)</span><br><span class="line">        而<span class="keyword">START</span> <span class="keyword">TRANSACTION</span>记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)</span><br></pre></td></tr></table></figure>
<p>锁表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">表锁定只用于防止其它客户端进行不正当地读取和写入</span><br><span class="line">MyISAM 支持表锁，InnoDB 支持行锁</span><br><span class="line"><span class="comment">-- 锁定</span></span><br><span class="line">    <span class="keyword">LOCK</span> <span class="keyword">TABLES</span> tbl_name [<span class="keyword">AS</span> <span class="keyword">alias</span>]</span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">    UNLOCK <span class="keyword">TABLES</span></span><br></pre></td></tr></table></figure>
<p>触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">    触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象</span><br><span class="line">    监听：记录的增加、修改、删除。</span><br><span class="line"><span class="comment">-- 创建触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name trigger_time trigger_event <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> trigger_stmt</span><br><span class="line">    参数：</span><br><span class="line">    trigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。</span><br><span class="line">    trigger_event指明了激活触发程序的语句的类型</span><br><span class="line">        <span class="keyword">INSERT</span>：将新行插入表时激活触发程序</span><br><span class="line">        UPDATE：更改某一行时激活触发程序</span><br><span class="line">        <span class="keyword">DELETE</span>：从表中删除某一行时激活触发程序</span><br><span class="line">    tbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。</span><br><span class="line">    trigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [schema_name.]trigger_name</span><br><span class="line">可以使用<span class="keyword">old</span>和<span class="keyword">new</span>代替旧的和新的数据</span><br><span class="line">    更新操作，更新前是<span class="keyword">old</span>，更新后是new.</span><br><span class="line">    删除操作，只有old.</span><br><span class="line">    增加操作，只有new.</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line">    <span class="number">1.</span> 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符连接函数</span></span><br><span class="line">concat(str1,str2,...])</span><br><span class="line">concat_ws(separator,str1,str2,...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分支语句</span></span><br><span class="line">if 条件 <span class="keyword">then</span></span><br><span class="line">    执行语句</span><br><span class="line">elseif 条件 <span class="keyword">then</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    执行语句</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改最外层语句结束符</span></span><br><span class="line">delimiter 自定义结束符号</span><br><span class="line">    <span class="keyword">SQL</span>语句</span><br><span class="line">自定义结束符号</span><br><span class="line">delimiter ;     <span class="comment">-- 修改回原来的分号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语句块包裹</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    语句块</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 特殊的执行</span></span><br><span class="line"><span class="number">1.</span> 只要添加记录，就会触发程序。</span><br><span class="line"><span class="number">2.</span> <span class="keyword">Insert</span> <span class="keyword">into</span> <span class="keyword">on</span> duplicate key update 语法会触发：</span><br><span class="line">    如果没有重复记录，会触发 before <span class="keyword">insert</span>, after <span class="keyword">insert</span>;</span><br><span class="line">    如果有重复记录并更新，会触发 before <span class="keyword">insert</span>, before update, after update;</span><br><span class="line">    如果有重复记录但是没有发生更新，则触发 before <span class="keyword">insert</span>, before update</span><br><span class="line"><span class="number">3.</span> Replace 语法 如果有记录，则执行 before <span class="keyword">insert</span>, before <span class="keyword">delete</span>, after <span class="keyword">delete</span>, after <span class="keyword">insert</span></span><br></pre></td></tr></table></figure>
<p>SQL编程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--// 局部变量 ----------</span></span><br><span class="line"><span class="comment">-- 变量声明</span></span><br><span class="line">    <span class="keyword">declare</span> var_name[,...] type [<span class="keyword">default</span> <span class="keyword">value</span>]</span><br><span class="line">    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个<span class="keyword">default</span>子句。值可以被指定为一个表达式，不需要为一个常数。如果没有<span class="keyword">default</span>子句，初始值为<span class="keyword">null</span>。</span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line">    使用 <span class="keyword">set</span> 和 <span class="keyword">select</span> <span class="keyword">into</span> 语句为变量赋值。</span><br><span class="line">    <span class="operator">-</span> 注意：在函数内是可以使用全局变量（用户自定义的变量）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 全局变量 ----------</span></span><br><span class="line"><span class="comment">-- 定义、赋值</span></span><br><span class="line"><span class="keyword">set</span> 语句可以定义并为变量赋值。</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var</span> <span class="operator">=</span> <span class="keyword">value</span>;</span><br><span class="line">也可以使用<span class="keyword">select</span> <span class="keyword">into</span>语句为变量初始化并赋值。这样要求<span class="keyword">select</span>语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。</span><br><span class="line">还可以把赋值语句看作一个表达式，通过<span class="keyword">select</span>执行完成。此时为了避免<span class="operator">=</span>被当作关系运算符看待，使用:<span class="operator">=</span>代替。（<span class="keyword">set</span>语句可以使用<span class="operator">=</span> 和 :<span class="operator">=</span>）。</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var</span>:<span class="operator">=</span><span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@v1</span>:<span class="operator">=</span>id, <span class="variable">@v2</span><span class="operator">=</span>name <span class="keyword">from</span> t1 limit <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_name <span class="keyword">where</span> <span class="variable">@var</span>:<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">into</span> 可以将表中查询获得的数据赋给变量。</span><br><span class="line">    <span class="operator">-</span><span class="operator">|</span> <span class="keyword">select</span> <span class="built_in">max</span>(height) <span class="keyword">into</span> <span class="variable">@max</span>_height <span class="keyword">from</span> tb;</span><br><span class="line"><span class="comment">-- 自定义变量名</span></span><br><span class="line">为了避免<span class="keyword">select</span>语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。</span><br><span class="line"><span class="variable">@var</span><span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">    <span class="operator">-</span> 变量被定义后，在整个会话周期都有效（登录到退出）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 控制结构 ----------</span></span><br><span class="line"><span class="comment">-- if语句</span></span><br><span class="line">if search_condition <span class="keyword">then</span></span><br><span class="line">    statement_list   </span><br><span class="line">[elseif search_condition <span class="keyword">then</span></span><br><span class="line">    statement_list]</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">else</span></span><br><span class="line">    statement_list]</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="comment">-- case语句</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">value</span> <span class="keyword">WHEN</span> [compare<span class="operator">-</span><span class="keyword">value</span>] <span class="keyword">THEN</span> <span class="keyword">result</span></span><br><span class="line">[<span class="keyword">WHEN</span> [compare<span class="operator">-</span><span class="keyword">value</span>] <span class="keyword">THEN</span> <span class="keyword">result</span> ...]</span><br><span class="line">[<span class="keyword">ELSE</span> <span class="keyword">result</span>]</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="comment">-- while循环</span></span><br><span class="line">[begin_label:] while search_condition do</span><br><span class="line">    statement_list</span><br><span class="line"><span class="keyword">end</span> while [end_label];</span><br><span class="line"><span class="operator">-</span> 如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。</span><br><span class="line">    <span class="comment">-- 退出循环</span></span><br><span class="line">        退出整个循环 leave</span><br><span class="line">        退出当前循环 iterate</span><br><span class="line">        通过退出的标签决定退出哪个循环</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--// 内置函数 ----------</span></span><br><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line"><span class="built_in">abs</span>(x)          <span class="comment">-- 绝对值 abs(-10.9) = 10</span></span><br><span class="line">format(x, d)    <span class="comment">-- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46</span></span><br><span class="line"><span class="built_in">ceil</span>(x)         <span class="comment">-- 向上取整 ceil(10.1) = 11</span></span><br><span class="line"><span class="built_in">floor</span>(x)        <span class="comment">-- 向下取整 floor (10.1) = 10</span></span><br><span class="line">round(x)        <span class="comment">-- 四舍五入去整</span></span><br><span class="line"><span class="built_in">mod</span>(m, n)       <span class="comment">-- m%n m mod n 求余 10%3=1</span></span><br><span class="line">pi()            <span class="comment">-- 获得圆周率</span></span><br><span class="line">pow(m, n)       <span class="comment">-- m^n</span></span><br><span class="line"><span class="built_in">sqrt</span>(x)         <span class="comment">-- 算术平方根</span></span><br><span class="line">rand()          <span class="comment">-- 随机数</span></span><br><span class="line"><span class="keyword">truncate</span>(x, d)  <span class="comment">-- 截取d位小数</span></span><br><span class="line"><span class="comment">-- 时间日期函数</span></span><br><span class="line">now(), <span class="built_in">current_timestamp</span>();     <span class="comment">-- 当前日期时间</span></span><br><span class="line"><span class="built_in">current_date</span>();                 <span class="comment">-- 当前日期</span></span><br><span class="line"><span class="built_in">current_time</span>();                 <span class="comment">-- 当前时间</span></span><br><span class="line"><span class="type">date</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取日期部分</span></span><br><span class="line"><span class="type">time</span>(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>);    <span class="comment">-- 获取时间部分</span></span><br><span class="line">date_format(<span class="string">&#x27;yyyy-mm-dd hh:ii:ss&#x27;</span>, <span class="string">&#x27;%d %y %a %d %m %b %j&#x27;</span>); <span class="comment">-- 格式化时间</span></span><br><span class="line">unix_timestamp();               <span class="comment">-- 获得unix时间戳</span></span><br><span class="line">from_unixtime();                <span class="comment">-- 从时间戳获得时间</span></span><br><span class="line"><span class="comment">-- 字符串函数</span></span><br><span class="line">length(string)          <span class="comment">-- string长度，字节</span></span><br><span class="line"><span class="keyword">char_length</span>(string)     <span class="comment">-- string的字符个数</span></span><br><span class="line"><span class="built_in">substring</span>(str, position [,length])      <span class="comment">-- 从str的position开始,取length个字符</span></span><br><span class="line">replace(str ,search_str ,replace_str)   <span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line">instr(string ,substring)    <span class="comment">-- 返回substring首次在string中出现的位置</span></span><br><span class="line">concat(string [,...])   <span class="comment">-- 连接字串</span></span><br><span class="line">charset(str)            <span class="comment">-- 返回字串字符集</span></span><br><span class="line">lcase(string)           <span class="comment">-- 转换成小写</span></span><br><span class="line"><span class="keyword">left</span>(string, length)    <span class="comment">-- 从string2中的左边起取length个字符</span></span><br><span class="line">load_file(file_name)    <span class="comment">-- 从文件读取内容</span></span><br><span class="line">locate(substring, string [,start_position]) <span class="comment">-- 同instr,但可指定开始位置</span></span><br><span class="line">lpad(string, length, pad)   <span class="comment">-- 重复用pad加在string开头,直到字串长度为length</span></span><br><span class="line">ltrim(string)           <span class="comment">-- 去除前端空格</span></span><br><span class="line">repeat(string, count)   <span class="comment">-- 重复count次</span></span><br><span class="line">rpad(string, length, pad)   <span class="comment">--在str后用pad补充,直到长度为length</span></span><br><span class="line">rtrim(string)           <span class="comment">-- 去除后端空格</span></span><br><span class="line">strcmp(string1 ,string2)    <span class="comment">-- 逐字符比较两字串大小</span></span><br><span class="line"><span class="comment">-- 流程函数</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> [<span class="keyword">condition</span>] <span class="keyword">then</span> <span class="keyword">result</span> [<span class="keyword">when</span> [<span class="keyword">condition</span>] <span class="keyword">then</span> <span class="keyword">result</span> ...] [<span class="keyword">else</span> <span class="keyword">result</span>] <span class="keyword">end</span>   多分支</span><br><span class="line">if(expr1,expr2,expr3)  双分支。</span><br><span class="line"><span class="comment">-- 聚合函数</span></span><br><span class="line"><span class="built_in">count</span>()</span><br><span class="line"><span class="built_in">sum</span>();</span><br><span class="line"><span class="built_in">max</span>();</span><br><span class="line"><span class="built_in">min</span>();</span><br><span class="line"><span class="built_in">avg</span>();</span><br><span class="line">group_concat()</span><br><span class="line"><span class="comment">-- 其他常用函数</span></span><br><span class="line">md5();</span><br><span class="line"><span class="keyword">default</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">--// 存储函数，自定义函数 ----------</span></span><br><span class="line"><span class="comment">-- 新建</span></span><br><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name (参数列表) <span class="keyword">RETURNS</span> 返回值类型</span><br><span class="line">        函数体</span><br><span class="line">    <span class="operator">-</span> 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。</span><br><span class="line">    <span class="operator">-</span> 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。</span><br><span class="line">    <span class="operator">-</span> 参数部分，由&quot;参数名&quot;和&quot;参数类型&quot;组成。多个参数用逗号隔开。</span><br><span class="line">    <span class="operator">-</span> 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。</span><br><span class="line">    <span class="operator">-</span> 多条语句应该使用 begin...end 语句块包含。</span><br><span class="line">    <span class="operator">-</span> 一定要有 <span class="keyword">return</span> 返回值语句。</span><br><span class="line"><span class="comment">-- 删除</span></span><br><span class="line">    <span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [IF <span class="keyword">EXISTS</span>] function_name;</span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;partten&#x27;</span></span><br><span class="line">    <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> function_name;</span><br><span class="line"><span class="comment">-- 修改</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">FUNCTION</span> function_name 函数选项</span><br><span class="line"></span><br><span class="line"><span class="comment">--// 存储过程，自定义功能 ----------</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">存储存储过程 是一段代码（过程），存储在数据库中的<span class="keyword">sql</span>组成。</span><br><span class="line">一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。</span><br><span class="line">而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过<span class="keyword">call</span>执行。</span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name (参数列表)</span><br><span class="line">    过程体</span><br><span class="line">参数列表：不同于函数的参数列表，需要指明参数类型</span><br><span class="line"><span class="keyword">IN</span>，表示输入型</span><br><span class="line"><span class="keyword">OUT</span>，表示输出型</span><br><span class="line"><span class="keyword">INOUT</span>，表示混合型</span><br><span class="line">注意，没有返回值。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 存储过程 */</span> <span class="comment">------------------</span></span><br><span class="line">存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。</span><br><span class="line">调用：<span class="keyword">CALL</span> 过程名</span><br><span class="line"><span class="comment">-- 注意</span></span><br><span class="line"><span class="operator">-</span> 没有返回值。</span><br><span class="line"><span class="operator">-</span> 只能单独调用，不可夹杂在其他语句中</span><br><span class="line"><span class="comment">-- 参数</span></span><br><span class="line"><span class="keyword">IN</span><span class="operator">|</span><span class="keyword">OUT</span><span class="operator">|</span><span class="keyword">INOUT</span> 参数名 数据类型</span><br><span class="line"><span class="keyword">IN</span>      输入：在调用过程中，将数据输入到过程体内部的参数</span><br><span class="line"><span class="keyword">OUT</span>     输出：在调用过程中，将过程体处理完的结果返回到客户端</span><br><span class="line"><span class="keyword">INOUT</span>   输入输出：既可输入，也可输出</span><br><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 过程名 (参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    过程体</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<p>用户和权限管理</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- root密码重置</span></span><br><span class="line"><span class="number">1.</span> 停止MySQL服务</span><br><span class="line"><span class="number">2.</span>  [Linux] /usr/<span class="keyword">local</span>/mysql/bin/safe_mysqld <span class="comment">--skip-grant-tables &amp;</span></span><br><span class="line">    [Windows] mysqld <span class="comment">--skip-grant-tables</span></span><br><span class="line"><span class="number">3.</span> use mysql;</span><br><span class="line"><span class="number">4.</span> <span class="keyword">UPDATE</span> `<span class="keyword">user</span>` <span class="keyword">SET</span> <span class="keyword">PASSWORD</span>=<span class="keyword">PASSWORD</span>(&quot;密码&quot;) <span class="keyword">WHERE</span> `<span class="keyword">user</span>` = &quot;root&quot;;</span><br><span class="line"><span class="number">5.</span> FLUSH <span class="keyword">PRIVILEGES</span>;</span><br><span class="line">用户信息表：mysql.<span class="keyword">user</span></span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="comment">-- 增加用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 IDENTIFIED <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] 密码(字符串)</span><br><span class="line">    - 必须拥有mysql数据库的全局<span class="keyword">CREATE</span> <span class="keyword">USER</span>权限，或拥有<span class="keyword">INSERT</span>权限。</span><br><span class="line">    - 只能创建用户，不能赋予权限。</span><br><span class="line">    - 用户名，注意引号：如 <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;192.168.1.1&#x27;</span></span><br><span class="line">    - 密码也需引号，纯数字密码也要加引号</span><br><span class="line">    - 要在纯文本中指定密码，需忽略<span class="keyword">PASSWORD</span>关键词。要把密码指定为由<span class="keyword">PASSWORD</span>()函数返回的混编值，需包含关键字<span class="keyword">PASSWORD</span></span><br><span class="line"><span class="comment">-- 重命名用户</span></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;密码&#x27;</span>)  <span class="comment">-- 为当前用户设置密码</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> 用户名 = <span class="keyword">PASSWORD</span>(<span class="string">&#x27;密码&#x27;</span>) <span class="comment">-- 为指定用户设置密码</span></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> 用户名</span><br><span class="line"><span class="comment">-- 分配权限/添加用户</span></span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">TO</span> 用户名 [IDENTIFIED <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>] <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    - <span class="keyword">all</span> <span class="keyword">privileges</span> 表示所有权限</span><br><span class="line">    - *.* 表示所有库的所有表</span><br><span class="line">    - 库名.表名 表示某库下面的某表</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> `pms`.* <span class="keyword">TO</span> <span class="string">&#x27;pms&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;pms0817&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> 用户名</span><br><span class="line">    <span class="comment">-- 查看当前用户权限</span></span><br><span class="line">    <span class="keyword">SHOW</span> GRANTS; 或 <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>; 或 <span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">CURRENT_USER</span>();</span><br><span class="line"><span class="comment">-- 撤消权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 表名 <span class="keyword">FROM</span> 用户名</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span>, <span class="keyword">GRANT</span> <span class="keyword">OPTION</span> <span class="keyword">FROM</span> 用户名   <span class="comment">-- 撤销所有权限</span></span><br><span class="line"><span class="comment">-- 权限层级</span></span><br><span class="line"><span class="comment">-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。</span></span><br><span class="line">全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.<span class="keyword">user</span></span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*和 <span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.*只授予和撤销全局权限。</span><br><span class="line">数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.*只授予和撤销数据库权限。</span><br><span class="line">表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name和<span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> db_name.tbl_name只授予和撤销表权限。</span><br><span class="line">列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv</span><br><span class="line">    当使用<span class="keyword">REVOKE</span>时，您必须指定与被授权列相同的列。</span><br><span class="line"><span class="comment">-- 权限列表</span></span><br><span class="line"><span class="keyword">ALL</span> [<span class="keyword">PRIVILEGES</span>]    <span class="comment">-- 设置除GRANT OPTION之外的所有简单权限</span></span><br><span class="line"><span class="keyword">ALTER</span>   <span class="comment">-- 允许使用ALTER TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">ROUTINE</span>   <span class="comment">-- 更改或取消已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="comment">-- 允许使用CREATE TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROUTINE</span>  <span class="comment">-- 创建已存储的子程序</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许使用CREATE TEMPORARY TABLE</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span>     <span class="comment">-- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>     <span class="comment">-- 允许使用CREATE VIEW</span></span><br><span class="line"><span class="keyword">DELETE</span>  <span class="comment">-- 允许使用DELETE</span></span><br><span class="line"><span class="keyword">DROP</span>    <span class="comment">-- 允许使用DROP TABLE</span></span><br><span class="line"><span class="keyword">EXECUTE</span>     <span class="comment">-- 允许用户运行已存储的子程序</span></span><br><span class="line">FILE    <span class="comment">-- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE</span></span><br><span class="line"><span class="keyword">INDEX</span>   <span class="comment">-- 允许使用CREATE INDEX和DROP INDEX</span></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="comment">-- 允许使用INSERT</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span>     <span class="comment">-- 允许对您拥有SELECT权限的表使用LOCK TABLES</span></span><br><span class="line">PROCESS     <span class="comment">-- 允许使用SHOW FULL PROCESSLIST</span></span><br><span class="line"><span class="keyword">REFERENCES</span>  <span class="comment">-- 未被实施</span></span><br><span class="line">RELOAD  <span class="comment">-- 允许使用FLUSH</span></span><br><span class="line"><span class="keyword">REPLICATION</span> CLIENT  <span class="comment">-- 允许用户询问从属服务器或主服务器的地址</span></span><br><span class="line"><span class="keyword">REPLICATION</span> SLAVE   <span class="comment">-- 用于复制型从属服务器（从主服务器中读取二进制日志事件）</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="comment">-- 允许使用SELECT</span></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES  <span class="comment">-- 显示所有数据库</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VIEW</span>   <span class="comment">-- 允许使用SHOW CREATE VIEW</span></span><br><span class="line">SHUTDOWN    <span class="comment">-- 允许使用mysqladmin shutdown</span></span><br><span class="line">SUPER   <span class="comment">-- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。</span></span><br><span class="line"><span class="keyword">UPDATE</span>  <span class="comment">-- 允许使用UPDATE</span></span><br><span class="line"><span class="keyword">USAGE</span>   <span class="comment">-- “无权限”的同义词</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">OPTION</span>    <span class="comment">-- 允许授予权限</span></span><br></pre></td></tr></table></figure>
<p>表维护</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">-- 分析和存储表的关键字分布</span><br><span class="line"><span class="symbol">ANALYZE</span> [<span class="symbol">LOCAL</span> | <span class="symbol">NO_WRITE_TO_BINLOG</span>] <span class="symbol">TABLE</span> 表名 ...</span><br><span class="line">-- 检查一个或多个表是否有错误</span><br><span class="line"><span class="symbol">CHECK</span> <span class="symbol">TABLE</span> tbl_name [, tbl_name] ... [option] ...</span><br><span class="line">option = &#123;<span class="symbol">QUICK</span> | <span class="symbol">FAST</span> | <span class="symbol">MEDIUM</span> | <span class="symbol">EXTENDED</span> | <span class="symbol">CHANGED</span>&#125;</span><br><span class="line">-- 整理数据文件的碎片</span><br><span class="line"><span class="symbol">OPTIMIZE</span> [<span class="symbol">LOCAL</span> | <span class="symbol">NO_WRITE_TO_BINLOG</span>] <span class="symbol">TABLE</span> tbl_name [, tbl_name] ...</span><br></pre></td></tr></table></figure>
<p>杂项</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！</span><br><span class="line">2. 每个库目录存在一个保存当前数据库的选项文件<span class="keyword">db</span>.opt。</span><br><span class="line">3. 注释：</span><br><span class="line">    单行注释 # 注释内容</span><br><span class="line">    多行注释 <span class="comment">/* 注释内容 */</span></span><br><span class="line">    单行注释 -- 注释内容     (标准SQL注释风格，要求双破折号后加一空格符（空格、<span class="keyword">TAB</span>、换行等）)</span><br><span class="line">4. 模式通配符：</span><br><span class="line">    _   任意单个字符</span><br><span class="line">    %   任意多个字符，甚至包括零字符</span><br><span class="line">    单引号需要进行转义 &#x27;</span><br><span class="line">5. CMD命令行内的语句结束符可以为 <span class="string">&quot;;&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;g&quot;</span>，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。</span><br><span class="line">6. SQL对大小写不敏感</span><br><span class="line">7. 清除已有语句：c</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
</search>
