<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bean</title>
    <url>/2021/04/13/Bean/</url>
    <content><![CDATA[<p><code>ConfigurationProperties</code> 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConfigurationProperties &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;prefix&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">	<span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在类名上加上 <code>@ConfigurationProperties</code> 注解，读取 <code>application.properties</code>  配置 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p>启动项目 控制台打印 <code>url</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(dataSourceBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 <code>Bean</code> 的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 打印了 <code>root</code></p>
<p><code>@Component</code> 配置 <code>Bean</code> （<code>@Repository @Service @Controller</code> 等效），定义一个接口 <code>Todo</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个实现类 <code>Foo</code>  <code>Bar</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> <span class="keyword">implements</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@Autowired</code> 根据类型注入，所有类型为 <code>Todo</code> 的全部注入 <code>list</code> ( 指 <code>For</code> 和 <code>Bar</code>)<br><code>@Inject</code> 也是按类型注入，不过没有 <code>required</code> 属性<br><code>@Qualifier</code> 根据名称注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;todos&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todos</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Todo&gt; list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier(&quot;todos&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Todos todos;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        todos.getList().stream().forEach( e -&gt; e.print());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 控制台打印 <code>bar</code> 和 <code>foo</code><br>如果 <code>foo</code> 要优先打印，在 <code>Foo</code> 类上加  <code>@Order(value = 1)</code>，值越小优先级越高，<code>Foo</code> 优先加载</p>
<p>实现延迟加载 定义一个 <code>LazyDo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">todo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;lazy todo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造注入 <code>lazyDao</code>，  <code>@Resource</code> 默认按名称注入，匹配不上按类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LazyDo lazyDo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;lazyDo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setLazyDo</span><span class="params">(LazyDo lazyDo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lazyDo = lazyDo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lazyDo.todo();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 <code>lazyDao</code> 加载为 <code>null</code></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.lazyDo = lazyDo; lazyDao: <span class="literal">null</span> lazyDo: <span class="string">&quot;com.kangpan.model.lazy@7a65a360&quot;</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问地址 <code>http://localhost:8081/test/</code> 控制台打印 <code>lazy todo</code></p>
<p><code> Bean</code> 默认是单例，在类上加注解 <code>@Scope(&quot;prototype&quot;)</code> 多例</p>
<p>看下 <code>Bean</code> 初始化 及 销毁前 执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目 打印台输出 <code>init</code> ，关闭项目 打印台输出 <code>destroy</code></p>
<p>根据当前环境配置 <code>Bean</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDev</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestDev</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>application.properties</code> 配置 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">test.name=testName <span class="comment">// @Value 赋值</span></span><br><span class="line">spring.profiles.active=dev <span class="comment">// 当前环境</span></span><br></pre></td></tr></table></figure>
<p>配置 <code>dev</code> 和 <code>test</code>  环境下的 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dev</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;dev&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestDev <span class="title">testDev</span><span class="params">(<span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestDev(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestDev <span class="title">testTest</span><span class="params">(<span class="meta">@Value(&quot;$&#123;test.name&#125;&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestDev(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestDev testDev;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(path = &quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> testDev.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>浏览器输入 <code>http://localhost:8081/test/</code> 打印 testName</p>
<p><code>XML</code> 配置  <code>Bean</code> 简化</p>
<p>属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>,value = <span class="string">&quot;value&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>构造参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;constructor-arg type=<span class="string">&quot;java.lang.String&quot;</span> value=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line">&lt;constructor-arg ref=<span class="string">&quot;refBean&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>集合</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key=<span class="string">&quot;key&quot;</span> value=<span class="string">&quot;value&quot;</span>&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name = <span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">  &lt;map&gt;</span><br><span class="line">    &lt;entry key-ref=<span class="string">&quot;keyBean&quot;</span> value-ref=<span class="string">&quot;valueBean&quot;</span>&gt;</span><br><span class="line">  &lt;/map&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>
<p>引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;property name=<span class="string">&quot;name&quot;</span> ref=<span class="string">&quot;refBean&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>或者 <code>XML</code> 声明 <code>p</code> 命名空间，然后配置 <code>Bean</code> ，特殊字符 用 <code>&lt;![CDATA[]]&gt;</code> 转义</p>
<p>项目启动 <code>@SpringBootApplication</code> 注解中的  <code>@EnableAutoConfiguration</code> 会加载配置文件的 <code>Bean</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>resources/META-INF/spring.factories</code> 文件中配置</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.autoconfigure</span>.EnableAutoConfiguration=com<span class="selector-class">.kangpan</span><span class="selector-class">.model</span>.Configs</span><br></pre></td></tr></table></figure>
<p><code>Configs</code> 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@Import(&#123;ConfigFoo.class,ConfigBar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>引入的 <code>ConfigFoo ConfigBar</code>  类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigBar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ConfigBar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigFoo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigFoo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;ConfigFoo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目 控制台打印 <code>ConfigBar ConfigFoo</code>，如果 <code>@EnableConfigurationProperties</code> 改成  <code>@Configuration</code> 不需要在 <code>resources/META-INF/spring.factories</code> 文件中配置<br>看下 <code>Configuration</code> 接口，加了 <code>@Component</code> 注解 会实例化 <code>Bean</code></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line">public <span class="variable">@interface</span> Configuration &#123;&#125;</span><br></pre></td></tr></table></figure>

<p> <code>@ConfigurationProperties</code>  结合 <code>@EnableConfigurationProperties</code> 配置Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span> <span class="comment">// 读取  application.properties 中的配置</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>application.properties</code> 文件中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p><code>@EnableConfigurationProperties</code> 使 <code>@ConfigurationProperties</code> 注解的类注入自身</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(DataSourceBean2.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBeanConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean2 dataSourceBean2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceBeanConfig</span><span class="params">(DataSourceBean2 dataSourceBean2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSourceBean2 = dataSourceBean2;</span><br><span class="line">        log.info(<span class="string">&quot;url: &#123;&#125;&quot;</span>,dataSourceBean2.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring.factories</code> 配置 或者 <code>DataSourceBeanConfig</code> 类 加上 <code>@Configuration</code> 或者 <code>@Component</code> 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.kangpan.model.DataSourceBeanConfig</span><br></pre></td></tr></table></figure>
<p>控制台打印 <code>url</code></p>
<p>自定义 <code>XML</code> 配置 <code>Bean</code>， 在 <code>resource/bean.xml</code> 配置 <code>dataSourceBean</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSourceBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kangpan.model.DataSourceBean&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结合 <code>@ConfigurationProperties</code> 属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用 <code>@ImportResource</code> 导入 <code>bean.xml</code> 配置的 <code>Bean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourceBean dataSourceBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;dataSourceBean.getUrl():&#123;&#125;&quot;</span>,dataSourceBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>项目启动 控制台打印 <code>url</code></p>
<p>自定义 <code>properties</code> 配置 <code>Bean</code>，在 <code>resources/dataSource.properties</code> 配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/kangpan?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC&amp;useAffectedRows=true</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=</span><br></pre></td></tr></table></figure>
<p><code>@PropertySource</code> 加载指定文件的属性， <code>@Value</code> 赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:dataSource.properties&quot;)</span>  </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用  <code>@ConfigurationProperties</code> 属性赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:dataSource.properties&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourcesBean dataSourcesBean;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;dataSourcesBean.getUrl():&#123;&#125;&quot;</span>,dataSourcesBean.getUrl());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行项目 打印 <code>url</code></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/2021/04/14/Lombok/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Data</td>
<td align="left">用在类上，提供<code>Getter、Setter、equals、hasCode、toString</code> 、构造方法（参数：<code>@NonNull和final字段</code>）</td>
</tr>
<tr>
<td align="left">@AllArgsConstructor</td>
<td align="left">用在类上，提供全参数构造方法</td>
</tr>
<tr>
<td align="left">@NoArgsConstructor</td>
<td align="left">用在类上，提供无参构造方法</td>
</tr>
<tr>
<td align="left">@RequiredArgsConstructor</td>
<td align="left">用在类上，提供构造方法（参数：<code>@NonNull和final字段</code>）</td>
</tr>
<tr>
<td align="left">@Value</td>
<td align="left">用在类上，提供 <code>get、equals、hashCode、toString</code>、全参数构造方法</td>
</tr>
<tr>
<td align="left">@EqualsAndHashCode</td>
<td align="left">用在类上，提供<code>equals、hasCode</code>方法，继承父类使用 <code>@EqualsAndHashCode(callSuper = true)</code></td>
</tr>
<tr>
<td align="left">@NonNull</td>
<td align="left">用在字段上，提供无参构造方法，为空则抛出<code>NullPointerException</code></td>
</tr>
<tr>
<td align="left">@Cleanup</td>
<td align="left">用在字段上，释放资源，<code>try&#123;&#125;finally&#123;&#125;</code></td>
</tr>
<tr>
<td align="left">@SneakyThrows</td>
<td align="left">用在类上，捕获异常，指定异常<code>@SneakyThrows(Exception.class)</code></td>
</tr>
</tbody></table>
<span id="more"></span>

<blockquote>
<p>注解 <code>@Getter @Setter</code>，<code>@Getter</code> 支持懒加载 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Getter &#123;</span><br><span class="line">	lombok.<span class="function">AccessLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> lombok.AccessLevel.PUBLIC</span>;</span><br><span class="line">	AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">lazy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Setter &#123;</span><br><span class="line">	lombok.<span class="function">AccessLevel <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> lombok.AccessLevel.PUBLIC</span>;</span><br><span class="line">	AnyAnnotation[] onMethod() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	AnyAnnotation[] onParam() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">AccessLevel</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PUBLIC</td>
<td align="left">生成 <code>public</code> 修饰的 <code>getter    setter</code> 方法</td>
</tr>
<tr>
<td align="left">MODULE</td>
<td align="left">生成没有修饰符修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PROTECTED</td>
<td align="left">生成 <code>protected</code> 修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PACKAGE</td>
<td align="left">生成没有修饰符修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">PRIVATE</td>
<td align="left">生成 <code>private</code> 修饰的 <code>getter  setter</code> 方法</td>
</tr>
<tr>
<td align="left">NONE</td>
<td align="left">不生成 <code>getter  setter</code> 方法</td>
</tr>
</tbody></table>
<blockquote>
<p>注解  <code>@EqualsAndHashCode</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EqualsAndHashCode &#123;</span><br><span class="line">	String[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	String[] of() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">callSuper</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">doNotUseGetters</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">exclude</td>
<td align="left">在生成的 <code>equals</code> 和 <code>hashCode</code> 方法中排除的字段</td>
</tr>
<tr>
<td align="left">of</td>
<td align="left">在生成的 <code>equals</code> 和 <code>hashCode</code> 方法中列出的字段</td>
</tr>
<tr>
<td align="left">callSuper</td>
<td align="left">属性设置为 <code>true</code>，表示父类的 <code>equals</code> 和 <code>hashCode</code> 参与计算，默认为 <code>false</code></td>
</tr>
<tr>
<td align="left">doNotUseGetters</td>
<td align="left">通常都是通过字段的 <code>getter</code> 方法获取字段值，设置为 <code>true</code>，表示不通过 <code>getter</code> 方法获取，而是直接访问字段值，默认为 <code>false</code></td>
</tr>
</tbody></table>
<blockquote>
<p>注解 <code>@Accessors</code> ，配合 <code>@Setter、@Getter 、@Data </code>注解，用在类上和字段上</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">fluent</td>
<td align="left">默认为 <code>false</code>，如果为 <code>true</code> 则生成的 <code>getter/setter</code> 方法没有 <code>set/get</code> 前缀，如果为 <code>true</code>, <code>chain</code> 未设置，则 <code>chain</code> 会被设置为 <code>true</code></td>
</tr>
<tr>
<td align="left">chain</td>
<td align="left">默认为 <code>false</code>， <code>setter</code> 方法返回是 <code>void</code>，如果为 <code>true</code> 则返回<code> this</code>，当 <code>fluent</code> 为 <code>true</code> 时，<code>chain</code> 会设置为 <code>true</code></td>
</tr>
<tr>
<td align="left">prefix</td>
<td align="left"><code>getter    setter </code>方法时会去掉指定的前缀</td>
</tr>
</tbody></table>
<blockquote>
<p>注解 <code>Log</code></p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@CommonsLog</td>
<td align="left"><code>org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@JBossLog</td>
<td align="left"><code>org.jboss.logging.Logger log = org.jboss.logging.Logger.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Log</td>
<td align="left"><code>java.util.logging.Logger log = java.util.logging.Logger.getLogger(LogExample.class.getName())</code></td>
</tr>
<tr>
<td align="left">@Log4j</td>
<td align="left"><code>org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Log4j2</td>
<td align="left"><code>org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@Slf4j</td>
<td align="left"><code>org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class)</code></td>
</tr>
<tr>
<td align="left">@XSlf4j</td>
<td align="left"><code>org.slf4j.ext.XLogger log = org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class)</code></td>
</tr>
</tbody></table>
<p>详情见 <a href="https://blog.csdn.net/wb1046329430/article/details/106105767/">使用 Lombok 进行 Java 开发</a><br>使用 <code>@Data</code> 会遇到什么坑，看下 <code>Mybatis</code> 的 <code>PropertyNamer</code> 类 ，<code>methodToProperty</code> 方法转属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">methodToProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// is开头的一般是bool类型，直接从第二个(索引)开始截取</span></span><br><span class="line">  <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;is&quot;</span>)) &#123;</span><br><span class="line">    name = name.substring(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// set get的就从第三个(索引)开始截取</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;get&quot;</span>) || name.startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">    name = name.substring(<span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isTrue;</span><br><span class="line">    <span class="keyword">private</span> String mName;</span><br><span class="line">    <span class="keyword">private</span> Boolean isFalse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.getMName(); <span class="comment">// mName 属性的 get 方法</span></span><br><span class="line">        test.isTrue(); <span class="comment">// isTrue 属性的  get 方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;getMName&quot;</span>)); <span class="comment">// 打印 MName 属性 (错误)</span></span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;isTrue&quot;</span>)); <span class="comment">// 打印 true 属性 (错误)</span></span><br><span class="line"></span><br><span class="line">        test.getIsFalse();</span><br><span class="line">        System.out.println(PropertyNamer.methodToProperty(<span class="string">&quot;getIsFalse&quot;</span>)); <span class="comment">// 打印 isFalse 属性  (正确)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出 <code>Mybatis</code> 把 <code>@Data</code> 生成的方法转属性之后，跟原属性对不上，所以使用的时候， <code>boolean</code> 类型 不要 <code>is加大写字母</code>命名，其它基本类型属性不要 <code>第一个字母小写 第二个字母大写</code> 命名<br>如果类实现 <code>Serializable</code>接口，  <code>boolean</code> 类型的字段命令为  <code>isTrue</code> 的会有问题 ，字段序列号后是 <code>true</code></p>
<p>如果要 <code>Builder</code> 链式调用父类的字段 ，父类和子类都要加 <code>@SuperBuilder</code><br> <code>Coffee.builder().name(&quot;name&quot;).id(100L).build();</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@ToString(callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;name can not be null&quot;)</span> <span class="comment">//只能作用在 String 上,不能为null, 而且调用trim()后, 长度必须大于0</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
